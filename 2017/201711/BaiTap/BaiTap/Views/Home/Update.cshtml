@model BaiTap.Models.HoiVien

@{
    ViewBag.Title = "Update";
    bool isUpdate = ViewBag.IsUpdate;
}

@Html.Hidden("isUpdate", isUpdate)

@using (Html.BeginForm("Update", "Home", FormMethod.Post, new { @enctype = "multipart/form-data" , id="form_up"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>HoiVien</legend>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.APK)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.APK)
            @Html.ValidationMessageFor(model => model.APK)
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.DivisionID)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.DivisionID, new { @required=true, @ErrorMessage = "Bạn chưa nhập đơn vị"})
            @Html.ValidationMessageFor(model => model.DivisionID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MemberID)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MemberID, new {@required=true, @Remote = "MemberID",  @HttpMethod  = "POST",@Action="CheckID", @ErrorMessage ="ID này đã bị trùng"})
            @Html.ValidationMessageFor(model => model.MemberID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.MemberName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.MemberName, new { @required=true, @ErrorMessage = "Bạn chưa nhập tên"})
            @Html.ValidationMessageFor(model => model.MemberName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.ShortName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.ShortName)
            @Html.ValidationMessageFor(model => model.ShortName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Address)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Address, new { @required=true, @ErrorMessage = "Bạn chưa nhập địa chỉ"})
            @Html.ValidationMessageFor(model => model.Address)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Identify)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Identify)
            @Html.ValidationMessageFor(model => model.Identify)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Phone)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Phone,new { @class="digits", @maxlength="12"})
            @Html.ValidationMessageFor(model => model.Phone)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Tel)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Tel,new { @class="digits", @maxlength="12"})
            @Html.ValidationMessageFor(model => model.Tel)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Fax)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Fax)
            @Html.ValidationMessageFor(model => model.Fax)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Email)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Email, new { @class="required email",@regularExpression=@"\A(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)\Z"})
            @Html.ValidationMessageFor(model => model.Email)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Birthday)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Birthday)
            @Html.ValidationMessageFor(model => model.Birthday)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Website)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Website)
            @Html.ValidationMessageFor(model => model.Website)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.Mailbox)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Mailbox)
            @Html.ValidationMessageFor(model => model.Mailbox)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.AreaName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.AreaName)
            @Html.ValidationMessageFor(model => model.AreaName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CityName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CityName)
            @Html.ValidationMessageFor(model => model.CityName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CountryName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CountryName)
            @Html.ValidationMessageFor(model => model.CountryName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.WardName)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.WardName)
            @Html.ValidationMessageFor(model => model.WardName)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CreatDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CreatDate)
            @Html.ValidationMessageFor(model => model.CreatDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.CreateUserID)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.CreateUserID)
            @Html.ValidationMessageFor(model => model.CreateUserID)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.LastModifyDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.LastModifyDate)
            @Html.ValidationMessageFor(model => model.LastModifyDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.LastModifyUserID)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.LastModifyUserID)
            @Html.ValidationMessageFor(model => model.LastModifyUserID)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.Disabled)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Disabled)
            @Html.ValidationMessageFor(model => model.Disabled)
        </div>*@

        <p>
            <input type="button"  id= "btnLuu" value="Save" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    
   
    $(document).ready(function () {
        $("#btnLuu").bind("click", function () {
            if ($("#isUpdate").val() == "False") {
                var form = $("#form_up");
                form.validate();

                if (!form.valid()) {
                    return false;
                }
                var data = JSON.stringify(u_data());
                $.ajax({
                    type: "POST",
                    url: "/Home/AddData",
                    contentType: 'application/json; charset=utf-8',
                    data: data,
                    asyn: false,
                    success: function (result) {
                        if (result) {
                            refresh();
                            alert("Lưu thành công");
                        }
                        else {
                            alert("Lưu thất bại");
                        }
                    },
                    error: function (xhr, status, exception) {

                    }
                });
            }
            else {
                var form = $("#form_up");
                form.validate();

                if (!form.valid()) {
                    return false;
                }
                var data = JSON.stringify(u_data());
                $.ajax({
                    type: "POST",
                    url: "/Home/UpdateData",
                    contentType: 'application/json; charset=utf-8',
                    data: data,
                    asyn: false,
                    success: function (result) {
                        if (result) {
                            refresh();
                            alert("Lưu thành công!")
                        }
                        else {
                            alert("Lưu thất bại");
                        }
                    },
                    error: function (xhr, status, exception) {

                    }
                });
            }
        });

    })
</script>
