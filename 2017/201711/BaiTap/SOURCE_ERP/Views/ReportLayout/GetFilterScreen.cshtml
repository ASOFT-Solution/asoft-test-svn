@using ASOFT.ERP.A00.Core;
@using ASOFT.ERP.ViewModel;
@using ASOFT.ERP.ViewModel.Helper;
@using System.Web.UI.WebControls;
@using ASOFT.ERP.A00.Entities.Common;
@model IEnumerable<ASOFTSysFieldsViewModel>
@{
    //ViewBag.Width = 500;
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    List<string> listjava = ViewBag.Java;
    List<string> listcss = ViewBag.CSS;
    string module = ViewBag.Module;
    string ScreenID = ViewBag.ScreenID;
}
@Html.Hidden("Module", (string)ViewBag.Module)
@Html.Hidden("ReportIDHide", (string)ViewBag.ReportID)
@Html.Hidden("ScreenID", (string)ViewBag.ScreenID)
@Html.Hidden("EnvironmentDivisionID", ASOFTEnvironment.DivisionID)
@helper parseControl(ASOFTSysFieldsViewModel item, string module, string ScreenID)
{
    @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
    @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                                                                  if (item.SpecialControl != null)
                                                                  {
                                                                      ViewDataDictionary ViewDT = new ViewDataDictionary();
                                                                      ViewDT["Module"] = ViewBag.Module;
                                                                      ViewDT["ScreenID"] = ViewBag.ScreenID;
                                                                      ViewDT["ScreenType"] = "Filter";
        @Html.Partial(string.Format(@"../Shared/Control/" + LocalizedHelper.GetLocalizedSpecialControl(int.Parse(item.SpecialControl.ToString())).PartialName), item, ViewDT)
        @Html.ASOFTHidden(item.ColumnName, item.SpecialControl);
                                                               return;
                                                                  }
                                                                  if (item.PopupVisible == 0)
                                                                  {
        @Html.ASOFTHidden(item.ColumnName, item.Data);
                                                                  }
                                                                  else
                                                                  {
                                                                      switch (item.Type)
                                                                      {
                                                                          case 1:
                <tr class=@item.ColumnName>
                    <td class="asf-td-caption" >@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })</td>
                    <td  class="asf-td-field">@Html.ASOFTTextBox(itemModel => item.Data, htmlStyle: new { width = Unit.Percentage(100) }, htmlAttribute: new { @id = item.ColumnName })</td>                                                     
                </tr>
                                                                              break;

                                                                          case 2:
               
                <tr class=@item.ColumnName>
                    <td></td>
                    <td class = "asf-dynamic-cb">@Html.ASOFTCheckbox(itemModel => item.TypeCheckBox, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName }, dynamiclabel: item.language)</td>                                      
                </tr>
                                                                              break;

                                                                          case 3:
               @Html.ASOFTHidden("CheckInList", item.ColumnName);
                <tr class=@item.ColumnName>
                    <td class="asf-td-caption">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })</td>
                    <td class="asf-td-field">
                     @{  
                                                                ComboBoxDynamic DynamicComboModel = new ComboBoxDynamic();
                                                                DynamicComboModel.sysComboBoxID = item.sysComboBoxID;
                                                                DynamicComboModel.ScreenID = "ReportView";
                                                                DynamicComboModel.Module = module.Remove(0, 5);
                                                                DynamicComboModel.isContent = true; //Nếu là combo ở màn hình content thì k cho thêm nhanh
                                                                if (ASOFT.ERP.Controllers.ComboBoxController.CheckDynamicData(DynamicComboModel, Model))
                                                                {
                            @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel, true, htmlAttributes: new { @id = item.ColumnName, @Module = module.Remove(0, 5), @ScreenID = "ReportView", @sysComboBoxID = item.sysComboBoxID }).Events(e => e.Open("OpenComboDynamic"))
                                                                }
                                                                else
                                                                {
                        @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel, false, htmlAttributes: new { @id = item.ColumnName })
                                                                }
                    }</td>                                                     
                </tr>
                                                                break;

                                                                          case 4:
                
                <tr class=@item.ColumnName>
                    <td class="asf-td-caption">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })</td>
                    <td class="asf-td-field">
                     @{  
                                                                ComboBoxDynamic DynamicMultiCheckListModel = new ComboBoxDynamic();
                                                                DynamicMultiCheckListModel.sysComboBoxID = item.sysComboBoxID;
                                                                DynamicMultiCheckListModel.ScreenID = "ReportView";
                                                                DynamicMultiCheckListModel.Module = module.Remove(0, 5);
                                                                if (ASOFT.ERP.Controllers.ComboBoxController.CheckDynamicData(DynamicMultiCheckListModel, Model))
                                                                {
                            @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicMultiCheckListModel, true, htmlAttributes: new { @id = item.ColumnName, @Module = module.Remove(0, 5), @ScreenID = "ReportView", @sysComboBoxID = item.sysComboBoxID }).Events(e => e.Open("OpenMultiCheckListDynamic"))
                                                                }
                                                                else
                                                                {
                        @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicMultiCheckListModel, false, htmlAttributes: new { @id = item.ColumnName })
                                                                }
                    }</td>                                                     
                </tr>
                                                                break;

                                                                          case 5:
           
            <tr class=@item.ColumnName>
                <td>@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })</td>
                <td>
                    @Html.ASOFTDateEdit(itemModel => item.TypeDateTimePicker, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName })
                </td>
            </tr>
                                                                break;
                                                                          case 9:
                                                                bool readol2 = false;
                                                                if (item.ReadOnly == 1)
                                                                {
                                                                    readol2 = true;
                                                                }
                                                                ComboBoxDynamic DynamicRadioModel = new ComboBoxDynamic();
                                                                DynamicRadioModel.sysComboBoxID = item.sysRadioButtonID;
                                                                DynamicRadioModel.ScreenID = ViewBag.ScreenID;
                                                                DynamicRadioModel.Module = ViewBag.Module;
                                                                string ParentRadio = ASOFT.ERP.Controllers.ComboBoxController.GetParentColumnameRadio(DynamicRadioModel, Model);
                                                                var listRadio = new List<Dictionary<string, string>>();
                                                                if (!string.IsNullOrEmpty(ParentRadio))
                                                                {
                                                                    listRadio = ASOFT.ERP.ViewModel.ASOFTBussinessRadioButton.ASOFTDynamicRadioButton(item.sysRadioButtonID, Model);
                                                                }
                                                                else
                                                                {
                                                                    listRadio = ASOFT.ERP.ViewModel.ASOFTBussinessRadioButton.ASOFTDynamicRadioButton(item.sysRadioButtonID);
                                                                }
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);

                                                                          foreach (var radio in listRadio)
                                                                          {
                                                                              bool check = false;
                                                                              if (radio.ContainsKey("IDLanguage"))
                                                                              {
                                                                                  radio["Text"] = LocalizedHelper.GetLocalizedResourceString(radio["IDLanguage"], ScreenID, module.Remove(0, 5));
                                                                              }
                                                                              if (item.Data != null)
                                                                              {
                                                                                  if (radio["Value"].Equals(item.Data.ToString()))
                                                                                  {
                                                                                      check = true;
                                                                                  }
                                                                              }
                <tr class="@item.ColumnName">
                    <td class="asf-td-caption"></td>
                    <td class="asf-td-field" colspan="3">@Html.ASOFTRadioButton(itemModel => item.Data, radio["Value"], htmlAttributes: new { @id = item.ColumnName }).CheckedIf(check).DisabledIf(readol2) @radio["Text"]</td> 
                </tr>                     
                                                                          }
                                                                          break;
                                                                          case 10:
                                                                          List<ASOFTSysFields> listFields = new ASOFT.ERP.A00.Business.Common.ComboBoxBL().ComboBoxMultiColumn(item.sysComboBoxID).FindAll(m => m.Visible == 1);
                                                                          string headerTemplate = string.Empty;
                                                                          string itemTemplate = string.Empty;
                                                                          int listWidth = 150;
                                                                          if (listFields.Count > 1)
                                                                          {
                                                                              headerTemplate = @"<ul class='k-list asf-combo-item-header'><li class='k-item asf-combo-item-header-text'><div class='asf-combo-item'>{0}</div></div></ul>";
                                                                              itemTemplate = @"<div class='asf-combo-item'>{0}</div>";
                                                                              string header = "";
                                                                              string tempalteA = "";
                                                                              foreach (var itemF in listFields)
                                                                              {
                                                                                  header = header + "<div style='width: " + itemF.GridWidth + "px' class='k-state-default asf-combo-item-col-value'>" + LocalizedHelper.GetLocalizedResourceString(ViewBag.ScreenID + "." + itemF.ColumnName + ".Auto", ViewBag.ScreenID, module) + "</div>";
                                                                                  tempalteA = tempalteA + "<div style='width:" + itemF.GridWidth + "px' class='k-state-default asf-combo-item-col-value'>${" + itemF.ColumnName + "}</div>";
                                                                                  listWidth = listWidth + itemF.GridWidth;
                                                                              }
                                                                              headerTemplate = string.Format(headerTemplate, header);
                                                                              itemTemplate = string.Format(itemTemplate, tempalteA);
                                                                          }
                                                                          //@Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                                                                          //@Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <tr class = @item.ColumnName style="vertical-align:top">
            <td>@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                </td>
                <td class ="addObject-auto">
                    @(Html.Kendo().AutoCompleteFor(itemModel => item.Data)
                      .Animation(animation => animation.Enable(false))
                      .HtmlAttributes(new Dictionary<string, Object> {
                          {"class","post-add-autocomplete"}, 
                          {"height","10px"},
                          {"data-bind", "value: " + item.ColumnName},
                          { "Module" , ViewBag.Module },
                          { "ScreenID", ViewBag.ScreenID },
                          { "sysComboBoxID",  item.sysComboBoxID },
                          { "requaird", item.AllowNull},
                          {"listWidth", listWidth}
                      })
                      .DataTextField(item.ColumnName)
            //.Placeholder(Html.ASOFTRaw(model => model.SearchMemberID))
                      .Filter("contains")
                      .Name(item.ColumnName)
                      .Events(e => e.DataBound("ASOFT.asoftComboBox.dataBound"))
                      .HeaderTemplate(headerTemplate)
                      .Template(itemTemplate)
                      )
                    <span class="asf-button-special"><a id='btnOpenSearch_@item.ColumnName' class="btnOpenSearch k-button k-button-icontext asf-button asf-icon-24 asf-i-search-24" style="width: 25px; height: 25px" data-role="button" role="button" aria-disabled="false" onclick="OpenSearchClick('@item.ColumnName')" tabindex="0">&nbsp;</a></span>
                </td>       
                </tr>      
                    break;
                                                                      }
                                                                  }
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "FormReportFilter" }))
{

    //control layout
    <div class="asf-form-container">
            <div class="form-content">
                 <table class="asf-table-view">
                    @foreach (var item in Model)
                    {
                         @parseControl(item, module, ScreenID);
                    }
                    @{//Combobox Template

                    ASOFTSysFieldsViewModel comboPath = (ASOFTSysFieldsViewModel)ViewBag.GetPathTemplate;
                    if (comboPath.FieldVisible == 0)
                    {
        <tr>
                <td>@Html.Label(comboPath.language)</td>
                    <td>
        @Html.ASOFTBussinessComboBox().ASOFTComboPathReport(m => comboPath.Data, comboPath.DefaultValue, (string)ViewBag.Module, (string)ViewBag.ScreenID)
                        </td>
            </tr>
                    }
                    else
                    {
            @Html.ASOFTHidden("comboPath_Data", comboPath.ColumnName)
                    }              
                      }
                </table>
           </div>
       </div>
   
                    //Button
    <div class="asf-form-container">
        <div class="mtf0061-form-content">
            <div class="asf-form-button">
                    <table class="asf-table-view">
                    <tr>
                        <td align="right">
                            <div class="asf-popup-button-container">
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                                            .Name("btnClose").Events(e => e.Click("btnClose_Click")))
                                </div>
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnPrint"))
                                           .Name("btnPrint").Events(e => e.Click("btnPrint_Click")))
                                </div>
                                @if (ASOFTEnvironment.CustomerIndex == ASOFTConstants.CUSTOMERINDEX_ANGEL)
                                {
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnPrintBD"))
                                           .Name("btnPrintBD").Events(e => e.Click("btnPrintBD_Click")))
                                </div>
                                }
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnExcel"))
                                            .Name("btnExport").Events(e => e.Click("btnExport_Click")))
                                </div>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
         </div>
     </div>
}

@section jsFeature {
    @if (listjava.Count > 0)
    {
        foreach (string jv in listjava)
        {
            <script src="@Url.Content("~/Scripts/JavaCustomize/" + module.Remove(0, 5) + "/" + jv + "?v=" + ASOFTEnvironment.Version)" type="text/javascript"></script>
        }
    }
}

@section styleFeature {
    @if(listcss.Count > 0)
    {
        foreach(string css in listcss)
        {
            <link  href="@Url.Content("~/Content/CSSCustomize/"+ module.Remove(0, 5) + "/" + css + "?v="+ASOFTEnvironment.Version)" rel="stylesheet" type="text/css" />
        }
    }
}

<script>
    //Xử lý textbox 
    $(document).ready(function () {
        var ip = $(":input[type='text']");
        $(ip).each(function () {
            $(this).attr("name", this.id);
        })
        if (typeof parent.returnReport === "function") {
            var list = parent.returnReport();
            $("#ReportID").val(list[0]);
            $("#ReportName").val(list[1]);
            $("#ReportID").attr("readonly", "readonly");
            $("#ReportName").attr("readonly", "readonly");
        }

        var rdo = $(":input[type='radio']");
        $(rdo).each(function () {
            if (this.name != "rdoFilter")
                $(this).attr("name", this.id);
        })

        $(".btnOpenSearch").bind("focusin", btnOpenSearchFocus);
    });

    //Xử lý cho combobox
    function onComboSuccess(result, combo) {
        combo.dataSource.data(result);
        if (result.length == 0) {
            combo.value("");
        }
    };

    function OpenComboDynamic(combo) {
        if (combo.sender != null) {
            SendFromCombo(combo.sender, "/combobox/ASOFTComboBoxDynamicLoadData");
        }
        else {
            SendFromCombo(combo, "/combobox/ASOFTComboBoxDynamicLoadData");
        }
    };

    function OpenMultiCheckListDynamic(combo) {
        if (combo.sender != null) {
            SendFromCombo(combo.sender, "/combobox/ASOFTMultiCheckListDynamicLoadData");
        }
        else {
            SendFromCombo(combo, "/combobox/ASOFTMultiCheckListDynamicLoadData")
        }
    };

    function SendFromCombo(combo, url) {
        var datamaster = ASOFT.helper.dataFormToJSON("FormReportFilter");
        var list = new Array();
        list.push(AddList("sysComboBoxID", combo.element.attr("sysComboBoxID")));
        list.push(AddList("ScreenID", combo.element.attr("ScreenID")));
        list.push(AddList("Module", combo.element.attr("Module")));
        $.each(datamaster, function (key, value) {
            if (key.indexOf("_input") == -1) {
                var item = new Object();
                list.push(AddList(key, value));
            }
        });
        ASOFT.helper.postTypeJsonComboBox(url, list, combo, onComboSuccess);
    };
    function AddList(key, value) {
        var item = new Object();
        item.key = key;
        item.value = value;
        return item;
    };

    //Xử lý button
    function btnClose_Click(e) {
        ASOFT.asoftPopup.hideIframe(true);
    };

    var isPrint = false;
    var URLDoPrintorExport = '/ReportLayout/DoPrintOrExport?ReportID=' + $("#ReportIDHide").val() + '&Module=' + $("#Module").val();

    function isValid() {
        var data = ASOFT.helper.dataFormToJSON("FormReportFilter");
        var CheckInList = [];
        if (data["CheckInList"] != undefined) {
            if (jQuery.type(data["CheckInList"]) === "string") {
                CheckInList.push(data["CheckInList"]);
            }
            else {
                CheckInList = data["CheckInList"];
            }
        }
        if (ASOFT.form.checkRequiredAndInList("FormReportFilter", CheckInList)) {
            return false;
        }
        return true;
    }

    //Sự kiện xuất printBD
    function btnPrintBD_Click() {
        if (!isValid()) {
            return;
        }

        var data = getData();
        var url = URLDoPrintorExport;

        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck();
            if (Check) {
                return false;
            }
        }
        isPrint = true;

        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    }

    //Sự kiện xuất print
    function btnPrint_Click() {
        if (!isValid()) {
            return;
        }

        var data = getData();
        var url = URLDoPrintorExport;

        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck(data);
            if (Check) {
                return false;
            }
        }
        isPrint = true;
        
        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    };

    //Sự kiện xuất excel
    function btnExport_Click() {
        if (!isValid()) {
            return;
        }

        var data = getData();
        var url = URLDoPrintorExport;

        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck(data);
            if (Check) {
                return false;
            }
        }
        isPrint = false;
        
        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    };

    function ExportSuccess(result) {
        if (result) {
            var urlPrint = '/ReportLayout/ReportViewer';
            var urlExcel = '/ReportLayout/ExportReport';
            var urlPost = isPrint ? urlPrint : urlExcel;
            var options = isPrint ? '&viewer=pdf' : '';
            var RM = '&ReportID=' + $("#ReportIDHide").val() + '&Module=' + $("#Module").val() + '&ScreenID=' + $("#ScreenID").val();
            // Tạo path full
            var fullPath = urlPost + "?id=" + result.apk + options + RM;

            // Getfile hay in báo cáo
            if (options) {
                window.open(fullPath, "_blank"
              //,'resizable=yes,scrollbars=yes,status=yes,display:none'
                    );
            } else {
                window.location = fullPath;
            }
        }
    }

    function getData() {
        var datamaster = ASOFT.helper.dataFormToJSON("FormReportFilter");
        var list = new Array();
        $.each(datamaster, function (key, value) {
            if (key.indexOf("_input") == -1) {
                if (key != "item.TypeCheckBox") {
                    var item = new Object();
                    list.push(AddList(key, value));
                }
            }
        });
        var cb = $("input[type='checkbox']");
        $(cb).each(function () {
            var temp = $(this).is(':checked');
            var id = $(this).attr("id");
            if (temp) {
                list.push(AddList(id, "1"));
            }
            else {
                list.push(AddList(id, "0"));
            }
        });

        return list;
    }

    function Auto_Change(e) {
        if (typeof Auto_ChangeDynamic === "function") {
            var item = this.dataItem(e.item.index());
            Auto_ChangeDynamic(item);
        }
    }


    function OpenSearchClick(auto) {
        var autoComplete = $("#" + auto).data("kendoAutoComplete");
        OpenComboDynamic(autoComplete);
        autoComplete.search($("#" + auto).val());
    }

    function btnOpenSearchFocus() {
        var id = this.id.split('_')[1];
        var autoComplete = $("#" + id).data("kendoAutoComplete");
        OpenComboDynamic(autoComplete);
        autoComplete.search($("#" + id).val());
    }
</script>

