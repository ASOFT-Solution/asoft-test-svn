@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Updater         Comment
//#     13/03/2017      Quang Hoàng      Tạo mới
//####################################################################
*@
@using ASOFT.ERP.A00.Core.Control;
@using ASOFT.ERP.ViewModel;
@using ASOFT.ERP.A00.Core;
@using Kendo.Mvc;
@using ASOFT.ERP.Controllers;
@model IEnumerable<ASOFTSysFieldsViewModel>

<script>
    $(document).ready(function() {
        ASOFT.form.setSameWidth("asf-content-block");
    });
</script>

@{
    IEnumerable<ASOFTSysGroupViewModel> ListGroup = ViewBag.ListGroup;
    IEnumerable<ASOFTSysTableViewModel> ListTable = ViewBag.Table;
    List<ASOFTSysFieldsViewModel> listPK = ViewBag.ListPK;
    listPK = listPK.OrderBy(m => m.TabIndex).ToList();
    List<ASOFTSysGroupViewModel> listGroupDetail = ListGroup.Where(m => !m.ScreenID.Equals("A00") && !string.IsNullOrEmpty(m.sysTable)).ToList();
    string ScreenID = ViewBag.ScreenID;
    string ScreenPopup = ViewBag.ScreenPopup;
    string ParentID = ViewBag.ParentID;
    string PK = ViewBag.PKParent;
    int k = 0;
    string strContent = "<div class='asf-master-content'>{0}</div>";
    string strBlockLeft = "<div class='asf-content-block-sys left'>{0}</div>";
    string strBlockRight = "<div class='asf-content-block-sys right'>{0}</div>";
    string strBlockFirst = "<div class='asf-content-block first'>{0}</div>";
    string strBlockMiddle = "<div class='asf-content-block middle'>{0}</div>";
    string strBlockLast = "<div class='asf-content-block last'>{0}</div>";
    string strTable = "<table class='asf-table-view'>{0}</table>";
    string strTr = "<tr ><td class='content-label'>{0}</td><td class='dot'></td><td class='{2} content-text'>{1}</td></tr>";
    bool openGroup = true;
    foreach (ASOFTSysGroupViewModel item in ListGroup.Where(m => !m.ScreenID.Equals("A00") && string.IsNullOrEmpty(m.sysTable)))
    {
        string MainContent = string.Empty;
        string Tr = string.Empty;
        string Table = string.Empty;
        IEnumerable<ASOFTSysFieldsViewModel> ListField = Model.Where(m => !string.IsNullOrEmpty(m.GroupID)).Where(m => ("," + m.GroupID.Replace(" ", "") + ",").IndexOf("," + item.sysGroupID + ",") != -1 && m.ViewVisible == 1);

        int col3 = ListField.Count() != null ? ListField.Count() : 0;
        int col1 = col3 / 3;
        int col2 = 0;
        if (col3 % 3 == 1)
        {
            col2 = (col1 * 2) + 1;
            col1++;
        }
        else if (col3 % 3 == 2)
        {
            col1++;
            col2 = col1 * 2;
        }
        else
        {
            col2 = col1 * 2;
        }
        int i = 0;

        string BlockFirst = string.Empty;
        string BlockMiddle = string.Empty;
        string BlockLast = string.Empty;
        for (; i < col1; i++)
        {
            ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
            Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
        }
        Table = string.Format(strTable, Tr);
        Tr = string.Empty;
        BlockFirst = string.Format(strBlockFirst, Table);
        for (; i < col2; i++)
        {
            ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
            Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
        }
        Table = string.Format(strTable, Tr);
        Tr = string.Empty;
        BlockMiddle = string.Format(strBlockMiddle, Table);
        for (; i < col3; i++)
        {
            ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
            Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
        }
        Table = string.Format(strTable, Tr);
        Tr = string.Empty;
        BlockLast = string.Format(strBlockLast, Table);
        MainContent = string.Format(strContent, BlockFirst + BlockMiddle + BlockLast);
        
        
        @(Html.Kendo().PanelBar()
              .Name(item.GroupID.ToString())
              .HtmlAttributes(new { @class = "block-panel-master" })
              .Events(m => m.Activate("ASOFT.panelFormat.fitColumnHeight"))
              .Animation(animation => animation.Enable(true))
              .Items(panelbar =>
              {
                  panelbar.Add().Text(item.language)
                  .HtmlAttributes(new { @class = "block-panel-master-header" })
                  .Expanded(openGroup).Content(MainContent);
              }
        ))
        openGroup = false;
    }

    foreach (ASOFTSysTableViewModel item in ListTable.OrderBy(m => m.TabIndexView))
    {
        ASOFTSysGroupViewModel group = listGroupDetail.Find(m => m.sysTable.Equals(item.TableName));
        if (group == null)
        {
            k++;
            continue;
        }

        @Html.ASOFTHidden(listPK[k].sysTable, listPK[k].ColumnName)
        @Html.ASOFTHidden("dttype" + listPK[k].sysTable, listPK[k].sysDataTypeID)
        @Html.ASOFTHidden("t" + listPK[k].sysTable, "1")
        @Html.ASOFTHidden("src" + listPK[k].sysTable, item.ScreenID ?? string.Empty)
        @Html.ASOFTHidden("mdl" + listPK[k].sysTable, item.ModuleID.Remove(0, 5))
        @Html.ASOFTHidden("PKChild" + listPK[k].sysTable, item.PK)
        @Html.ASOFTHidden("sysBusiness" + listPK[k].sysTable, item.sysCategoryBusinessID)
        @Html.ASOFTHidden("refLink" + listPK[k].sysTable, item.RefLink)

         <div class="asf-panel-view-detail" id="@("toolBar" + item.TableName)">
            <div class="asfbtn asfbtn-right-3">
            @if (!string.IsNullOrEmpty(item.ScreenID) && !string.IsNullOrEmpty(item.DisplayToolBar2))
            {
                bool IsDivision = ViewBag.IsDivision;

                Model.ElementAt(0).Toolbar2 = new ASOFTController().GetToolBarViewModel(item.DisplayToolBar2, @ViewBag.ScreenID, @ViewBag.ParentID, IsDivision);
                if (Model.ElementAt(0).Toolbar2 != null)
                {
                    if (item.ScreenID.Equals("CMNF9005") || item.ScreenID.Equals("CMNF9006"))
                    {
                        Model.ElementAt(0).Toolbar2.EventDeleteDetail = "Delete" + item.ScreenID + "_Click";
                    }
                    else
                    {
                        Model.ElementAt(0).Toolbar2.EventDeleteDetail = "DeleteDetail_Click";
                    }

                    Model.ElementAt(0).Toolbar2.EventAdd = "AddDetail_Click";
                    Model.ElementAt(0).Toolbar2.EventPrint = "BtnPrint_Click";
                    Model.ElementAt(0).Toolbar2.EventSearch = "BtnChoose_Click";
                    Model.ElementAt(0).Toolbar2.EventExport = "BtnExport_Click";
                    Model.ElementAt(0).Toolbar2.TableID = item.TableName;
                    Model.ElementAt(0).Toolbar2.ScreenID = item.ScreenID;
                    Model.ElementAt(0).Toolbar2.ScreenIDAdd = ScreenPopup;
                    Model.ElementAt(0).Toolbar2.ScreenIDSearch = ScreenPopup;
                    Model.ElementAt(0).Toolbar2.ScreenIDDeleteDetail = ParentID;
                    Model.ElementAt(0).Toolbar2.ScreenIDDelete = ParentID;
                }
            
                @Html.Partial("~/Views/Shared/EditorTemplates/ToolbarDynamic.cshtml",
                         Model.ElementAt(0).Toolbar2 ?? new ASOFTToolBarViewModel())
            }
            </div>
        </div>

        @(Html.Kendo().PanelBar()
              .Name("tb_" + item.TableName.ToString())
              .HtmlAttributes(new { @class = "block-panel-master" })
              .Events(m => m.Activate("ASOFT.panelFormat.fitColumnHeight").Select(string.IsNullOrEmpty(group.PartialView) ? "panalSelect_Click" : "nofunction"))
              .Animation(animation => animation.Enable(true))
              .Items(panelbar =>
              {
                  panelbar.Add().Text(group.language)
                  .HtmlAttributes(new { @class = "block-panel-master-header" })
                  .Expanded(false).Content(!string.IsNullOrEmpty(group.PartialView) ? PartialView(group, PK, ParentID, ScreenPopup).ToHtmlString() : Detail(item).ToHtmlString());
              }
        ))
    
            k++;
    }

    foreach (ASOFTSysGroupViewModel item in ListGroup.Where(m => m.ScreenID.Equals("A00")))
    {
        string MainContent = string.Empty;
        string Tr = string.Empty;
        string Table = string.Empty;
        IEnumerable<ASOFTSysFieldsViewModel> ListField = Model.Where(m => !string.IsNullOrEmpty(m.GroupID)).Where(m => ("," + m.GroupID.Replace(" ", "") + ",").IndexOf("," + item.sysGroupID + ",") != -1 && m.ViewVisible == 1);

        int col2 = ListField.Count() != null ? ListField.Count() : 0;
        int col1 = col2 / 2;
        if (col2 % 2 == 1)
        {
            col1 += 1;
        }
        int i = 0;
        string BlockLeft = string.Empty;
        string BlockRight = string.Empty;
        for (; i < col1; i++)
        {
            ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
            Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
        }
        Table = string.Format(strTable, Tr);
        Tr = string.Empty;
        BlockLeft = string.Format(strBlockLeft, Table);
        for (; i < col2; i++)
        {
            ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
            Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
        }
        Table = string.Format(strTable, Tr);
        Tr = string.Empty;
        BlockRight = string.Format(strBlockRight, Table);

        MainContent = string.Format(strContent, BlockLeft + BlockRight);
        
        @(Html.Kendo().PanelBar()
              .Name(item.GroupID.ToString())
              .HtmlAttributes(new { @class = "block-panel-master" })
              .Events(m => m.Activate("ASOFT.panelFormat.fitColumnHeight"))
              .Animation(animation => animation.Enable(true))
              .Items(panelbar =>
              {
                  panelbar.Add().Text(item.language)
                  .HtmlAttributes(new { @class = "block-panel-master-header" })
                  .Expanded(openGroup).Content(MainContent);
              }
        ))
    }
}

@helper PartialView(ASOFTSysGroupViewModel item, string pk, string ScreenID, string SrcPopupParent) 
{
     @Html.Action(item.PartialView, "PartialView2", new { area = "" , id = item.ScreenID, module = item.ModuleID, table = Model.ElementAt(0).sysTable, pk = pk, tableChild = item.sysTable, idParent = ScreenID, SrcPopupParent = SrcPopupParent});
}

@helper Detail(ASOFTSysTableViewModel item)
{
        <input class="tableChildren" type="hidden" value="@item.TableName">
        <div class="asf-master-content"></div>

}
