@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Updater         Comment
//#     25/08/2014      Đức Quý         Tạo mới
//####################################################################
*@
@using ASOFT.ERP.ViewModel.DRM
@model DRF2001ViewModel
@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    ViewBag.Title = Html.ASOFTPageTitle(m => m.DRF2001Title, "DRF2001").ToHtmlString();
    ViewBag.Width = 1024;

    // Form Status
    bool isInsert = Model.FormStatus.Equals(ASOFTFormActionType.AddNew);

    var initData = new JavaScriptSerializer().Serialize(Model);
}

<style type="text/css">
    #DRF2001Tab .k-tabstrip-items {
        overflow-x: hidden;
        overflow-y: hidden;
        white-space: nowrap;
    }
</style>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "DRF2001" }))
{
    /*@(Html.ASOFTButton().SpriteCssClass("asf-icon-logo_prev").HtmlAttributes(new { style = isInsert ? "display:none" : "display:none;height: 30px;width: 35px; position: absolute; top: 19px; z-index: 1;" })
                              .Name("BtnPrev")
                              .Events(e => e.Click("DRF2001.BtnPrev_Click"))
                              )
    @(Html.ASOFTButton().SpriteCssClass("asf-icon-logo_next").HtmlAttributes(new { style = isInsert ? "display:none" : "height: 30px;width: 35px; position: absolute; top: 19px; left: 969px; z-index: 1;" })
                              .Name("BtnNext")
                              .Events(e => e.Click("DRF2001.BtnNext_Click"))
                              )*/
    @(Html.ASOFTTab()
          .Name("DRF2001Tab")
          .Items(tabstrip =>
          {
              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab01Title))
                  .Selected(true)
                  .HtmlAttributes(new { @id = "TabMaster01", @class = "k-tabstrip-items", style = "" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab01().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab07Title))
                .HtmlAttributes(new { @id = "TabMaster06", @class = "k-tabstrip-items", style = "" })
                .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                .Content(Tab07().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab02Title))
                  .HtmlAttributes(new { @id = "TabMaster02", @class = "k-tabstrip-items", style = "" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab02().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab03Title))
                  .HtmlAttributes(new { @id = "TabMaster02", @class = "k-tabstrip-items", style = "" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab03().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab04Title))
                  .HtmlAttributes(new { @id = "TabMaster02", @class = "k-tabstrip-items", style = "" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab04().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab05Title))
                  .HtmlAttributes(new { @id = "TabMaster02" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab05().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab06Title))
                  .HtmlAttributes(new { @id = "TabMaster06", @class = "k-tabstrip-items", style = "" })
                  .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                  .Content(Tab06().ToHtmlString());

              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab08Title))
                      .HtmlAttributes(new { @id = "TabMaster08", @class = "k-tabstrip-items", style = isInsert ? "display:none" : "" })
                      .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                      .Content(Tab08().ToHtmlString());
              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab09Title))
                      .HtmlAttributes(new { @id = "TabMaster09", @class = "k-tabstrip-items", style = isInsert ? "display:none" : "" })
                      .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                      .Content(Tab09().ToHtmlString());
              tabstrip.Add().Text(Html.ASOFTRaw(model => model.DRF2001Tab10Title))
                      .HtmlAttributes(new { @id = "TabMaster10", @class = "k-tabstrip-items", style = isInsert ? "display:none" : "" })
                      .ContentHtmlAttributes(new { @class = "asf-tab-content" })
                      .Content(Tab10().ToHtmlString());
          })
    )
}
<div class="asf-form-button">
    <table class="asf-table-view">
        <tr>
            <td align="right">
                <div class="asf-popup-button-container">
                    <div>
                        @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                              .Name("BtnClose")
                              .Events(e => e.Click("DRF2001.btnClose_Click")))
                    </div>
                    <div>
                        @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveCopy"))
                                .Name("BtnSaveCopy")
                                .Events(e => e.Click("DRF2001.btnSaveCopy_Click"))
                                .HideIf(!isInsert))
                    </div>
                    <div>
                        @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveNew"))
                                .Name("btnSaveDRF2001")
                                .Events(e => e.Click("DRF2001.btnSaveNext_Click"))
                                .HideIf(!isInsert))
                    </div>
                    <div>
                        @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSave"))
                                .Name("BtnSaveClose")
                                .Events(e => e.Click("DRF2001.btnSave_Click"))
                                .Enable(false)
                                .HideIf(isInsert))
                    </div>
                </div>
            </td>
        </tr>
    </table>
</div>
@helper Tab08()
        {
    @(Html.ASOFTCheckbox(model => model.IsCheckedEveryday,
            new Dictionary<string, object>{
                     {"onclick","DRF2001.chkEveryday_Click(this)"}
            })
    )
    <div id="ViewEveryday"></div>
    @Html.ASOFTHidden(model => model.APKDRT4444)
    @Html.ASOFTHidden(model => model.LastKey)
    @Html.ASOFTHidden(model => model.SuggesstType)
    @Html.ASOFTHidden("BeginDate", ASOFTEnvironment.BeginDate.Date)
    @Html.ASOFTHidden("EndDate", ASOFTEnvironment.EndDate.Date)
}

        @helper Tab09()
        {
    <div class="asf-filter-main">
        @Html.Partial("~/Views/Shared/EditorTemplates/Toolbar.cshtml", Model.Toolbar2 ?? new ASOFTToolBarViewModel())
    </div>
    @Html.Hidden("LeaderSendDispath", ASOFTEnvironment.LeaderSendDispath)
    @Html.Hidden("ManagerSendDispath", ASOFTEnvironment.ManagerSendDispath)
    @Html.Hidden("InfoSendDispath", ASOFTEnvironment.InfoSendDispath)
        <div class="asf-form-container">
            <div class="form-content-left" style="width:38%">
                <table class="asf-table-view">
                        <tr>
                            <td class="content-label">@Html.ASOFTLabel(model => model.IsSendXRName)</td>
                            <td class="dot"></td>
                            <td class="content-text">@Html.DisplayFor(model => model.IsSendXRName)</td>
                        </tr>
                        <tr>
                            <td class="content-label">@Html.ASOFTLabel(model => model.XRSendDate)</td>
                            <td class="dot"></td>
                            <td class="content-text">@Html.DisplayFor(model => model.XRSendDate)</td>
                        </tr>
                        <tr>
                            <td class="content-label">@Html.ASOFTLabel(model => model.IsSendVPLName)</td>
                            <td class="dot"></td>
                            <td class="content-text">@Html.DisplayFor(model => model.IsSendVPLName)</td>
                        </tr>
                        <tr>
                            <td class="content-label">@Html.ASOFTLabel(model => model.VPLSendDate)</td>
                            <td class="dot"></td>
                            <td class="content-text">@Html.DisplayFor(model => model.VPLSendDate)</td>
                        </tr>
                </table>
            </div>
            <div class="form-content-right" style="width:60%">
                <table class="asf-table-view">
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.TeamLeaderConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnTeamLeaderNotConfirm")
                                .Events(e => e.Click("DRF2001.btnTeamLeaderNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnTeamLeaderConfirm")
                                .Events(e => e.Click("DRF2001.btnTeamLeaderConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnTeamLeaderCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnTeamLeaderCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblTeamLeaderConfirm"></label>
                        </td>
                    </tr>
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ManagerConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnManagerNotConfirm")
                                .Events(e => e.Click("DRF2001.btnManagerNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnManagerConfirm")
                                .Events(e => e.Click("DRF2001.btnManagerConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnManagerCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnManagerCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblManagerConfirm"></label>
                        </td>
                    </tr>
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.InfoRoomConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnInfoRoomNotConfirm")
                                .Events(e => e.Click("DRF2001.btnInfoRoomNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnInfoRoomConfirm")
                                .Events(e => e.Click("DRF2001.btnInfoRoomConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnInfoRoomCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnInfoRoomCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblInfoRoomConfirm"></label>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        }

    @helper Tab10()
    {
        <div class="asf-filter-main">
            @Html.Partial("~/Views/Shared/EditorTemplates/Toolbar.cshtml", Model.Toolbar3 ?? new ASOFTToolBarViewModel())
        </div>
        @Html.Hidden("LeaderCloseContract", ASOFTEnvironment.LeaderCloseContract)
        @Html.Hidden("ManagerCloseContract", ASOFTEnvironment.ManagerCloseContract)
        @Html.Hidden("InfoCloseContract", ASOFTEnvironment.InfoCloseContract)

        <div class="asf-form-container">
            <div class="form-content-left" style="width:38%">
                <table class="asf-table-view">
                    <tr>
                        <td class="content-label">@Html.ASOFTLabel(model => model.IsCloseName)</td>
                        <td class="dot"></td>
                        <td class="content-text">@Html.DisplayFor(model => model.IsCloseName)&nbsp;@Html.ASOFTLabel(model => model.IsBankClose, htmlStyle: new { display = Model.IsBankClose == 1 ? "" : "none" })</td>
                    </tr>
                    <tr>
                        <td class="content-label">@Html.ASOFTLabel(model => model.CloseDate)</td>
                        <td class="dot"></td>
                        <td class="content-text">@Html.DisplayFor(model => model.CloseDate)</td>
                    </tr>
                </table>
            </div>
            <div class="form-content-right" style="width:60%">
                <table class="asf-table-view">
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.TeamLeaderConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnCloseTeamLeaderNotConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseTeamLeaderNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnCloseTeamLeaderConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseTeamLeaderConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnCloseTeamLeaderCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseTeamLeaderCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblCloseTeamLeaderConfirm"></label>
                        </td>
                    </tr>
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ManagerConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnCloseManagerNotConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseManagerNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnCloseManagerConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseManagerConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnCloseManagerCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseManagerCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblCloseManagerConfirm"></label>
                        </td>
                    </tr>
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.InfoRoomConfirm)</td>
                        <td class="asf-td-field" colspan="2">
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnNotConfirm"))
                                .Name("BtnCloseInfoRoomNotConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseInfoRoomNotConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnConfirm"))
                                .Name("BtnCloseInfoRoomConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseInfoRoomConfirm_Click"))
                                .Enable(false))
                            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnCancelConfirm"))
                                .Name("BtnCloseInfoRoomCancelConfirm")
                                .Events(e => e.Click("DRF2001.btnCloseInfoRoomCancelConfirm_Click"))
                                .Enable(false))
                        </td>
                        <td>
                            <label id="LblCloseInfoRoomConfirm"></label>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
}

        @helper Tab01()
{
        <div class="asf-form-container">
            <div class="form-content">
                <div class="form-content-left">
                    <table class="asf-table-view">
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.TeamID, htmlStyle: new { width = "150px", @float = "left" })</td>
                            <td class="asf-td-field" colspan="2">
                                @(Html.ASOFTBussinessComboBox().ASOFTDRMTeamID(model => model.TeamID, option: new ComboOption() { EventRequestEnd = "DRF2001.comboBox_RequestEnd" })
                                    .Events(e => e.Change("DRF2001.combo_Changed"))
                                    .Enable(ASOFTEnvironment.EditContractInfo))
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.CustomerID)</td>
                            <td class="asf-td-field" colspan="2">
                                @(Html.ASOFTBussinessComboBox()
                            .ASOFTDRMCustomerID(model => model.CustomerID, option: new ComboOption() { EventRequestEnd = "DRF2001.comboBox_RequestEnd" })
                                    .DataTextField(DRT1010.COL_CUSTOMERID)
                                    .Events(e => e.Change("DRF2001.combo_Changed").DataBound("DRF2001.customerID_DataBound"))
                                    .Enable(ASOFTEnvironment.EditContractInfo))
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.CustomerName)</td>
                            <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.CustomerName).ReadOnlyIf(true)</td>
                        </tr>
                        <tr>
                            <td valign="bottom">@Html.ASOFTLabel(model => model.IsBank)</td>
                            <td valign="bottom">
                                @(Html.ASOFTRadioButton(model => model.IsBank, 1,
                                    htmlAttributes: new { id = "rdbBank", @class = "asf-td-align" }).CheckBoxReadOnly(!ASOFTEnvironment.EditContractInfo))
                                @Html.ASOFTLabel(model => model.Bank)
                            </td>
                            <td valign="bottom">
                                @(Html.ASOFTRadioButton(model => model.IsBank, 0,
                                    htmlAttributes: new { id = "rdbEnt", @class = "asf-td-align" }).CheckBoxReadOnly(!ASOFTEnvironment.EditContractInfo))
                                @Html.ASOFTLabel(model => model.Enterprise)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractNo)</td>
                            <td class="asf-td-field" colspan="2">
                                @(Html.ASOFTTextBox(model => model.ContractNo, checkRegularExp: true)
                                    .ReadOnlyIf(!(Model.FormStatus == ASOFTFormActionType.AddNew && ASOFTEnvironment.EditContractInfo)))
                                @(Html.ASOFTHidden(DRT2000.COL_LASTMODIFYDATE,
                                Model.LastModifyDate != null ? Model.LastModifyDate.Value.ToString("dd/MM/yyyy HH:mm:ss.fff") : ""))
                                @Html.ASOFTHidden(model => model.TranMonth)
                                @Html.ASOFTHidden(model => model.TranYear)
                                @Html.ASOFTHidden(model => model.APK)
                                @Html.ASOFTHidden(model => model.IsClose)
                                @Html.ASOFTHidden(model => model.IsSendVPL)
                                @Html.ASOFTHidden(model => model.IsSendXR)
                                @Html.ASOFTHidden(model => model.XRSuggestDate)
                                @Html.ASOFTHidden(model => model.XRSuggestPersonID)
                                @Html.ASOFTHidden(model => model.XRSuggestNote)
                                @Html.ASOFTHidden(model => model.VPLSuggestDate)
                                @Html.ASOFTHidden(model => model.VPLSuggestPersonID)
                                @Html.ASOFTHidden(model => model.VPLSuggestNote)
                                @Html.ASOFTHidden(model => model.CloseSuggestDate)
                                @Html.ASOFTHidden(model => model.CloseSuggestPersonID)
                                @Html.ASOFTHidden(model => model.CloseSuggestNote)
                                @Html.ASOFTHidden(model => model.TeamID)
                                @Html.ASOFTHidden(model => model.TableID)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.DebtorID)</td>
                            <td class="asf-td-field" colspan="2">
                                @(Html.ASOFTTextBox(model => model.DebtorID, checkRegularExp: true).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo))
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.DebtorName)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.DebtorName).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractQuantity)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.ContractQuantity).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.FeePlace)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.FeePlace).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.DebtAmount)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.DebtAmount).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.DebtPeriod)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.DebtPeriod).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.DebtDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.DebtDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.PaidPerMonth)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.PaidPerMonth).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractBeginDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.ContractBeginDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractEndDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.ContractEndDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.UnPaidAmount)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.UnPaidAmount).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.UnPaidElse)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.UnPaidElse).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.PunishFee)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.PunishFee).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.OverDueProfit)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.OverDueProfit).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="form-content-right">
                    <table class="asf-table-view">
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.FirstUnPaidAmount, htmlStyle: new { width = "150px", @float = "left" })</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.FirstUnPaidAmount).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.RecoveryPercent, htmlStyle: new { width = "150px", @float = "left" })</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.RecoveryPercent).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.LoanBeginDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.LoanBeginDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.LoanEndDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.LoanEndDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.NearPaidDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.NearPaidDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.NearPaidAmount)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.NearPaidAmount).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.PaidPeriodTotal)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.PaidPeriodTotal).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.PaidAmount)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.PaidAmount).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        @*<tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.UnPaidPeriodTotal)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTSpinEdit(model => model.UnPaidPeriodTotal)</td>
                            </tr>*@
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.UnPaidPeriodTotal)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.UnPaidPeriodTotal).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.FirstPaidPeriod)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.FirstPaidPeriod).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.NextPaidPeriod)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.NextPaidPeriod).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.AccountingDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.AccountingDate).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.OverDueDays)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTSpinEdit(model => model.OverDueDays).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.OverDueDate)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTDateEdit(model => model.OverDueDate).Enable(ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BankAccount)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.BankAccount).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Note)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.Note).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.OtherNote)</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTTextBox(model => model.OtherNote).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                            </td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">&nbsp;</td>
                            <td class="asf-td-field" colspan="2">
                                @Html.ASOFTCheckbox(model => model.IsNTDMethod)
                            </td>
                        </tr>
                        @* <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.WorkHistory)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextArea(model => model.WorkHistory).ReadOnlyIf(!ASOFTEnvironment.EditContractInfo)
                                </td>
                            </tr>*@
                    </table>
                </div>
            </div>
        </div>
}

        @helper Tab02()
        {
        <div class="asf-form-container">
            <div class="full-fieldset">
                <div class="left-fieldset">
                    <fieldset class="drm-fieldset">
                        <legend><b>@Html.ASOFTLabel(model => model.DebtorInfomation)</b></legend>
                        <table class="asf-table-view">
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.IdentifyCardNo, htmlStyle: new { width = "150px", @float = "left" })</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.IdentifyCardNo).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.IdentifyCardDate)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.IdentifyCardDate).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Birthday)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.Birthday).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.RegistrationBook)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.RegistrationBook).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.HouseholdName)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.HouseholdName).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.WorkPlace)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.WorkPlace).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.WorkNote)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.WorkNote).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Duty)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.Duty).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.AddQuantity)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTSpinEdit(model => model.AddQuantity).Enable(ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                        </table>
                    </fieldset>
                </div>
                <div class="right-fieldset">
                    <fieldset>
                        <legend><b>@Html.ASOFTLabel(model => model.AssetInfomation)</b></legend>
                        <table class="asf-table-view">
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.AssetInfo, htmlStyle: new { width = "150px", @float = "left" })</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.AssetInfo).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Asset)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.Asset).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BikeType)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.BikeType).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BikeName)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.BikeName).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BikeColor)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.BikeColor).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BikeEngineNo)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.BikeEngineNo).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.NumberPlate)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.NumberPlate).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.CavetStatus)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.CavetStatus).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BikePrice)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.BikePrice).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.PrePaid)</td>
                                <td class="asf-td-field" colspan="2">
                                    @Html.ASOFTTextBox(model => model.PrePaid).ReadOnlyIf(!ASOFTEnvironment.EditTabOtherInfo)
                                </td>
                            </tr>
                        </table>
                    </fieldset>
                </div>
            </div>
        </div>
}

        @helper Tab03()
        {
        <div class="@string.Format("{0}", ASOFTEnvironment.EditTabDebtorAddress ? "form-content" : "form-content full-fieldset-readonly")">
            @Html.Partial("GridAddress", new DRF2000GridViewModel())
        </div>
}

        @helper Tab04()
        {
        <div class="asf-form-container">
            <div class="@string.Format("{0}", ASOFTEnvironment.EditTabContactInfo ? "full-fieldset" : "full-fieldset full-fieldset-readonly")">
                <div class="left-fieldset">
                    <fieldset>
                        <legend><b>@Html.ASOFTLabel(model => model.ReceiverInfo)</b></legend>
                        <table class="asf-table-view">
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver01, htmlStyle: new { width = "150px", @float = "left" })</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver01).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver03)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver03).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver04)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver04).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver05)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver05).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver06)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver06).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver07)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver07).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver08)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver08).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver09)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver09).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Receiver10)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Receiver10).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                        </table>
                    </fieldset>
                    <fieldset>
                        <legend><b>@Html.ASOFTLabel(model => model.FaxEmailInfo)</b></legend>
                        <table class="asf-table-view">
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Fax01, htmlStyle: new { width = "150px", @float = "left" })</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Fax01).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.Fax02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.Fax02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ComEmail)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.ComEmail).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.HomeEmail)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.HomeEmail).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                        </table>
                    </fieldset>
                </div>
                <div class="right-fieldset">
                    <fieldset>
                        <legend><b>@Html.ASOFTLabel(model => model.PhoneInfo)</b></legend>
                        <table class="asf-table-view">
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.MobiPhone01, htmlStyle: new { width = "150px", @float = "left" })</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.MobiPhone01).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.MobiPhone02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.MobiPhone02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ComPhone01)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.ComPhone01).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ComPhone02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.ComPhone02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.HomePhone01)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.HomePhone01).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.HomePhone02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.HomePhone02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New01)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New01)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New02)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New02).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New03)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New03).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New04)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New04).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New05)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New05).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New06)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New06).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New07)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New07).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New08)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New08).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                            <tr>
                                <td class="asf-td-caption">@Html.ASOFTLabel(model => model.New09)</td>
                                <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.New09).ReadOnlyIf(!ASOFTEnvironment.EditAllContactInfo)</td>
                            </tr>
                        </table>
                    </fieldset>
                </div>
            </div>

        </div>
}

        @helper Tab05()
        {
        <div class="asf-form-container">
            <div class="@string.Format("{0}", ASOFTEnvironment.EditTabAddInfo ? "form-content" : "form-content full-fieldset-readonly")">
                <div class="form-content-left">
                    <table class="asf-table-view">
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractReceiveDate, htmlStyle: new { width = "150px", @float = "left" })</td>
                            <td class="asf-td-field" colspan="2">@Html.ASOFTDateEdit(model => model.ContractReceiveDate)</td>
                        </tr>
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractStatus)</td>
                            <td class="asf-td-field" colspan="2">@Html.ASOFTTextBox(model => model.ContractStatus)</td>
                        </tr>
                    </table>
                </div>
                <div class="form-content-right">
                    <table class="asf-table-view">
                        <tr>
                            <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ContractGroupID, htmlStyle: new { width = "150px", @float = "left" })</td>
                            <td class="asf-td-field" colspan="2">
                                @(Html.ASOFTBussinessComboBox().ASOFTDRMInfoTypeID(model => model.ContractGroupID, "Reason",
                                ASOFTLanguage.FindWordA00("A00.ContractGroupID"), ASOFTLanguage.FindWordA00("A00.ContractGroupName"),
                                option: new ComboOption() { EventRequestEnd = "DRF2001.comboBox_RequestEnd" })
                                    .Events(e => e.Change("DRF2001.combo_Changed")))
                            </td>
                        </tr>
                    </table>
                </div>
                <table class="asf-table-view">
                    <tr>
                        <td class="asf-td-caption">@Html.ASOFTLabel(model => model.ManagerNote)</td>
                    </tr>
                    <tr>
                        <td class="asf-td-field" colspan="2">@Html.ASOFTTextArea(model => model.ManagerNote)</td>
                    </tr>
                </table>
            </div>
        </div>
}

        @helper Tab06()
        {
        <div class="@string.Format("{0}", ASOFTEnvironment.EditTabRate ? "form-content" : "form-content full-fieldset-readonly")">
            <div class="asf-filter-main">
                <div class="block-left" style="width: 45%">
                    <div class="asf-filter-label" style="width: 28%">
                        @Html.ASOFTLabel(model => model.Manager)
                    </div>
                    <div class="asf-filter-input" style="width: 55%">
                        @(Html.ASOFTBussinessComboBox().ASOFTDRMManager(model => model.Manager,
                        ASOFTLanguage.FindWordA00("A00.EmployeeID"), ASOFTLanguage.FindWordA00("A00.EmployeeName"), string.Empty,
                        option: new ComboOption()
                        {
                            EventRequestEnd = "DRF2001.comboBox_RequestEnd",
                            EventPostData = "DRF2001.comboBoxManager_Post"
                        })
                    .Events(e => e.Change("DRF2001.combo_Changed")))
                    </div>
                </div>
                <div class="block-right" style="width: 50%">
                    <div class="asf-filter-label" style="width: 28%">
                        @Html.ASOFTLabel(model => model.ManagerPercent)
                    </div>
                    <div class="asf-filter-input" style="width: 55%">
                        @(Html.ASOFTSpinEdit(model => model.ManagerPercent))
                    </div>
                </div>
            </div>
            <div class="asf-filter-main">
                @Html.Partial("GridEmployee")
            </div>
        </div>
}

        @helper Tab07()
        {

        <div class="asf-form-container">
            <div class="form-content">
                <table class="asf-table-view">
                    <tr>
                        <td>@Html.ASOFTLabel(model => model.WorkHistory)</td>
                    </tr>
                    <tr>
                        <td>
                            @(Html.ASOFTTextArea(model => model.WorkHistory,
                        htmlStyle: new { height = System.Web.UI.WebControls.Unit.Pixel(500) })
                            .ReadOnlyIf(!ASOFTEnvironment.EditTabWorkHistory))
                        </td>
                    </tr>
                </table>
            </div>
        </div>
}

        @section styleFeature{
            <link href="@Url.Content("~/Areas/DRM/Content/Common.css")" rel="stylesheet" type="text/css" />
        }

        @section jsFeature {
            <script src="@Url.Content("~/Areas/DRM/Scripts/DRF2000/DRF2001.js?v=" + ASOFTEnvironment.Version)"></script>
            <script src="@Url.Content("~/Areas/DRM/Scripts/DRF2000/DRF2000.js?v=" + ASOFTEnvironment.Version)"></script>
            <script src="@Url.Content("~/Areas/DRM/Scripts/DRF2013/DRF2013.js?v=" + ASOFTEnvironment.Version)"></script>
            <script src="@Url.Content("~/Areas/DRM/Scripts/DRF2020/DRF2021.js?v=" + ASOFTEnvironment.Version)"></script>
            @* @Html.RenderScripts(files: new[] { "CRMF2061" })*@
        }
        @{
            if (!isInsert)
            {
                @Html.ASOFTHidden("AD01", ASOFTEnvironment.Cell1)
                @Html.ASOFTHidden("AD02", ASOFTEnvironment.Cell2)
                @Html.ASOFTHidden("AD03", ASOFTEnvironment.Cell3)
                @Html.ASOFTHidden("AD04", ASOFTEnvironment.Cell4)
                @Html.ASOFTHidden("AD05", ASOFTEnvironment.Cell5)
                @Html.ASOFTHidden("AD06", ASOFTEnvironment.Cell6)
                @Html.ASOFTHidden("AD07", ASOFTEnvironment.Cell7)
                @Html.ASOFTHidden("AD08", ASOFTEnvironment.Cell8)
                @Html.ASOFTHidden("AD09", ASOFTEnvironment.Cell9)
                @Html.ASOFTHidden("AD10", ASOFTEnvironment.Cell10)
            }
        }
        @Html.ASOFTHidden("UrlDRF2021", Url.Action("DRF2021", "DRF2020", new { area = "DRM" }))
        @Html.ASOFTHidden("UrlInsertDRF2020", Url.Action("Insert", "DRF2020", new { area = "DRM" }))
        @Html.ASOFTHidden("UrlDeleteDRF2020", Url.Action("Delete", "DRF2020", new { area = "DRM" }))
        @Html.ASOFTHidden("UrlDRF2013", Url.Action("Index", "DRF2013", new { area = "DRM" }))
        @Html.ASOFTHidden("UrlConfirm", Url.Action("Confirm", new { controller = "DRF2050", area = "DRM" }))
        @Html.ASOFTHidden("UrlConfirmDRF2060", Url.Action("Confirm", new { controller = "DRF2060", area = "DRM" }))

        @Html.ASOFTHidden(model => model.IsSendVPL)
        @Html.ASOFTHidden(model => model.IsSendXR)
        @Html.ASOFTHidden(model => model.IsClose)
        @Html.ASOFTHidden(model => model.IsBankClose)
        @Html.ASOFTHidden(model => model.IsSendVPL1)
        @Html.ASOFTHidden(model => model.IsSendXR1)
        @Html.ASOFTHidden(model => model.IsClose1)
        @Html.ASOFTHidden(model => model.IsClosed)
        @Html.ASOFTHidden(model => model.TeamID)
        @Html.ASOFTHidden(model => model.TableID)
        @Html.ASOFTHidden("initData", initData)

@Html.ASOFTHidden(model=>model.IsDRT2000, false)
@Html.ASOFTHidden(model=>model.IsDRT2004, false)
@Html.ASOFTHidden(model=>model.IsDRT2011, false)
@Html.ASOFTHidden(model=>model.IsDRT2012, false)
@Html.ASOFTHidden(model=>model.IsDRP2083, false)

        @Html.ASOFTHidden("UrlDRF2022", Url.Content("~/DRM/DRF2020/DRF2022/"))
        @Html.ASOFTHidden("UrlDRF2061", Url.Action("DRF2061", "DRF2060"))
        @Html.ASOFTHidden("UrlDRF2051", Url.Action("DRF2051", "DRF2050"))
        @Html.ASOFTHidden("UrlDRF2001EveryDay", Url.Action("DRF2001EveryDay", "DRF2000"))

        @*@Html.ASOFTHidden("AD01",ASOFTEnvironment.PermissionDebtorAddress1)
            @Html.ASOFTHidden("AD02",ASOFTEnvironment.PermissionDebtorAddress2)
            @Html.ASOFTHidden("AD03",ASOFTEnvironment.PermissionDebtorAddress3)
            @Html.ASOFTHidden("AD04",ASOFTEnvironment.PermissionDebtorAddress4)
            @Html.ASOFTHidden("AD05",ASOFTEnvironment.PermissionDebtorAddress5)
            @Html.ASOFTHidden("AD06",ASOFTEnvironment.PermissionDebtorAddress6)
            @Html.ASOFTHidden("AD07",ASOFTEnvironment.PermissionDebtorAddress7)
            @Html.ASOFTHidden("AD08",ASOFTEnvironment.PermissionDebtorAddress8)
            @Html.ASOFTHidden("AD09",ASOFTEnvironment.PermissionDebtorAddress9)
            @Html.ASOFTHidden("AD010",ASOFTEnvironment.PermissionDebtorAddress10)*@
