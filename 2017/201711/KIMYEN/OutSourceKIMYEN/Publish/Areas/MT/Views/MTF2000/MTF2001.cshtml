@model ASOFT.ERP.ViewModel.MT.MTF2000ViewModel

@helper BasePanel()
{
    <div class="form-content">
        <div class="form-content-left">
            <table class="asf-table-view mtf2001-form">
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.S)</td>
                    <td class="asf-td-field" colspan="2" >
                        @(Html.ASOFTBussinessComboBox()
                              .ASOFTSClassify(model => model.S, option: new ComboOption(){ EventPostData = "MTF2000.s_PostData"})
                              .Events(e => e.Change("MTF2000.s_Changed"))
                              .Enable(Model.FormStatus == ASOFTFormActionType.AddNew && ASOFTEnvironment.IsStudentInfo)
                              )
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.StudentID)</td>
                    <td class="asf-td-field" colspan="2" >
                        @(Html.ASOFTTextBox(model => model.StudentID, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!(Model.FormStatus == ASOFTFormActionType.AddNew) && !ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.StudentName)</td>
                    <td colspan="2"> 
                        @(Html.ASOFTTextBox(model => model.StudentName)
                               .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.StudentNameE)</td>
                    <td colspan="2" >
                        @(Html.ASOFTTextBox(model => model.StudentNameE)
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.IsMale)</td>
                    <td  valign="bottom">
                        @Html.ASOFTRadioButton(model => model.IsMale, 1, new {id = "Male"}).CheckBoxReadOnly(!ASOFTEnvironment.IsStudentInfo)
                        @Html.ASOFTLabel(model => model.Male) 
                    </td>
                    <td  valign="bottom">
                        @Html.ASOFTRadioButton(model => model.IsMale, 0, new {id = "FeMale"}).CheckBoxReadOnly(!ASOFTEnvironment.IsStudentInfo)
                        @Html.ASOFTLabel(model => model.FeMale) 
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Birthday)</td>
                    <td colspan="2" >
                        @(Html.ASOFTDateEdit(model => model.Birthday)
                            .Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td class="asf-td-caption">@Html.ASOFTLabel(model => model.BranchID)</td>
                    <td class="asf-td-field" colspan="2">
                         @(Html.ASOFTBussinessComboBox()
                            .ASOFTBranchID(model => model.BranchID).Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">
                        @Html.ASOFTLabel(model => model.StartDate)
                    </td>
                    <td colspan="2" class="asf-td-field">
                        @(Html.ASOFTDateEdit(model => model.StartDate)
                            .Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
            </table>
        </div>
        <div class="form-content-right">
            <table class="asf-table-view mtf2001-form">
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Email)</td>
                    <td colspan="2" >
                        @(Html.ASOFTTextBox(model => model.Email, htmlStyle: new {height = Unit.Pixel(26)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Tel1)</td>
                    <td colspan="2" >
                        @(Html.ASOFTTextBox(model => model.Tel1)
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Tel2)</td>
                    <td colspan="2" >
                        @(Html.ASOFTTextBox(model => model.Tel2)
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Source1)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTBussinessComboBox()
                              .ASOFTCodeMaster(model => model.Source1, "SourceID")
                              .Events(e => e.Change("MTF2000.sourceChange"))
                              .Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Source2)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTBussinessComboBox()
                              .ASOFTCodeMaster(model => model.Source2, "SourceID")
                              .Events(e => e.Change("MTF2000.sourceChange"))
                              .Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Source3)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTBussinessComboBox()
                              .ASOFTCodeMaster(model => model.Source3, "SourceID")
                              .Events(e => e.Change("MTF2000.sourceChange"))
                              .Enable(ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                 
                <tr>
                    <td>
                        @Html.ASOFTLabel(model => model.SpecNotes)
                    </td>
                    <td colspan="2">
                        @(Html.ASOFTTextArea(model => model.SpecNotes, htmlStyle: new {Width = Unit.Percentage(98)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                 
            </table>
        </div>
        
        <table class="asf-table-view mtf2001-form">
            <tr>
                <td class="notes">
                    @Html.ASOFTLabel(model => model.Notes)
                </td>
                <td colspan="2">
                    @(Html.ASOFTTextArea(model => model.Notes, htmlStyle: new {Width = Unit.Percentage(99)})
                        .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                </td>
            </tr>
        </table>
    </div>
}

@helper AddInfoPanel()
{
    <div class="form-content-left">
        <fieldset>
            <legend><b>Trường</b></legend>
            <table class="asf-table-view">
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.School)
                    </td>
                    <td colspan="3">
                        @(Html.ASOFTTextBox(model => model.School, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.Grade)
                    </td>
                    <td colspan="3">
                        @(Html.ASOFTTextBox(model => model.Grade, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td >
                        @Html.ASOFTLabel(model => model.TATC)
                    </td>
                    <td valign="bottom">
                        @Html.ASOFTRadioButton(model => model.IsTATC, 1).CheckBoxReadOnly(!ASOFTEnvironment.IsStudentInfo)
                        @Html.ASOFTLabel(model => model.IsTATC)                  
                    </td>
                    <td valign="bottom">
                        @Html.ASOFTRadioButton(model => model.IsTATC, 0).CheckBoxReadOnly(!ASOFTEnvironment.IsStudentInfo)
                        @Html.ASOFTLabel(model => model.IsTASimple)
                    </td>
                    <td valign="bottom">
                        @Html.ASOFTRadioButton(model => model.IsTATC, 2).CheckBoxReadOnly(!ASOFTEnvironment.IsStudentInfo)
                        @Html.ASOFTLabel(model => model.IsTAOthers)
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.Ward)
                    </td>
                    <td colspan="3">
                        @(Html.ASOFTTextBox(model => model.Ward, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.District)
                    </td>
                    <td colspan="3">
                        @(Html.ASOFTTextBox(model => model.District, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
            </table>
        </fieldset>
    </div>

    <div class="form-content-right">
        <fieldset class="fieldsetExams">
            <legend><b>Nhà</b></legend>
            <table class="asf-table-view">
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Address)</td>
                    <td colspan="2" >
                        @(Html.ASOFTTextBox(model => model.Address)
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.AddWard)
                    </td>
                    <td colspan="2">
                        @(Html.ASOFTTextBox(model => model.AddWard, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.AddDistrict)
                    </td>
                    <td colspan="2">
                        @(Html.ASOFTTextBox(model => model.AddDistrict, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.FatherJob)
                    </td>
                    <td colspan="2">
                        @(Html.ASOFTTextBox(model => model.FatherJob, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">
                        @Html.ASOFTLabel(model => model.MotherJob)
                    </td>
                    <td colspan="2">
                        @(Html.ASOFTTextBox(model => model.MotherJob, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                    </td>
                </tr>  
            </table>
        </fieldset>
    </div>

    <fieldset>
        <legend><b>Người liên hệ</b></legend>
        <div class="form-content">
            <div class="form-content-left">
                <table class="asf-table-view">
                    <tr>
                        <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.ContactPerson1)</td>
                        <td class="asf-td-field">
                            @(Html.ASOFTTextBox(model => model.ContactPerson1, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.ContactTel1)</td>
                        <td>
                            @(Html.ASOFTTextBox(model => model.ContactTel1, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.ContactEmail1)</td>
                        <td>
                            @(Html.ASOFTTextBox(model => model.ContactEmail1, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                </table>
            </div>
            <div class="form-content-right">
                <table class="asf-table-view">
                    <tr>
                        <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.ContactPerson2)</td>
                        <td class="asf-td-field">
                            @(Html.ASOFTTextBox(model => model.ContactPerson2, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.ContactTel2)</td>
                        <td>
                            @(Html.ASOFTTextBox(model => model.ContactTel2, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.ContactEmail2)</td>
                        <td>
                            @(Html.ASOFTTextBox(model => model.ContactEmail2, htmlStyle: new {width = Unit.Percentage(100)})
                                .ReadOnlyIf(!ASOFTEnvironment.IsStudentInfo))
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </fieldset>
}

@helper ExtenInfoPanel()
{
    <div class="form-content">
        <div class="form-content-left">
            <table class="asf-table-view">
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Interviewer)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTTextBox(model => model.Interviewer, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.ClassDate)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTDateEdit(model => model.ClassDate, htmlStyle: new {width = Unit.Percentage(100)})
                            .Enable(ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.Reception)</td>
                    <td>
                        @(Html.ASOFTTextBox(model => model.Reception, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr>
                <tr>
                    <td valign="bottom">@Html.ASOFTLabel(model => model.PlacementLevel)</td>
                    <td>
                        @(Html.ASOFTTextBox(model => model.PlacementLevel, htmlStyle: new {width = Unit.Percentage(100)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr>
                
                @*<tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Strength)</td>
                    <td valign="center" class="asf-td-field">
                        @Html.ASOFTTextArea(model => model.Strength, htmlStyle: new { width = Unit.Percentage(98) })
                    </td>
                </tr>*@
            </table>
        </div>

        <div class="form-content-right">
            <table class="asf-table-view mtf2001-form">
                <tr>
                    <td valign="top" class="asf-td-caption">@Html.ASOFTLabel(model => model.TeacherCommentEK)</td>
                    <td>
                        @(Html.ASOFTTextArea(model => model.TeacherCommentEK, htmlStyle: new {width = Unit.Percentage(98)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr> 
                <tr>
                    <td>@Html.ASOFTLabel(model => model.OtherNotes)</td>
                    <td>
                        @(Html.ASOFTTextArea(model => model.OtherNotes, htmlStyle: new {width = Unit.Percentage(98)})
                            .ReadOnlyIf(!ASOFTEnvironment.IsStudentResult))
                    </td>
                </tr>  
                @*<tr>
                    <td >@Html.ASOFTLabel(model => model.Improvement)</td>
                    <td>@Html.ASOFTTextArea(model => model.Improvement, htmlStyle: new { width = Unit.Percentage(98) })</td>
                </tr>*@
            </table>
        </div>

        <div class="form-content-left">
            <fieldset>
                <legend>
                    @* @Html.ASOFTRadioButton(model => model.IsSkill, 1, new { id = "isSkill" })*@
                    @Html.ASOFTLabel(model => model.IsSkill)
                </legend>
                <table class="asf-table-view">
                    <tr>
                        <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Listening)</td>
                        <td class="asf-td-field">
                            @(Html.ASOFTSpinEdit(model => model.Listening)
                                  .Events(e => e.Change("MTF2000.countTotalSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Speaking)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Speaking)
                                  .Events(e => e.Change("MTF2000.countTotalSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Reading)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Reading)
                                  .Events(e => e.Change("MTF2000.countTotalSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Writing)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Writing)
                                  .Events(e => e.Change("MTF2000.countTotalSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Total)</td>
                    <td class="asf-td-field">
                        @(Html.ASOFTSpinEdit(model => model.Total)
                            .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                            .Decimals(2)
                            .Enable(ASOFTEnvironment.IsStudentResult))
                    </td>
                </table>
            </fieldset>
        </div>

        <div class="form-content-right">
            <fieldset class="fieldsetExams">
                <legend>
                    @* @Html.ASOFTRadioButton(model => model.IsSkill, 0, new { id = "isNotSkill" })*@
                    @Html.ASOFTLabel(model => model.IsNotSkill)
                </legend>
                <table class="asf-table-view">
                    <tr>
                        <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.Part1)</td>
                        <td class="asf-td-field">
                            @(Html.ASOFTSpinEdit(model => model.Part1)
                                  .Events(e => e.Change("MTF2000.countTotalNotSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Part2)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Part2)
                                  .Events(e => e.Change("MTF2000.countTotalNotSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Part3)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Part3)
                                  .Events(e => e.Change("MTF2000.countTotalNotSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                        <td valign="bottom">@Html.ASOFTLabel(model => model.Part4)</td>
                        <td>
                            @(Html.ASOFTSpinEdit(model => model.Part4)
                                  .Events(e => e.Change("MTF2000.countTotalNotSkill"))
                                  .Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                                  .Decimals(2)
                                  .Enable(ASOFTEnvironment.IsStudentResult))
                        </td>
                    </tr>
                    <tr>
                    <td valign="bottom" class="asf-td-caption">@Html.ASOFTLabel(model => model.PartTotal)</td>
                    <td class="asf-td-field">
                        @Html.ASOFTSpinEdit(model => model.PartTotal).Decimals(2).Enable(ASOFTEnvironment.IsStudentResult).Format(ASOFTUtilities.FormatNumberDecimalDisplay(2))
                        @Html.ASOFTHidden("LastModifyDate", Model.LastModifyDate.HasValue ? Model.LastModifyDate.Value.ToString("dd/MM/yyyy HH:mm:ss.fff") : "")
                    </td>
                </table>
            </fieldset>
        </div>
    </div>
}

<div class="asf-form-container">
    @using (Html.BeginForm(null, null, FormMethod.Post, new {id = "MTF2001"}))
    {
        @(Html.ASOFTTab()
              .Name("MTF2001Tab")
              .Items(tabstrip =>
                         {
                             tabstrip.Add().Text(Html.ASOFTRaw(m => m.TabInfoStudent).ToString().ToUpper())
                                 .Selected(true)
                                 .HtmlAttributes(new {@id = "TabstripMaster-1"})
                                 .ContentHtmlAttributes(new {@class = "asf-tab-content"})
                                 .Content(BasePanel().ToHtmlString());

                             tabstrip.Add().Text(Html.ASOFTRaw(m => m.TabInfoExtension).ToString().ToUpper())
                                 .HtmlAttributes(new {@id = "TabstripMaster-2"})
                                 //.ContentHtmlAttributes(new { style = "height:792px;" })
                                 .ContentHtmlAttributes(new {@class = "asf-tab-content"})
                                 .Content(AddInfoPanel().ToHtmlString());

                             tabstrip.Add().Text(Html.ASOFTRaw(m => m.TabInfoExams).ToString().ToUpper())
                                 .HtmlAttributes(new {@id = "TabstripMaster-3"})
                                 //.ContentHtmlAttributes(new { style = "height:792px;" })
                                 .ContentHtmlAttributes(new {@class = "asf-tab-content"})
                                 .Content(ExtenInfoPanel().ToHtmlString());
                         })
              )

        <div class="asf-form-button">
            <table class="asf-table-view">
                <tr>
                    <td align="right">
                        <div class="asf-popup-button-container">
                            <div>
                                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                                      .Name("BtnClose")
                                      .Events(e => e.Click("MTF2000.btnCloseClick")))
                            </div>
                            <div>
                                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveCopy"))
                                      .Name("BtnSaveDetail")
                                      .Events(e => e.Click("MTF2000.mtf2001BtnSaveMDClick"))
                                      .Enable(ASOFTEnvironment.IsStudentInfo)
                                      .HideIf(Model.FormStatus != ASOFTFormActionType.AddNew))
                            </div>  
                            <div>
                                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveNew"))
                                      .Name("BtnSaveClose")
                                      .Events(e => e.Click("MTF2000.mtf2001BtnSaveClick"))
                                      .Enable(ASOFTEnvironment.IsStudentInfo)
                                      .HideIf(Model.FormStatus != ASOFTFormActionType.AddNew))                     
                            </div>
                            <div>
                                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSave"))
                                      .Name("BtnSave")
                                      .Events(e => e.Click("MTF2000.mtf2001BtnSavecloseClick"))
                                      .HideIf(Model.FormStatus == ASOFTFormActionType.AddNew))
                            </div>
                        </div>
                    </td>
                </tr>
            </table>
        </div>
    }
</div>