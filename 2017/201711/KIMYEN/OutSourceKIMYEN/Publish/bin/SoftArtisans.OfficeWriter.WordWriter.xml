<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftArtisans.OfficeWriter.WordWriter</name>
    </assembly>
    <members>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning">
            <Doc>
      <summary>
        <para>This class is used to specify the position of tables and paragraphs in a Word document. Although the term "absolute" is used, the position is relative to some location in the document or page. Absolute positioning is set in twips. 1 twip = 1/20 pt = 1/1440 in.</para>
      </summary>
      <remarks>
        <para>You cannot create an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning"/> object using the <c>new</c> keyword. You must get it from a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> or <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> object using the <c>AbsolutePositioning</c> property.</para>
        <para>The following sample gets the <c>AbsolutePositioning</c> object of the first table of a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Table firstTable = (Table) doc.GetElements(Element.Type.Table)[0];
          AbsolutePositioning ap = firstTable.AbsolutePositioning;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim firstTable As Table = doc.GetElements(Element.Type.Table)(0)
          Dim ap As AbsolutePositioning = firstTable.AbsolutePositioning
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.X">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the x coordinate in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get X
          int x = oAbsolutePositioning.X;

          //--- Set X to 1 inch
          oAbsolutePositioning.X = 1440;
        </code>
            <br/>
            <code>

          '--- Get X
          Dim x As Integer = oAbsolutePositioning.X

          '--- Set X to 1 inch
          oAbsolutePositioning.X = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Y">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the position's  y coordinate in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Y
          int y = oAbsolutePositioning.Y;

          //--- Set X to 1 inch
          oAbsolutePositioning.Y = 1440;
        </code>
            <br/>
            <code>

          '--- Get Y
          Dim y As Integer = oAbsolutePositioning.Y

          '--- Set Y to 1 inch
          oAbsolutePositioning.Y = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Width">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the absolute width in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>The width of Paragraph must be between 0.01" (15 twips) and 22" (31680 twips).  The width of a table must be between 0" (0 twips) and 22" (31680 twips). Values beyond these will be automatically adjusted.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Width
          int width = oAbsolutePositioning.Width;

          //--- Set Width to 3 inches
          oAbsolutePositioning.Width = 4320;
        </code>
            <br/>
            <code>

          '--- Get Width
          Dim width As Integer = oAbsolutePositioning.Width

          '--- Set Width to 3 inches
          oAbsolutePositioning.Width = 4320
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Height">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the height in twips.</para>
        </summary>
        <remarks>
          <para>The width of Paragraph must be between 0.01" (15 twips) and 22" (31680 twips).  The width of a table must be between 0" (0 twips) and 22" (31680 twips). Values beyond these will be automatically adjusted.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Height
          int height = oAbsolutePositioning.Height;

          //--- Set Height to 3 inches
          oAbsolutePositioning.Height = 4320;
        </code>
            <br/>
            <code>

          '--- Get Height
          Dim height As Integer = oAbsolutePositioning.Height

          '--- Set Height to 3 inches
          oAbsolutePositioning.Height = 4320
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HeightExact">
            <Doc>
        <summary>
          <para>Specifies whether <see cref="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Height"/> is an exact height (true) or a minimum height (false).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get HeightExact
          bool heightExact = oAbsolutePositioning.HeightExact;

          //--- Set HeightExact
          oAbsolutePositioning.Height = true;
        </code>
            <br/>
            <code>

          '--- Get HeightExact
          Dim heightExact As Boolean = oAbsolutePositioning.HeightExact

          '--- Set HeightExact
          oAbsolutePositioning.HeightExact = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.OriginX">
            <Doc>
        <summary>
          <para>Returns the horizontal origin of the position's <see cref="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.X"/>. Possible values are: Column, Margin, Page.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get HorizontalOrigin
          AbsolutePositioning.HorizontalOrigin oHorizontalOrigin = oAbsolutePositioning.OriginX;

          //--- Set HorizontalOrigin
          oAbsolutePositioning.OriginX = AbsolutePositioning.HorizontalOrigin.Margin;
        </code>
            <br/>
            <code>

          '--- Get HorizontalOrigin
          Dim oHorizontalOrigin As AbsolutePositioning.HorizontalOrigin = oAbsolutePositioning.OriginX

          '--- Set HorizontalOrigin
          oAbsolutePositioning.OriginX= AbsolutePositioning.HorizontalOrigin.Margin
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.OriginY">
            <Doc>
        <summary>
          <para>Sets or returns the vertical origin of the position's <see cref="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.Y"/>. Possible values are: Margin, Page, Text.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get VerticalOrigin
          AbsolutePositioning.OriginY oVerticalOrigin = oAbsolutePositioning.VerticalOrigin;

          //--- Set VerticalOrigin
          oAbsolutePositioning.OriginY = AbsolutePositioning.VerticalOrigin.Page;
        </code>
            <br/>
            <code>

          '--- Get VerticalOrigin
          Dim oVerticalOrigin As AbsolutePositioning.OriginY = oAbsolutePositioning.VerticalOrigin

          '--- Set VerticalOrigin
          oAbsolutePositioning.OriginY = AbsolutePositioning.VerticalOrigin.Page
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin"/> value specifies the vertical origin of a table or paragraph position's y coordinate.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TypesafeEnum">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TypesafeEnum&quot;]/Doc"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Column">
            <Doc>
          <summary>The position's x coordinate is relative to the left edge of the current column.  If the page does not contain multiple columns, <c>HorizontalOrigin.Column</c> and <c>HorizontalOrigin.Margin</c> are equivalent.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Margin">
            <Doc>
          <summary>The position's x coordinate is relative to the left margin of the page.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Page">
            <Doc>
          <summary>The position's x coordinate is relative to the left border of the page.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Text">
            <Doc>
          <summary>The position's x coordinate is relative to the position of the table or paragraph if it were not absolutely positioned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.HorizontalOrigin.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.HorizontalOrigin.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin"/> value specifies the vertical origin of a table or paragraph position's y coordinate.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.Margin">
            <Doc>
          <summary>The position's y coordinate is relative to the top margin of the page.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.Page">
            <Doc>
          <summary>The position's y coordinate is relative to the top border of the page.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.Text">
            <Doc>
          <summary>The position's y coordinate is relative to the position of the table or paragraph if it were not absolutely positioned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning.VerticalOrigin.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AbsolutePositioning&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin&quot;]/Member[@signature=&quot;AbsolutePositioning.VerticalOrigin.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioningModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.AdaptiveMemoryStream">
            <summary>
            A stream which uses a MemoryStream for small amounts of data, and switches to a NonContiguousMemoryStream
            for larger amounts of data. This avoids the 4mb floor on allocations that NonContiguousMemoryStream has
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper">
            <summary> A wrapper that takes a IDataReader that is really an AdoMdDataReader.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper">
            Summary description for DataSourceWrapper.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataSource">
            <summary> DataSource is an abstract class that allows binding and iterating data sources of all flavor.
            Has just basic a set of functions, making it easier for a customer to create his own data sources
            that our products would consume.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnPosition(System.String)">
            <summary> Returns a 0-based position of a column in the Dataset.
            Column is identified by a given column name
            
            </summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> 0-based column index, or -1 if the column does not exist.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnName(System.Int32)">
            <summary> For a given 0-based column index returns the column name as a string</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> column name, or null if column information is not available.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getColumnType(System.Int32)">
            <summary> Returns column type as an identifier (from java.sql.Types)</summary>
            <param name="aColumnNumber">0-based column index
            </param>
            <returns> column type (from java.sql.Types)
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.next">
            <summary> Advances to the next record in the data source</summary>
            <returns>  true if successful
            false if at the end of data source already
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.rewind">
            <summary> Rewinds the data source to the first row of data</summary>
            <throws>  RuntimeException, provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getCharacterStream(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getCharacterStream(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getString(System.String)">
            <summary> Methods for retreiving values **</summary>
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getString(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getSByte(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getSByte(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  byte, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getShort(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getShort(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  short, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getInt(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getInt(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  int or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getLong(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getLong(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  long, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getFloat(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getFloat(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> float, or 0 for NULL
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getDouble(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDouble(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  double, or 0 for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getDecimal(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDecimal(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  BigDecimal, or null for NULL
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getBoolean(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getBoolean(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.getSBytes(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getSBytes(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DataSource.GetBytes(System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.GetBytes(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDate(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getDate(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getTime(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSource.getTime(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.ColumnCount">
            <summary> Returns column count in the data source</summary>
            <returns>  total number of columns in the datasource, or -1
            if this information is not available
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.Rewindable">
            <summary> Reports if the data source is rewindable.</summary>
            <returns> true if the rewind() can legally be called.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.AfterLast">
            <returns> "EOF" state, like java ResultSet.isAfterLast().
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.CanCacheDataType">
            <summary> Returns true if the data type is constant in columns and the transformation can be cached;
            returns false if the data type can change on columns.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.HasMultipleFieldnamesPerColumn">
            <summary> Returns true if the data for this data source will return multiple values for
            a FIELDNAME bound data marker. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.WasNull">
            <summary> Reports whether the last column read had a value of NULL. 
            Note that you must first call one of the getter methods 
            on a column to try to read its value and then call the 
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.DataSource.Item(System.String)" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSource.Item(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex	0-based">column index
            </param>
            <returns>  data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.#ctor(System.Data.DataSet)">
            
            <summary>Constructor takes Dataset
            Similar to DataSourceWrapper(aDataSet.get_Tables.get_Item(0))</summary>
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.#ctor(System.Data.DataTable)">
            <summary>Constructor takes DataTable</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnPosition(System.String)">
            <summary>
            Returns a 0-based position of a column in the Dataset.
            Column is identified by a given column name
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>0-based column index, or -1 if column is not found</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnName(System.Int32)">
            <summary>
            For a given 0-based column index returns the column name as a string
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>column name, or null if column information is not available.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getColumnType(System.Int32)">
            <summary>
            Returns column type as an identifier (from java.sql.Types) 
            </summary>
            <param name="aColumnNumber">aColumnNumber	0-based column index</param>
            <returns>column type (from java.sql.Types)</returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException"> if can't find the type equivalent to the .NET type</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.next">
            <summary>
            Advances to the next record in the data source
            
            </summary>
            <returns>true if successful, false if at the end of data source already</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.rewind">
            <summary>
            Rewinds the data source to the first row of data
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSByte(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSByte(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getShort(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getShort(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getInt(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getInt(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getLong(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getLong(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getFloat(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getFloat(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDouble(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDouble(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDecimal(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDecimal(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getBoolean(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getBoolean(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getString(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getString(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSBytes(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getSBytes(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.GetBytes(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.GetBytes(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDate(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getDate(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getTime(System.String)">
            <summary>
            Retrieves data for the specified column
            
            NOTE: this does the same thing as getDate()
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getTime(System.Int32)">
            <summary>
            Retrieves data for the specified column
            
            NOTE: this does the same thing as getDate()
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getUnicodeStream(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.getUnicodeStream(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">0-based column index</param>
            <returns>data object, or null</returns>
            <exception cref="T:System.Exception"> provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.ColumnCount">
            <summary>
            Gets the column count in the data source.
            or -1 if this information is not available
            </summary>
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Rewindable">
            <summary>
            Check if this source is rewindable
            </summary>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.WasNull">
            <summary>
            Reports whether the last column read had a value of NULL. 
            Note that you must first call one of the getter methods 
            on a column to try to read its value and then call the 
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <returns></returns>
            <exception cref="T:System.Exception"> throws provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.AfterLast">
            <summary>
            return "EOF" state, like java ResultSet.isAfterLast().
            </summary>
            <exception cref="T:System.Exception"> throws  provider-specific exception</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Item(System.String)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnName">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataSourceWrapper.Item(System.Int32)">
            <summary>
            Retrieves data for the specified column
            </summary>
            <param name="aColumnIndex">case-insensitive name of the column in the DataSource</param>
            <returns>data object, or null</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.#ctor(System.Data.IDataReader)">
            <summary> Takes a DataReader and extracts the meta data.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.next" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.rewind">
            <summary> DataReaders are forward-only!  Throws and exception.</summary>
            <throws>  always, because DataReader is forward-only. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.AfterLast">
            <returns> "EOF" state, like java ResultSet.isAfterLast().
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.AdoMdDataReaderWrapper.Item(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName	case-insensitive">name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>  Unknown, probably nothing </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ALicenseTable">
            <summary>
              Provides an implementation of ProvidesThisProduct.
            </summary>
            <author>  geoffk
              Jul 11, 2003 10:02:30 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ILicenseTable">
            <summary> Table interface to find out which products come with what licenses.
            
            </summary>
            <author>  geoffk
            Jul 10, 2003 2:30:22 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.findProducts(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32)">
            <summary> Returns an array of ProductDescriptions provided by the given product and version.</summary>
            <param name="aProduct">the product id to lookup (defined in LicenseKey)
            </param>
            <param name="aVersion">the version to lookup.
            </param>
            <returns> an array of ProductDescriptions available from the given product.  If the product/version combo is not found, an empty array will be returned.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.ProvidesThisProduct(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32,SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32)">
            <summary> Returns true if aProduct/aVersion provide aDesiredProduct/aDesiredVersion.</summary>
            <param name="aProduct">the product id to lookup e.g. the key's product
            </param>
            <param name="aVersion">the version to lookup e.g. the key's major version
            </param>
            <param name="aDesiredProduct">the product to check against e.g. this product
            </param>
            <param name="aDesiredVersion">the version to check against e.g. the major version of this product
            </param>
            <returns> true if the products match.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Array2D">
            <summary> 
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:21:33 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ArrayWrapper">
            <summary> The constructor for an array.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase">
            <summary> Summary description for VectorWrapper.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase.CanCacheDataType">
            <seealso cref="!:DataSource#canCacheDataType()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase.WasNull">
            <summary> Reports whether the last column read had a value of NULL.
            Note that you must first call one of the getter methods
            on a column to try to read its value and then call the
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   provider-specific exception </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework" -->
        <member name="F:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.m_MetaData">
            <summary> Some ResultSet methods require that we return or accept an
            object of type MetaData:
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.ToString">
            <summary> This is a utility method, mostly for debugging output:</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ArrayWrapperBase_TestFramework.wasNull">
            <summary> Reports whether the last column read had a value of NULL.
            Note that you must first call one of the getter methods
            on a column to try to read its value and then call the
            method wasNull to see if the value read was SQL NULL.
            </summary>
            <throws>   SQLException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader">
            <summary> Abstract class implementing getKeys for license readers that only return a single key.
            
            </summary>
            <author>  geoffk
            Jul 11, 2003 10:40:43 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ILicenseReader">
            <summary> This interface is used by the <CODE>LicenseKeyValidator</CODE>
            to obtain a license key string to validate.
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
            <seealso cref="!:ExcelWriterLicenseReader">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseReader.KeyString">
            <summary> The method should return a license key string.  If
            the license key string cannot be obtained, a
            <CODE>LicenseKeyException</CODE> should be thrown.
            This method <B>should not</B> return a <CODE>null</CODE>,
            throw a descriptive exception instead.
            
            </summary>
            <returns> a license key string.
            </returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException"/>
            <summary> cannot be obtained.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ILicenseReader.Keys">
            <summary> The method should return an array of license key strings.
            If the license key string cannot be obtained, a
            <CODE>LicenseKeyException</CODE> should be thrown.
            This method <B>should not</B> return a <CODE>null</CODE>,
            throw a descriptive exception instead.
            
            </summary>
            <returns> an array of license key strings.
            </returns>
            <throws>  LicenseKeyException if no key strings can be obtained. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader.KeyString">
            <seealso cref="!:ILicenseReader#getKeyString()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ASingleKeyLicenseReader.Keys">
            <summary> Returns a single license key in an array.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter">
            <Doc>
      <summary>
        <para>When you import data to a table in your document, you can use the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter"/>  interface to specify how the imported data should be formatted in the table.  <c>AutoFormatter</c>  contains a single method - <see cref="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.FormatCell(SoftArtisans.OfficeWriter.WordWriter.TableCell,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge)"/> - which must be implemented in a class that you will use as an AutoFormatter. When you import data, set <see cref="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.AutoFormatter"/> to the class that you created.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.FormatCell(SoftArtisans.OfficeWriter.WordWriter.TableCell,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge)">
            <Doc>
        <summary>
          <para>This method must be implemented by the class you want to use as an AutoFormatter. Then, when you import data, you can use <see cref="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.AutoFormatter"/> to set the AutoFormatter for that data import.</para>
        </summary>
        <param name="aCell">
          <para>The table cell to format.</para>
        </param>
        <param name="aRow">
          <para>The 0-based row index of the cell to format.</para>
        </param>
        <param name="aColumn">
          <para>The 0-based column index of the cell to format.</para>
        </param>
        <param name="aLocation">
          <para>The location of the cell in relation to the outer edge of the table.</para>
        </param>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge"/> value specifies the location of a table cell in relation to the outer edge of the table.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Bottom">
            <Doc>
          <summary>The cell is in the bottom row of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.BottomLeft">
            <Doc>
          <summary>The cell is in the bottom left corner of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.BottomRight">
            <Doc>
          <summary>The cell is in the bottom right corner of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Left">
            <Doc>
          <summary>The cell is in the left column of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.None">
            <Doc>
          <summary>The cell is not within a row or column at the outer edge of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Right">
            <Doc>
          <summary>The cell is in the right column of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Top">
            <Doc>
          <summary>The cell is in the top row of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.TopLeft">
            <Doc>
          <summary>The cell is in the top left corner of the table.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.TopRight">
            <Doc>
          <summary>The cell is in the top right corner of the table.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AutoFormatter&quot;]/Member[@signature=&quot;AutoFormatter.Edge&quot;]/Member[@signature=&quot;AutoFormatter.Edge.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AutoFormatter&quot;]/Member[@signature=&quot;AutoFormatter.Edge&quot;]/Member[@signature=&quot;AutoFormatter.Edge.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AutoFormatter&quot;]/Member[@signature=&quot;AutoFormatter.Edge&quot;]/Member[@signature=&quot;AutoFormatter.Edge.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AutoFormatter&quot;]/Member[@signature=&quot;AutoFormatter.Edge&quot;]/Member[@signature=&quot;AutoFormatter.Edge.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AutoFormatter.Edge.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;AutoFormatter&quot;]/Member[@signature=&quot;AutoFormatter.Edge&quot;]/Member[@signature=&quot;AutoFormatter.Edge.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.AutoFormatterAdapter">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.AutoFormatterAdapter.Interface">
            <method.excluded>  scope=package </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.AverageBinding">
            <summary>
            A Binding to the DataRows for getting the average of all the numbers in a column
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding">
            <summary>
            Similar to <see cref="T:SoftArtisans.OfficeWriter.Shared.ISimpleBinding"/>, except it is used for writing, which means
            that the field type is MarkerData.Types, and the column is stored, either as the name, or a
            number.
            </summary>
            <remarks>If <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding.AfterLast"/> is <c>true</c>, or <see cref="!:ColumnExists"/> is 
            <c>false</c>, then the behavior of all the "Get-" Methods is undefined.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding.GetData">
            <summary>
            Returns the data in the current column, or <c>null</c> if the column for this binding
            does not exist in the current row.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding.Next">
            <summary>
            Advances the Data Source one row
            </summary>
            <returns><c>true</c> if the data source was successfully advanced</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding.AfterLast">
            <summary>
            Returns <c>true</c> if the data source has been exhausted, otherwise, the current data
            is valid.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.IFormula.AddValue(SoftArtisans.OfficeWriter.Shared.ISimpleBinding)">
            <summary>
            Adds a new value to the formula.
            </summary>
            <remarks>This should be called for every row in the data source that is being used in
            the formula</remarks>
            <param name="binding">The binding to the data</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.IFormula.NextSet">
            <summary>
            Advances to the next result. 
            </summary>
            <remarks>When grouping or nesting occurs, you have the formula output different values 
            for each time it is written out, because it is the sum over this nested bookmark
            </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.NumericFormulaBinding.AddNonNullValue(System.Double)">
            <summary>
            This is just like <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.NumericFormulaBinding.AddValue(System.Double)"/>, except that it also updates 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.NumericFormulaBinding.countIsGreaterThanZero"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.NumericFormulaBinding.Value">
            <summary>
            Returns the calculated value, so that it can be stored for writing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingData.GetDataType">
            <summary>
            Get the type of the data in the given column.
            </summary>
            <param name="columnNumber">The output from <see cref="!:GetColumnNumber(string,bool)"/> or
            <see cref="!:GetColumnNumber(int,bool)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingData.GetColumnName">
            <summary>
            Returns the column name associated with the given column
            </summary>
            <param name="columnNumber">The column number; a 1-based index, can be grabbed directly
            from the input</param>
            <param name="optional">If this is <c>true</c>, no exception will be thrown if the given
            number does not align with a data source</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingData.GetBytes">
            <summary>
            Returns the binary information in the data source.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATBlock">
            <summary> A block of block allocation table entries. BATBlocks are created
            only through a static factory method: createBATBlocks.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockWritable">
            <summary> An interface for persisting block storage of POIFS components.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockWritable.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.doWriteData(System.IO.Stream,System.SByte[])">
            <summary> Default implementation of write for extending classes that
            contain their data in a simple array of bytes.
            
            </summary>
            <param name="stream">the OutputStream to which the data should be
            written.
            </param>
            <param name="data">the byte array of to be written.
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BigBlock.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.createBATBlocks(System.Int32[])">
            <summary> Create an array of BATBlocks from an array of int block
            allocation table entries
            
            </summary>
            <param name="entries">the array of int entries
            
            </param>
            <returns> the newly created array of BATBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.createXBATBlocks(System.Int32[],System.Int32)">
            <summary> Create an array of XBATBlocks from an array of int block
            allocation table entries
            
            </summary>
            <param name="entries">the array of int entries
            </param>
            <param name="startBlock">the start block of the array of XBAT blocks
            
            </param>
            <returns> the newly created array of BATBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.calculateStorageRequirements(System.Int32)">
            <summary> Calculate how many BATBlocks are needed to hold a specified
            number of BAT entries.
            
            </summary>
            <param name="entryCount">the number of entries
            
            </param>
            <returns> the number of BATBlocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.calculateXBATStorageRequirements(System.Int32)">
            <summary> Calculate how many XBATBlocks are needed to hold a specified
            number of BAT entries.
            
            </summary>
            <param name="entryCount">the number of entries
            
            </param>
            <returns> the number of XBATBlocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.entriesPerBlock">
            <returns> number of entries per block
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.entriesPerXBATBlock">
            <returns> number of entries per XBAT block
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.BATBlock.#ctor(System.Int32[],System.Int32,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BATBlock.XBATChainOffset">
            <returns> offset of chain index of XBAT block
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATManaged">
            <summary> This interface defines behaviors for objects managed by the Block
            Allocation Table (BAT).
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATManaged.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BATManaged.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BATManaged.DocumentWithNoData">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BATManagedAndBlockWritable">
            <summary>
            This class implements BATManaged and BlockWritable. It's used to make handling classes which implement
            both of those easier
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BidirectionalDictionary`2">
            <summary>
            A dictionary which lets one search for keys by values.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TValue">The type of the values.</typeparam>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BidirectionalDictionary`2.LookupKeyForValue(`1)">
            <summary>
            Returns the key for the first value found which matches the passed value.
            </summary>
            <param name="value">The value to search for.</param>
            <returns>The corresponding key for the first value found. If no key
            can be found, the default value of TKey.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BidirectionalDictionary`2.TryGetKey(`1,`0@)">
            <summary>
            Returns whether or not a key can be found for a specified value. The found
            key will be placed into the out variable 'key'. If the specified value cannot be found,
            the value of key will be the default for its type.
            </summary>
            <param name="value">The value to search for.</param>
            <param name="key">The variable to assign a found key to, or the default of the key's type
            if none can be found.</param>
            <returns>Whether or not a key was found.</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IWordTemplate.SaveExtension">
            <summary>
            This is the extension that should be used when saving to a file.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.Open(System.IO.Stream,System.Boolean)">
            <summary> Opens the Word Document from the InputStream</summary>
            <param name="templateStream	InputStream">with data
            </param>
            <throws>  java.io.IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.Process(System.Boolean,SoftArtisans.OfficeWriter.WordWriter.WordTemplateData)">
            <summary> Processes the source Word Document template</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.Save(System.IO.Stream)">
            <summary> Saves the output generated in process() method into the output stream</summary>
            <param name="resultingDocumentStream">output stream
            </param>
            <throws>  java.lang.Exception </throws>
            <throws>  java.io.IOException </throws>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.open(SoftArtisans.OfficeWriter.WordWriter.WordApplication,SoftArtisans.OfficeWriter.WordWriter.Document)" -->
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.SaveExtension">
            <summary>
            For BinaryTemplate, this is doc
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BinaryTemplate.SupportsNestedBookmarks">
            <summary>
            Since nesting bookmarks are not allowed on binary docs, if there are any bookmarks, then
            creating a global repeat block throws an exception.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BinTable`1.split(System.Int32,System.Int32,System.Collections.Generic.IList{`0},`0)">
            <param name="destIndex">
            </param>
            <param name="destStart">
            </param>
            <param name="nodes">
            </param>
            <param name="currentNode">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BinTable`1.sortPropertyNodesByEndCp(System.Collections.Generic.List{`0})">
            <summary>
            Sorts the property nodes by their end CPs
            </summary>
            <param name="propertyNodes">the nodes to be sorted</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BinTableEntry">
            <summary> Implements Bin Table Entry (BTE)
            Is a node in BuildablePLexFCs, implements DocumentType for easy read/write
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FCNode">
            <summary> FCNode is a base class for all classes that are entries in PLex of FCs.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentType">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitField">
            <summary> Manage operations dealing with bit-mapped fields.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <author>  Andrew C. Oliver (acoliver at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.#ctor(System.Int32)">
            <summary> Create a BitField instance
            
            </summary>
            <param name="mask">the mask specifying which bits apply to this
            BitField. Bits that are set in this mask are the
            bits that this BitField operates on
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getValue(System.Int32)">
            <summary> Obtain the value for the specified BitField, appropriately
            shifted right. Many users of a BitField will want to treat the
            specified bits as an int value, and will not want to be aware
            that the value is stored as a BitField (and so shifted left so
            many bits)
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the selected bits, shifted right appropriately
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getShortValue(System.Int16)">
            <summary> Obtain the value for the specified BitField, appropriately
            shifted right, as a short. Many users of a BitField will want
            to treat the specified bits as an int value, and will not want
            to be aware that the value is stored as a BitField (and so
            shifted left so many bits)
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the selected bits, shifted right appropriately
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getRawValue(System.Int32)">
            <summary> Obtain the value for the specified BitField, unshifted
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the selected bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.getShortRawValue(System.Int16)">
            <summary> Obtain the value for the specified BitField, unshifted
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the selected bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.isSet(System.Int32)">
            <summary> Is the field set or not? This is most commonly used for a
            single-bit field, which is often used to represent a boolean
            value; the results of using it for a multi-bit field is to
            determine whether *any* of its bits are set
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> true if any of the bits are set, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.isAllSet(System.Int32)">
            <summary> Are all of the bits set or not? This is a stricter test than
            isSet, in that all of the bits in a multi-bit set must be set
            for this method to return true
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> true if all of the bits are set, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setValue(System.Int32,System.Int32)">
            <summary> Replace the bits with new values.
            
            </summary>
            <param name="holder">the int data containint the bits we're interested
            in
            </param>
            <param name="value">the new value for the specified bits
            
            </param>
            <returns> the value of holder with the bits from the value
            parameter replacing the old bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShortValue(System.Int16,System.Int16)">
            <summary> Replace the bits with new values.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            </param>
            <param name="value">the new value for the specified bits
            
            </param>
            <returns> the value of holder with the bits from the value
            parameter replacing the old bits
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clear(System.Int32)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clearShort(System.Int16)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.clearByte(System.SByte)">
            <summary> Clear the bits.
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits cleared
            (set to 0)
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.set_Renamed(System.Int32)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShort(System.Int16)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setByte(System.SByte)">
            <summary> Set the bits.
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            
            </param>
            <returns> the value of holder with the specified bits set to 1
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setBoolean(System.Int32,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the int data containing the bits we're interested
            in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setShortBoolean(System.Int16,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the short data containing the bits we're
            interested in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BitField.setByteBoolean(System.SByte,System.Boolean)">
            <summary> Set a boolean BitField
            
            </summary>
            <param name="holder">the byte data containing the bits we're
            interested in
            </param>
            <param name="flag">indicating whether to set or clear the bits
            
            </param>
            <returns> the value of holder with the specified bits set or
            cleared
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt16">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt16">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt32">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt32">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BitFieldInt8">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt8">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BKFirstDescriptor">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BKFirstDescriptor.#ctor(System.SByte[],System.Int32)">
            <summary> data structure for bookmarks</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor(System.Int32,System.Int32[],System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> create a BlockAllocationTableReader for an existing filesystem. Side
            effect: when this method finishes, the BAT blocks will have
            been removed from the raw block list, and any blocks labeled as
            'unused' in the block allocation table will also have been
            removed from the raw block list.
            
            </summary>
            <param name="block_count">the number of BAT blocks making up the block
            allocation table
            </param>
            <param name="block_array">the array of BAT block indices from the
            filesystem's header
            </param>
            <param name="xbat_count">the number of XBAT blocks
            </param>
            <param name="xbat_index">the index of the first XBAT block
            </param>
            <param name="raw_block_list">the list of RawDataBlocks
            
            </param>
            <exception cref="!:IOException"> if, in trying to create the table, we
            encounter logic errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> create a BlockAllocationTableReader from an array of raw data blocks
            
            </summary>
            <param name="blocks">the raw data
            </param>
            <param name="raw_block_list">the list holding the managed blocks
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.#ctor">
            <summary> Constructor BlockAllocationTableReader
            
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.fetchBlocks(System.Int32,SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> walk the entries from a specified point and return the
            associated blocks. The associated blocks are removed from the
            block list
            
            </summary>
            <param name="startBlock">the first block in the chain
            </param>
            <param name="blockList">the raw data block list
            
            </param>
            <returns> array of ListManagedBlocks, in their correct order
            
            </returns>
            <exception cref="!:IOException"> if there is a problem acquiring the blocks
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.isUsed(System.Int32)">
            <summary> determine whether the block specified by index is used or not
            
            </summary>
            <param name="index">index of block in question
            
            </param>
            <returns> true if the specific block is used, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.getNextBlockIndex(System.Int32)">
            <summary> return the next block index
            
            </summary>
            <param name="index">of the current block
            
            </param>
            <returns> index of the next block (may be
            POIFSConstants.END_OF_CHAIN, indicating end of chain
            (duh))
            
            </returns>
            <exception cref="!:IOException"> if the current block is unused
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableReader.setEntries(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],SoftArtisans.OfficeWriter.Shared.BlockList)">
            <summary> Convert an array of blocks into a set of integer indices
            
            </summary>
            <param name="blocks">the array of blocks containing the indices
            </param>
            <param name="raw_blocks">the list of blocks being managed. Unused
            blocks will be eliminated from the list
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.#ctor">
            <summary> create a BlockAllocationTableWriter</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.createBlocks">
            <summary> Create the BATBlocks we need
            
            </summary>
            <returns> start block index of BAT blocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.allocateSpace(System.Int32)">
            <summary> Allocate space for a block of indices
            
            </summary>
            <param name="blockCount">the number of blocks to allocate space for
            
            </param>
            <returns> the starting index of the blocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.getStartBlock">
            <summary> get the starting block
            
            </summary>
            <returns> the starting block index
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.simpleCreateBlocks">
            <summary> create the BATBlocks</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockAllocationTableWriter.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            
            </param>
            <param name="start_block">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockingInputStream">
            <summary> Implementation of a BlockingInputStream to provide data to
            RawDataBlock that expects data in 512 byte chunks.  Useful to read
            data from slow (ie, non FileInputStream) sources, for example when
            reading an OLE2 Document over a network.
            
            Possible extentions: add a timeout. Curently a call to read(byte[]) on this
            class is blocking, so use at your own peril if your underlying stream blocks.
            
            </summary>
            <author>  Jens Gerhard
            </author>
            <author>  aviks - documentation cleanups.
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockingInputStream.read(System.SByte[])">
            <summary> We had to revert to byte per byte reading to keep
            with slow network connections on one hand, without
            missing the end-of-file.
            This is the only method that does its own thing in this class
            everything else is delegated to aggregated stream.
            THIS IS A BLOCKING BLOCK READ!!!
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockList">
            <summary> Interface for lists of blocks that are mapped by block allocation
            tables
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.zap(System.Int32)">
            <summary> remove the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block; if the index is
            out of range, that's ok
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.remove(System.Int32)">
            <summary> remove and return the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block
            
            </param>
            <returns> the specified block
            
            </returns>
            <exception cref="!:IOException"> if the index is out of range or has
            already been removed
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockList.fetchBlocks(System.Int32)">
            <summary> get the blocks making up a particular stream in the list. The
            blocks are removed from the list.
            
            </summary>
            <param name="startBlock">the index of the first block in the stream
            
            </param>
            <returns> the stream as an array of correctly ordered blocks
            
            </returns>
            <exception cref="!:IOException"> if blocks are missing
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockList.BAT">
            <summary> set the associated BlockAllocationTable
            
            </summary>
            <param name="bat">the associated BlockAllocationTable
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.BlockListImpl">
            <summary> A simple implementation of BlockList
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.#ctor">
            <summary> Constructor BlockListImpl</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.zap(System.Int32)">
            <summary> remove the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block; if the index is
            out of range, that's ok
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.remove(System.Int32)">
            <summary> remove and return the specified block from the list
            
            </summary>
            <param name="index">the index of the specified block
            
            </param>
            <returns> the specified block
            
            </returns>
            <exception cref="!:IOException"> if the index is out of range or has
            already been removed
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.BlockListImpl.fetchBlocks(System.Int32)">
            <summary> get the blocks making up a particular stream in the list. The
            blocks are removed from the list.
            
            </summary>
            <param name="startBlock">the index of the first block in the stream
            
            </param>
            <returns> the stream as an array of correctly ordered blocks
            
            </returns>
            <exception cref="!:IOException"> if blocks are missing
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockListImpl.Blocks">
            <summary> provide blocks to manage
            
            </summary>
            <param name="blocks">blocks to be managed
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.BlockListImpl.BAT">
            <summary> set the associated BlockAllocationTable
            
            </summary>
            <param name="bat">the associated BlockAllocationTable
            
            </param>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.m_IsFake">
                     * <summary>Returns a list of all the character format entries that point to the text
                     * within this marker. Note: If the setFC is going to be called on the returned FormatEntries 
                	 * they should be cloned first.</summary>
                     * 
                     * <returns>the character format entries relevant to this marker</returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.m_ToReplaceLength">
            The length in characters of the text to replace
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.addFormatEntry(System.Collections.ArrayList,SoftArtisans.OfficeWriter.WordWriter.FormatEntry,System.Int32)">
            <summary>Adds a format entry to the formatArray</summary>
            
            <param name="formatArray">
                       an array of format entries that are being corrected for new
                       data</param>
            <param name="aSource">
                       the original format entry that pointed to either the true text
                       or the false text. This variable will be cloned, so any
                       changes after calling this function will not affect the entry
                       in <code>formatArray</code></param>
            <param name="aCorrection">
                       the amount of change for the format entry</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.byteArrayCompare(System.Byte[],System.Byte[])">
            <summary>Compares two byte arrays</summary>
            
            <param name="aLeft">
                       one of the arrays to be compared</param>
            <param name="aRight">
                       the other array to be compared</param>
            <returns> true if the contents of <code>aLeft</code> and
                    <code>aRight</code> are equal</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.ParagraphFormatEntries">
            <summary>Returns a list of all the paragraph format entries that point to the text
            within this marker</summary>
            
            <returns>the paragraph format entries relevant to this marker</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.MarkerBase.OriginalCP">
            <summary>Note: This character position may be changed, in particular when markers
            are added to a repeat block this updated to be the index within the 
            block, so if a subclass bases data off the original cp, this should be 
            overloaded to update that data. </summary>
            
            @param originalCP
                       the updated "original" Character Position of this marker to
                       set
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Bookmark">
            <Doc>
      <summary>
        <para>This class is used to represent a bookmark in the document. Bookmarks can be added to a document in Word or programmatically using WordWriter. They can only be retrieved form an existing document.</para>
      </summary>
      <remarks>
        <para>To insert a bookmark into a document, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.CreateBookmark(System.String)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Table.CreateBookmarkOnRow(System.Int32,System.String)"/>.  To get a bookmark from an existing document use the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.GetBookmark(System.String)"/> method.</para>
        <para>The following sample shows you how to add a bookmark to a document and retrieve a bookmark from a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Create a bookmark
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          doc.CreateBookmark("MyBookmark");

          //--- Get an existing bookmark
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Bookmark bmark = doc.GetBookmark("ExistingBookmark");

          //--- Or, if you know the order of the bookmarks in the document
          //--- you can use the following:
          //Bookmark bmark = (Bookmark)doc.GetElements(Element.Type.Bookmark)[0];
        </code>
          <br/>
          <code>

          '--- Create a bookmark
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          doc.CreateBookmark("MyBookMark")

          '--- Get an existing bookmark
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim bmark As Bookmark = doc.GetBookmark("ExistingBookmark")

          '--- Or, if you know the order of the bookmarks in the document
          '--- you can use the following:
          'Dim bmark as Bookmark = doc.GetElements(Element.Type.Bookmark)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Element">
            <Doc>
      <summary>
        <para>This class is used to represent a region of the document that can be edited. This is the main class for manipulating the Word object model. Most elements of a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> inherit from the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> class.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <c>Element</c> object by using the <c>new</c> keyword. There are various properties</para>
        <para>The following sample demonstrates getting an <c>Element</c> object by retrieving a section's header:</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Section sect = doc.Sections[0];
          Element e = sect.GetHeader(Section.HeaderFooterType.All);
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim sect As Section = doc.Sections(0)
          Dim e As Element = sect.GetHeader(Section.HeaderFooterType.All)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)">
            <Doc>
        <summary>
          <para>Returns a collection of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> objects that represent all the elements in the document of the specified type.</para>
        </summary>
        <param name="type">
          <para>An Element.Type representing the type of element to be returned.</para>
        </param>
        <returns>
          <para>A a collection of <c>Element</c> objects that represent all the elements in the document of the specified type.</para>
        </returns>
        <example>
          <para>
            <code>

          Element[] eArray = e.GetElements(Element.Type.Paragraph);
        </code>
            <br/>
            <code>

          Dim eArray As Element() = e.GetElements(Element.Type.Paragraph)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.SubElement(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object that represents a sub Element within this Element based on the specified start and end offsets.</para>
        </summary>
        <param name="start">
          <para>An <c>int</c> representing the starting offset of the sub Element relative to the start of this Element.</para>
        </param>
        <param name="end">
          <para>An <c>int</c> representing the ending offset of the sub Element relative the start of this Element.</para>
        </param>
        <returns>
          <para>A <c>Element</c> object that represents a sub Element within this Element.</para>
        </returns>
        <example>
          <para>
            <code>
Element subE = e.SubElement();</code>
            <br/>
            <code>
Dim subE As Element = e.SubElement()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetPosition(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Position"/> object that represents the location specified by the offset. The Position object can be used similar to a cursor.</para>
        </summary>
        <param name="offset">
          <para>An <c>int</c> representing the relative offset from the start of this Element to get the Position for.</para>
        </param>
        <returns>
          <para>A <c>Position</c> object that represents the location specified by the offset.</para>
        </returns>
        <example>
          <para>
            <code>
Position oPosition = e.GetPosition();</code>
            <br/>
            <code>
Dim oPosition As Position = e.GetPosition()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertBreakBefore(SoftArtisans.OfficeWriter.WordWriter.Element.BreakType)">
            <Doc>
        <summary>
          <para>Inserts a break of the specified type before the element.</para>
        </summary>
        <param name="type">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType"/> that specifies the type of break to insert</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertBreakAfter(SoftArtisans.OfficeWriter.WordWriter.Element.BreakType)">
            <Doc>
        <summary>
          <para>Inserts a break of the specified type after the element.</para>
        </summary>
        <param name="type">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType"/> that specifies the type of break to insert</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphBefore(SoftArtisans.OfficeWriter.WordWriter.NamedStyle)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph"/> object that represents a new empty paragraph at the beginning of this Element. The paragraph that is inserted will have the style specified. If this Element is in the middle of a paragraph, the containing paragraph will be split.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object representing the base style of this paragraph. The base style also affects the character style of any text added to this paragraph. If this is null, the style will be "Normal".</para>
        </param>
        <returns>
          <para>A <c>Paragraph</c> object that represents a new empty paragraph at the beginning of this Element. Even though the paragraph is empty there will always be at least a single carriage return.</para>
        </returns>
        <example>
          <para>
            <code>
Paragraph p = e.InsertParagraphBefore(doc.Styles[NamedStyle.BuiltIn.Normal]);</code>
            <br/>
            <code>
Dim p As Paragraph = e.InsertParagraphBefore(doc.Styles(NamedStyle.BuiltIn.Normal))</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphAfter(SoftArtisans.OfficeWriter.WordWriter.NamedStyle)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph"/> object that represents a new empty paragraph at the end of this Element. The paragraph that is inserted will have the style specified. If this Element is in the middle of a paragraph, the containing paragraph will be split.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object representing the base style of this paragraph. The base style also affects the character style of any text added to this paragraph. If this is null, the style will be "Normal".</para>
        </param>
        <returns>
          <para>A <c>Paragraph</c> object that represents a new empty paragraph at the beginning of this Element. Even though the paragraph is empty there will always be at least a single carriage return.</para>
        </returns>
        <example>
          <para>
            <code>
Paragraph p = e.InsertParagraphAfter(doc.Styles[NamedStyle.BuiltIn.Normal]);</code>
            <br/>
            <code>
Dim p As Paragraph= e.InsertParagraphAfter(doc.Styles(NamedStyle.BuiltIn.Normal))</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphBefore(SoftArtisans.OfficeWriter.WordWriter.NamedStyle,SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph"/> object that represents a new empty paragraph at the beginning of this Element. The paragraph that is inserted will have the style specified, to which any additional specified paragraph formatting is applied as well. If this Element is in the middle of a paragraph, the containing paragraph will be split.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object representing the base style of this paragraph. The base style also affects the character style of any text added to this paragraph. If this is null, the style will be "Normal".</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> that represents formatting properties that should override the paragraph properties found in the style.</para>
        </param>
        <returns>
          <para>A <c>Paragraph</c> object that represents a new empty paragraph at the beginning of this Element. Even though the paragraph is empty there will always be at least a single carriage return.</para>
        </returns>
        <example>
          <para>
            <code>
Paragraph p = e.InsertParagraphBefore(doc.Styles[NamedStyle.BuiltIn.Normal], pFormatting);</code>
            <br/>
            <code>
Dim p As Paragraph = e.InsertParagraphBefore(doc.Styles(NamedStyle.BuiltIn.Normal), pFormatting)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphAfter(SoftArtisans.OfficeWriter.WordWriter.NamedStyle,SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph"/> object that represents a new empty paragraph at the end of this Element. The paragraph that is inserted will have the style specified, to which any additional specified paragraph formatting is applied as well. If this Element is in the middle of a paragraph, the containing paragraph will be split.</para>
        </summary>
        <param name="style">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object representing the base style of this paragraph. The base style also affects the character style of any text added to this paragraph. If this is null, the style will be "Normal".</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> that represents formatting properties that should override the paragraph properties found in the style.</para>
        </param>
        <returns>
          <para>A <c>Paragraph</c> object that represents a new empty paragraph at the end of this Element. Even though the paragraph is empty there will always be at least a single carriage return.</para>
        </returns>
        <example>
          <para>
            <code>
Paragraph p = e.InsertParagraphAfter(doc.Styles[NamedStyle.BuiltIn.Normal], pFormatting);</code>
            <br/>
            <code>
Dim p As Paragraph = e.InsertParagraphAfter(doc.Styles(NamedStyle.BuiltIn.Normal), pFormatting)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.CreateSectionBefore">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section"/> object that represents a new section at the beginning of this Element.</para>
        </summary>
        <returns>
          <para>A <c>Section</c> object that represents a new section at the beginning of this Element.</para>
        </returns>
        <example>
          <para>
            <code>
Section sect = e.CreateSectionBefore();</code>
            <br/>
            <code>
Dim sect As Section = e.CreateSectionBefore()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.CreateSectionAfter">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section"/> object that represents a new section at the end of this Element.</para>
        </summary>
        <returns>
          <para>A <c>Section</c> object that represents a new section at the end of this Element.</para>
        </returns>
        <example>
          <para>
            <code>
Section sect = e.CreateSectionAfter();</code>
            <br/>
            <code>
Dim sect As Section = e.CreateSectionAfter()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextBefore(System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> at the beginning of this Element. The text to be inserted is specified as well as whether this should be a new character run or part of the existing one.</para>
        </summary>
        <param name="text">
          <para>A <c>String</c> representing the text to insert.</para>
        </param>
        <param name="newRun">
          <para>A <c>boolean</c> representing if this should have default formatting and become its own character run (true) or if it should assume the formatting of the first character in this Element, becoming a part of that first character run.</para>
        </param>
        <returns>
          <para>The <c>CharacterRun</c> containing the inserted text.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = e.InsertTextBefore("Here is some text.", true);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = e.InsertTextBefore("Here is some text.", True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextAfter(System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> at the end of this Element. The text to be inserted is specified as well as whether this should be a new character run or part of the previous one.</para>
        </summary>
        <param name="text">
          <para>A <c>String</c> representing the text to insert.</para>
        </param>
        <param name="newRun">
          <para>A <c>boolean</c> representing if this should have default formatting and become its own character run (true) or if it should assume the formatting of the first character in this Element, becoming a part of that first character run.</para>
        </param>
        <returns>
          <para>The <c>CharacterRun</c> containing the inserted text.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = e.InsertTextAfter("Here is some text.", true);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = e.InsertTextAfter("Here is some text.", True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextBefore(System.String,SoftArtisans.OfficeWriter.WordWriter.Font)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> at the beginning of this Element. The text to be inserted is specified as well as the font that should override the font found in the style of the character run's enclosing paragraph.</para>
        </summary>
        <param name="text">
          <para>A <c>String</c> representing the text to insert.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> object representing the font that should override the font found in the style of the character run's enclosing paragraph.</para>
        </param>
        <returns>
          <para>The <c>CharacterRun</c> containing the inserted text.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = e.InsertTextBefore("Here is some text.", fnt);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = e.InsertTextBefore("Here is some text.", fnt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextAfter(System.String,SoftArtisans.OfficeWriter.WordWriter.Font)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> at the end of this Element. The text to be inserted is specified as well as the font that should override the font found in the style of the character run's enclosing paragraph.</para>
        </summary>
        <param name="text">
          <para>A <c>String</c> representing the text to insert.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> object representing the formatting that should override the font found in the style of the character run's enclosing paragraph.</para>
        </param>
        <returns>
          <para>The <c>CharacterRun</c> containing the inserted text.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = e.InsertTextAfter("Here is some text.", fnt);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = e.InsertTextAfter("Here is some text.", fnt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertListBefore(System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns an empty <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/> at the beginning of this Element. By passing a boolean, it can be a numbered list (true) or a bulleted list (false).</para>
        </summary>
        <param name="numbered"/>
        <returns>
          <para>A <c>List</c> object representing the newly created empty list.</para>
        </returns>
        <example>
          <para>
            <code>
List lst = e.InsertListBefore(true);</code>
            <br/>
            <code>
Dim lst As List = e.InsertListBefore(True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertListAfter(System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns an empty <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/> at the end of this Element. By passing a boolean, it can be a numbered list (true) or a bulleted list (false).</para>
        </summary>
        <param name="numbered"/>
        <returns>
          <para>A <c>List</c> object representing the newly created empty list.</para>
        </returns>
        <example>
          <para>
            <code>
List lst = e.InsertListAfter(true);</code>
            <br/>
            <code>
Dim lst As List = e.InsertListAfter(True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableBefore(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the beginning of this Element. The table will contain the specified number of rows and columns.</para>
        </summary>
        <param name="rows">
          <para>An <c>int</c> representing the number of rows the table will have.</para>
        </param>
        <param name="columns">
          <para>An <c>int</c> representing the number of columns the table will have.</para>
        </param>
        <returns>
          <para>A <c>Table</c> object representing the newly created table.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.InsertTableBefore(2, 3);</code>
            <br/>
            <code>
Dim tbl As Table = e.InsertTableBefore(2, 3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableAfter(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the end of this Element. The table will contain the specified number of rows and columns.</para>
        </summary>
        <param name="rows">
          <para>An <c>int</c> representing the number of rows the table will have.</para>
        </param>
        <param name="columns">
          <para>An <c>int</c> representing the number of columns the table will have.</para>
        </param>
        <returns>
          <para>A <c>Table</c> object representing the newly created table.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.InsertTableAfter(2, 3);</code>
            <br/>
            <code>
Dim tbl As Table = e.InsertTableAfter(2, 3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableBefore(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.TableFormatting)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the beginning of this Element. The table will contain the specified number of rows and columns. It will also be formatted with the properties specified.</para>
        </summary>
        <param name="rows">
          <para>An <c>int</c> representing the number of rows the table will have.</para>
        </param>
        <param name="columns">
          <para>An <c>int</c> representing the number of columns the table will have.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting"/> object representing the formatting properties to apply to the table.</para>
        </param>
        <returns>
          <para>A <c>Table</c> object representing the newly created table.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.InsertTableBefore(2, 3, tFormatting);</code>
            <br/>
            <code>
Dim tbl As Table = e.InsertTableBefore(2, 3, tFormatting)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableAfter(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.TableFormatting)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the end of this Element. The table will contain the specified number of rows and columns. It will also be formatted with the properties specified.</para>
        </summary>
        <param name="rows">
          <para>An <c>int</c> representing the number of rows the table will have.</para>
        </param>
        <param name="columns">
          <para>An <c>int</c> representing the number of columns the table will have.</para>
        </param>
        <param name="props">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting"/> object representing the formatting properties to apply to the table.</para>
        </param>
        <returns>
          <para>A <c>Table</c> object representing the newly created table.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.InsertTableAfter(2, 3, tFormatting);</code>
            <br/>
            <code>
Dim tbl As Table = e.InsertTableAfter(2, 3, tFormatting)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertMergeFieldBefore(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.MergeField"/> at the beginning of this Element. This merge field will have the specified name and contents.</para>
        </summary>
        <param name="fieldName">
          <para>A <c>String</c> representing the name of this merge field.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will displayed for this merge field in the document.</para>
        </param>
        <returns>
          <para>A <c>MergeField</c> object representing the newly created merge field.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
MergeField mfield = e.InsertMergeFieldBefore("MyField", "ThisNameIsDisplayed");</code>
            <br/>
            <code>
Dim mfield As MergeField = e.InsertMergeFieldBefore("MyField", "ThisNameIsDisplayed")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertMergeFieldAfter(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.MergeField"/> at the end of this Element. This merge field will have the specified name and contents.</para>
        </summary>
        <param name="fieldName">
          <para>A <c>String</c> representing the name of this merge field.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will be displayed for this merge field in the document.</para>
        </param>
        <returns>
          <para>A <c>MergeField</c> object representing the newly created merge field.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
MergeField mfield = e.InsertMergeFieldAfter("MyField", "ThisNameIsDisplayed");</code>
            <br/>
            <code>
Dim mfield As MergeField = e.InsertMergeFieldAfter("MyField", "ThisNameIsDisplayed")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertHyperlinkBefore(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Hyperlink"/> at the beginning of this Element. This hyperlink will have the specified url and displayed text.</para>
        </summary>
        <param name="url">
          <para>A <c>String</c> representing the url to link to.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will be displayed in the document for this hyperlink.</para>
        </param>
        <returns>
          <para>A <c>Hyperlink</c> object representing the newly created hyperlink.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
Hyperlink link = e.InsertHyperlinkBefore("http://www.softartisans.com", "SoftArtisans");</code>
            <br/>
            <code>
Dim link As Hyperlink = e.InsertHyperlinkBefore("http://www.softartisans.com", "SoftArtisans")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertHyperlinkAfter(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Hyperlink"/> at the beginning of this Element. This hyperlink will have the specified url and displayed text.</para>
        </summary>
        <param name="url">
          <para>A <c>String</c> representing the url to link to.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will displayed in the document for this hyperlink.</para>
        </param>
        <returns>
          <para>A <c>Hyperlink</c> object representing the newly created hyperlink.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
Hyperlink link = e.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans");</code>
            <br/>
            <code>
Dim link As Hyperlink = e.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertImageBefore(System.String)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the beginning of this Element. The image that will be inserted is specified by the fileName parameter.</para>
        </summary>
        <param name="fileName">
          <para>A <c>String</c> containing the filename of the image to insert.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object that represents the image that was inserted.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the image file is not a valid format. See <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> for a list of supported formats.</para>
        </exception>
        <example>
          <para>
            <code>
InlineImage image = e.InsertImageBefore("C:\sample.jpg");</code>
            <br/>
            <code>
Dim image As InlineImage = e.InsertImageBefore("C:\sample.jpg")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertImageAfter(System.String)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the end of this Element. The image that will be inserted is specified by the fileName parameter.</para>
        </summary>
        <param name="fileName">
          <para>A <c>String</c> containing the filename of the image to insert.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object that represents the image that was inserted.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the image file is not a valid format. See <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> for a list of supported formats.</para>
        </exception>
        <example>
          <para>
            <code>
InlineImage image = e.InsertImageAfter("C:\\sample.jpg");</code>
            <br/>
            <code>
Dim image As InlineImage = e.InsertImageAfter("C:\sample.jpg")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertImageBefore(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the beginning of this Element. The image that will be inserted is specified by the stream parameter.</para>
        </summary>
        <param name="stream">
          <para>A <see cref="T:System.IO.Stream"/> containing the image to insert. to insert.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object that represents the image that was inserted.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the image file is not a valid format. See <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> for a list of supported formats.</para>
        </exception>
        <example>
          <para>
            <code>
InlineImage image = e.InsertImageBefore(strm);</code>
            <br/>
            <code>
Dim image As InlineImage = e.InsertImageBefore(strm)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertImageAfter(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the end of this Element. The image that will be inserted is specified by the stream parameter.</para>
        </summary>
        <param name="stream">
          <para>A <see cref="T:System.IO.Stream"/> containing the image to insert.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object that represents the image that was inserted.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the image file is not a valid format. See <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> for a list of supported formats.</para>
        </exception>
        <example>
          <para>
            <code>
InlineImage image = e.InsertImageAfter(strm);</code>
            <br/>
            <code>
Dim image As InlineImage = e.InsertImageAfter(strm)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertBefore(SoftArtisans.OfficeWriter.WordWriter.Element)">
            <Doc>
        <summary>
          <para>Inserts an existing element before this element. A copy of the Element passed in is placed before this element</para>
        </summary>
        <param name="element">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object to insert.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertAfter(SoftArtisans.OfficeWriter.WordWriter.Element)">
            <Doc>
        <summary>
          <para>Inserts an existing element after this element. A copy of the Element passed in is placed after this element</para>
        </summary>
        <param name="element">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object to insert.</para>
        </param>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.CreateBookmark(System.String)">
            <Doc>
        <summary>
          <para>Creates a bookmark on this Element with the specified name.</para>
        </summary>
        <param name="name">
          <para>A <c>String</c> representing the name to give this bookmark.</para>
        </param>
        <example>
          <para>
            <code>
e.CreateBookmark("MyBookmark");</code>
            <br/>
            <code>
e.CreateBookmark("MyBookmark")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.DeleteElement">
            <Doc>
        <summary>
          <para>Deletes all the text and properties of this Element. The element then is no longer a valid element of the type.  It is now just a position of where that element used to be.</para>
        </summary>
        <example>
          <para>
            <code>
e.DeleteElement();</code>
            <br/>
            <code>
e.DeleteElement()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.SearchAndReplace(System.String,System.String)">
            <Doc>
        <summary>Searches for a string specified by the <c>search</c> parameter, and replaces it with the string specified by the <c>replaceWith</c> parameter. The search string can be a literal, a regular expression, or a combination of both. Since the string can contain regular expressions, use a backslash to escape special characters. Special characters are <c>[\^$.|?*+(){\</c>}.</summary>
        <param name="search">The string to find and replace.</param>
        <param name="replaceWith">The replacement string.</param>
        <returns>The number of occurences that were found and replaced.</returns>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\myDoc.doc");

          //--- Update a copyright
          //--- Search for: (c) or the copyright symbol in ASCII, one or more whitespace characters,
          //--- four digits, and then any number of characters followed by 'Inc.'
          //--- Replace matches with '(c) 2008 SoftArtisans, Inc.'
          doc.SearchAndReplace("(\(c\)|\xA9)\s+[0-9]{4}\s+SoftArtisans, Inc\.", "(c) 2008 SoftArtisans, Inc.");
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\myDoc.doc")

          '--- Update a copyright
          '--- Search for: (c) or the copyright symbol in ASCII, one ore more whitespace characters,
          '--- four digits, and then any number of characters followed by 'Inc.'
          '--- Replace matches with '(c) 2008 SoftArtisans, Inc.'
          doc.SearchAndReplace("(\(c\)|\xA9)\s+[0-9]{4}\s+SoftArtisans, Inc\.", "(c) 2008 SoftArtisans, Inc.")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Search(System.String)">
            <Doc>
        <summary>
          <para>Searches for a specified string and returns a collection of type <see cref="T:SoftArtisans.OfficeWriter.WordWriter.SearchMatch"/>.</para>
        </summary>
        <param name="toMatch">
          <para>The string to find.</para>
        </param>
        <returns>
          <para>A collection of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.SearchMatch"/> objects.</para>
        </returns>
        <remarks>
          <para>The search string can be a literal, a regular expression, or a combination of both. Since the string can contain regular expressions, use a  backslash to escape special characters. Special characters are <c>[\^$.|?*+(){\</c>}. The collection this method returns implements the .NET IEnumerable interface that can be used to iterate over the search results.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Required for IEnumerator
          using System.Collections;

          WordApplication app = new WordAppliation();
          Document doc = app.Open(@"c:\myDoc.doc");

          //--- Search a document for social security numbers, or any series of
          //--- nine digits, and remove them. The question mark after each dash
          //--- makes the presence of the dash optional.
          IEnumerator searcherator = (doc.Search(@"\d\d\d-?\d\d-?\d\d\d\d")).GetEnumerator();
          while (searcherator.MoveNext())
          {
               SearchMatch match = (SearchMatch)searcherator.Current;
               match.Element.DeleteElement();
          }
        </code>
            <br/>
            <code>

          '--- Required for IEnumerator
          Imports System.Collections

          Dim app As New WordAppliation()
          Dim doc As Document = app.Open("c:\myDoc.doc")

          '--- Search a document for social security numbers, or any series of
          '--- nine digits, and remove them. The question mark after each dash
          '--- makes the presence of the dash optional.
          Dim searcherator As IEnumerator = (doc.Search("\d\d\d-?\d\d-?\d\d\d\d")).GetEnumerator()
          While searcherator.MoveNext()
               Dim match As SearchMatch = searcherator.Current
               match.Element.DeleteElement()
          End While
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Object[][])">
            <Doc>
        <summary>
          <para>Imports the data from a 2-dimensional array into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of the current element in the document.</para>
        </summary>
        <param name="data">
          <para>A 2-dimensional array from which to import the data from.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dataArray);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dataArray)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Object[][],System.String[],SoftArtisans.OfficeWriter.WordWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports a set of data from an array of column names and a 2-dimensional array of data to a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> created at the point of the current element in the document. Also accepts a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object defining any options for this data import.</para>
        </summary>
        <param name="data">
          <para>A 2-dimensional array from which to import the data from.</para>
        </param>
        <param name="columnNames">
          <para>An array of column names to import.</para>
        </param>
        <param name="properties">
          <para>Import properties for this data import, including max rows, max columns, column filter, etc.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dataArray, colArray, oDataImportProperties);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dataArray, colArray, oDataImportProperties)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.DataTable)">
            <Doc>
        <summary>
          <para>Imports data from a <see cref="T:System.Data.DataTable"/> into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> in the document.</para>
        </summary>
        <param name="data">
          <para>Contains the data to be imported.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dt);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dt)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.DataTable,SoftArtisans.OfficeWriter.WordWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a <see cref="T:System.Data.DataTable"/> into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> in the document. Also accepts a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object that contains the options for importing.</para>
        </summary>
        <param name="data">
          <para>Contains the data to be imported.</para>
        </param>
        <param name="props">
          <para>Import properties for this data import, including max rows, max columns, column filter, etc.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dt, importProps);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dt, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.DataView)">
            <Doc>
        <summary>
          <para>Imports data from a <see cref="T:System.Data.DataView"/> into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> in the document.</para>
        </summary>
        <param name="data">
          <para>Contains the data to be imported.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dv);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dv)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.DataView,SoftArtisans.OfficeWriter.WordWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports data from a <see cref="T:System.Data.DataView"/> into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> in the document. Also accepts a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object that contains the options for importing.</para>
        </summary>
        <param name="data">
          <para>Contains the data to be imported.</para>
        </param>
        <param name="props">
          <para>Import properties for this data import, including max rows, max columns, column filter, etc.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dv, importProps);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dv, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Object[0:,0:])">
            <Doc>
        <summary>
          <para>Imports the data from a rectangular array into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of the current element in the document.</para>
        </summary>
        <param name="data">
          <para>The rectangular array to import the data from.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(rectArray);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(rectArray)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Object[0:,0:],System.String[],SoftArtisans.OfficeWriter.WordWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports the data from a rectangular array into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of the current element in the document. Also accepts an array of column names and a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object with the import options.</para>
        </summary>
        <param name="data">
          <para>The rectangular array to import the data from.</para>
        </param>
        <param name="columnNames">
          <para>Array of column names, corresponding to columns of data in the rectangular array.</para>
        </param>
        <param name="props">
          <para>Import properties for this data import, including max rows, max columns, column filter, etc.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(rectArray, colArray, importProps);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(rectArray, colArray, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.IDataReader)">
            <Doc>
        <summary>
          <para>Imports the data from a DataReader into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of the current element in the document.</para>
        </summary>
        <param name="data">
          <para>DataReader to import the data from.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dr);</code>
            <br/>
            <code>
Dim tbl As Table = e.ImportData(dr)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Data.IDataReader,SoftArtisans.OfficeWriter.WordWriter.DataImportProperties)">
            <Doc>
        <summary>
          <para>Imports the data from a DataReader into a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point of the current element in the document. Also accepts a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object that contains the import options.</para>
        </summary>
        <param name="data">
          <para>DataReader to import the data from.</para>
        </param>
        <param name="props">
          <para>Import properties for this data import, including max rows, max columns, column filter, etc.</para>
        </param>
        <returns>
          <para>The <c>Table</c> that the data was imported into.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = e.ImportData(dr, importProps);</code>
            <br/>
            <code>
Dim tbl As table = e.ImportData(dr, importProps)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.Start">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents the absolute character index of the start of this Element.</para>
        </summary>
        <example>
          <para>
            <code>

          int start = e.Start;
        </code>
            <br/>
            <code>

          Dim start As Integer = e.Start
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.Text">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that represents the text for this Element.</para>
        </summary>
        <example>
          <para>
            <code>

          string text = e.Text;
        </code>
            <br/>
            <code>

          Dim text As String = e.Text
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.Length">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents the number of characters in this Element.</para>
        </summary>
        <example>
          <para>
            <code>

          int length = e.Length;
        </code>
            <br/>
            <code>

          Dim length As Integer = e.Length
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.Children">
            <Doc>
        <summary>
          <para>Returns a collection of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> objects that represents all the direct children of the current element.</para>
        </summary>
        <example>
          <para>
            <code>

          Element[] eArray = e.Children;
        </code>
            <br/>
            <code>

          Dim eArray As Element() = e.Children
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.ElementType">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element.Type"/> object that represents the type of this element.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType"/> value specifies the type of break to insert <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertBreakBefore(SoftArtisans.OfficeWriter.WordWriter.Element.BreakType)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertBreakAfter(SoftArtisans.OfficeWriter.WordWriter.Element.BreakType)"/> a region in the document.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.Column">
            <Doc>
          <summary>Column break </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.Page">
            <Doc>
          <summary>Page </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.TextWrap">
            <Doc>
          <summary>Text wrapping break </summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.BreakType&quot;]/Member[@signature=&quot;Element.BreakType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.BreakType&quot;]/Member[@signature=&quot;Element.BreakType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.BreakType&quot;]/Member[@signature=&quot;Element.BreakType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.BreakType&quot;]/Member[@signature=&quot;Element.BreakType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.BreakType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.BreakType&quot;]/Member[@signature=&quot;Element.BreakType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Element.Type">
            <Doc>
        <summary>
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> represents a region of the document that can be edited.  An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element.Type"/> value specifies the type of region an <c>Element</c> object represents.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Bookmark">
            <Doc>
          <summary>A bookmark</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.CharacterRun">
            <Doc>
          <summary>A contiguous run of characters in the document, all of which have the same formatting</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Document">
            <Doc>
          <summary>The whole Word document</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Field">
            <Doc>
          <summary>A generic representation of a field that encompasses many objects in Word, including merge fields, hyperlinks, and table of content entries.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.HeaderFooter">
            <Doc>
          <summary>A document's header and footer</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Hyperlink">
            <Doc>
          <summary>A hyperlink</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.InlineImage">
            <Doc>
          <summary>An inline image ( Word supports jpg, png, bmp, and gif images)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.List">
            <Doc>
          <summary>A numbered or bulleted list</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.ListEntry">
            <Doc>
          <summary>A list item</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.MergeField">
            <Doc>
          <summary>A merge field (a placeholder for data imported from a database)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Paragraph">
            <Doc>
          <summary>A paragraph in the Word document (a block of text that ends with a carriage return)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Section">
            <Doc>
          <summary>A major section in a document, like a chapter in a book</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Table">
            <Doc>
          <summary>A table</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.TableCell">
            <Doc>
          <summary>A single cell in a table</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Unspecified">
            <Doc>
          <summary>Unspecified</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Type.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Type&quot;]/Member[@signature=&quot;Element.Type.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Type.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Type&quot;]/Member[@signature=&quot;Element.Type.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Type&quot;]/Member[@signature=&quot;Element.Type.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Element.Type.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Type&quot;]/Member[@signature=&quot;Element.Type.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Element.Type.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Element&quot;]/Member[@signature=&quot;Element.Type&quot;]/Member[@signature=&quot;Element.Type.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Bookmark.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Bookmark&quot;]/Member[@signature=&quot;Bookmark.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Bookmark.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Bookmark&quot;]/Member[@signature=&quot;Bookmark.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Bookmark.Name">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> representing the name of this bookmark.</para>
        </summary>
        <example>
          <para>
            <code>
string bmarkName = bmark.Name;</code>
            <br/>
            <code>
Dim bmarkName As String = bmark.Name</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BookmarkFirstDescriptor">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Jan 5, 2004
            Time: 11:42:17 AM
            To change this template use Options | File Templates.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.firstColumn">
            <summary>
            If <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.HasColumns"/> is <c>false</c>, then this is 0.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.lastColumn">
            <summary>
            If <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.HasColumns"/> is <c>false</c>, then this is 0.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.WriteStartTag(System.Xml.XmlWriter)">
            <summary>
            Writes out the start tag to the destination xml
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.WriteEndTag(System.Xml.XmlWriter)">
            <summary>
            Writes out the end tag to the destination xml
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.CompareTo(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation)">
            <summary>
            A BookmarkInfo is considered less, if it is more nested
            </summary>
            <param name="newInfo"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.FirstColumn">
            <summary>
            If <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.HasColumns"/> is <c>false</c>, then this is 0.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.LastColumn">
            <summary>
            If <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation.HasColumns"/> is <c>false</c>, then this is 0.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BookmarkModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ElementModel">
            <summary> This class is the central class of the HWPF object model. All properties that
            apply to a range of characters in a Word document extend this class.
            
            It is possible to insert text and/or properties at the beginning or end of a
            range.
            
            Ranges are only valid if there hasn't been an insert in a prior Range since
            the Range's creation. Once an element (text, paragraph, etc.) has been
            inserted into a Range, subsequent Ranges become unstable.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._changeListeners">
            <summary>The listeners for this range </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._characters">
            <summary>All CharacterRuns that belong to the document this Range belongs to. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._charEnd">
            <summary>The end index in the characterRuns list for this Range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._charRangeFound">
            <summary>Have we loaded the characterRun indexes yet. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._charStart">
            <summary>The start index in the characterRuns list for this Range </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._doc">
            <summary>The document this range belongs to. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._end">
            <summary>The ending character offset of this range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._paragraphs">
            <summary>All paragraphs that belong to the document this Range belongs to. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._parEnd">
            <summary>The end index in the paragraphs list for this Range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._parRangeFound">
            <summary>Have we loaded the paragraph indexes yet. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._parStart">
            <summary>The start index in the paragraphs list for this Range </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._sectionEnd">
            <summary>The end index in the sections list for this Range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._sectionRangeFound">
            <summary>Have we loaded the section indexes yet </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._sections">
            <summary>All sections that belong to the document this Range belongs to. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._sectionStart">
            <summary>The start index in the sections list for this Range </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._start">
            <summary>The starting character offset of this range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._subDocType">
            <summary>The sub document this range belongs to </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._tableLevel">
            <summary>This is used to determine the level of table nesting for this range. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel._textRangeFound">
            <summary>Have we loaded the Text indexes yet </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ElementModel.textPieceTable">
            <summary>All text pieces that belong to the document this Range belongs to. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.#ctor">
            <summary> Only used by the document range. Needs a way in before the lists are
            created.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.#ctor(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument,System.Int32,System.Int32)">
            <summary> Used to construct a Range from a document. This is generally used to create
            a Range that spans the whole document.
            
            </summary>
            <param name="start">Starting character offset of the range.
            </param>
            <param name="end">Ending character offset of the range.
            </param>
            <param name="doc">The HWPFDocument the range is based on.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.#ctor(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <summary> Used to create Ranges that are children of other Ranges.
            
            </summary>
            <param name="start">Starting character offset of the range.
            </param>
            <param name="end">Ending character offset of the range.
            </param>
            <param name="parent">The parent this range belongs to.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.#ctor(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel,System.Boolean)">
            <summary> Used to create Ranges that are children of other Ranges.
            
            </summary>
            <param name="start">Starting character offset of the range.
            </param>
            <param name="end">Ending character offset of the range.
            </param>
            <param name="parent">The parent this range belongs to.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.#ctor(System.Int32,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <summary> Constructor used to build a Range from indexes in one of its internal
            lists.
            
            </summary>
            <param name="startIdx">The starting index in the list.
            </param>
            <param name="endIdx">The ending index in the list.
            </param>
            <param name="idxType">The list type.
            </param>
            <param name="parent">The parent Range this range belongs to.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up character runs if
            they span special characters like end of table cell markers or end of paragraph markers
            </remarks>
            <param name="startIndex">The index in the document of the first character to include</param>
            <param name="endIndex">The index in the document of the first character not to include</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.addChangeListener(SoftArtisans.OfficeWriter.WordWriter.RangeChangeListener)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>The reason that this just returns a node rather than a list, is because 
            merging two linked lists is O(n), but with nodes we can get it to be o(1)</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters, and potentially duplicates. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.text">
            <summary> Gets the text that this Range contains.
            
            </summary>
            <returns> The text for this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.text(System.Int32,System.Int32)">
            <summary> Used to get the text using absolute offsets in the document that contains
            this range. This function is useful for getting the text contained in
            subelements of this range. CharacterRuns will have functionality that is
            determined by the actual text they contain.
            
            </summary>
            <param name="start">The absolute offset of the start of the text.
            </param>
            <param name="end">The absolute offset of the end of the text.
            </param>
            <returns> The String representing the text starting at start and ending at
            end.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.numSections">
            <summary> Used to get the number of sections in a range. If this range is smaller
            than a section, it will return 1 for its containing section.
            
            </summary>
            <returns> The number of sections in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.numParagraphs">
            <summary> Used to get the number of paragraphs in a range. If this range is smaller
            than a paragraph, it will return 1 for its containing paragraph.
            
            </summary>
            <returns> The number of paragraphs in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.numCharacterRuns">
            <returns> The number of characterRuns in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(System.String)">
            <summary> Inserts text into the front of this range.
            
            </summary>
            <param name="text">The text to insert
            </param>
            <returns> The character run that text was inserted into.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(System.String,System.Boolean)">
            <summary> Inserts text onto the end of this range
            
            </summary>
            <param name="text">The text to insert
            </param>
            <param name="pushback">true if the insertion point should actually be 1 before the end of
            this range. This is for paragraphs, table cells and other ranges
            that end with a non-printable character.
            </param>
            <returns> The character run the text was inserted into.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.fireTextInserted(System.Int32,System.Int32,System.Boolean)">
            <param name="insertIndex">
            </param>
            <param name="i">
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.fireTextDeleted(System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.fireParagraphInserted(System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.fireSectionInserted(System.Int32,System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,System.String)">
            <summary> Inserts text into the front of this range and it gives that text the
            CharacterProperties specified in props.
            
            </summary>
            <param name="text">The text to insert.
            </param>
            <param name="props">The CharacterProperties to give the text.
            </param>
            <returns> A new CharacterRun that has the given text and properties and is n
            ow a part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(System.SByte[],System.Int32)">
            <summary> Inserts a picture onto the end of this range and gives that text the
            CharacterProperties specified in props.
            
            </summary>
            <param name="text">The text to insert.
            </param>
            <param name="props">The CharacterProperties to give the text.
            </param>
            <returns> A new CharacterRun that has the given text and properties and is n
            ow a part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,System.String)">
            <summary> Inserts text onto the end of this range and gives that text the
            CharacterProperties specified in props.
            
            </summary>
            <param name="text">The text to insert.
            </param>
            <param name="props">The CharacterProperties to give the text.
            </param>
            <returns> A new CharacterRun that has the given text and properties and is n
            ow a part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfterForTable(SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,System.String)">
            <summary> Inserts text onto the end of this range and gives that text the
            CharacterProperties specified in props.
            
            </summary>
            <param name="text">The text to insert.
            </param>
            <param name="props">The CharacterProperties to give the text.
            </param>
            <returns> A new CharacterRun that has the given text and properties and is n
            ow a part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32)">
            <summary> Inserts and empty paragraph into the front of this range.
            
            </summary>
            <param name="props">The properties that the new paragraph will have.
            </param>
            <param name="styleIndex">The index into the stylesheet for the new paragraph.
            </param>
            <returns> The newly inserted paragraph.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32,System.String)">
            <summary> Inserts a paragraph into the front of this range. The paragraph will
            contain one character run that has the default properties for the
            paragraph's style.
            
            It is necessary for the text to end with the character '\r'
            
            </summary>
            <param name="props">The paragraph's properties.
            </param>
            <param name="styleIndex">The index of the paragraph's style in the style sheet.
            </param>
            <param name="text">The text to insert.
            </param>
            <returns> A newly inserted paragraph.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32)">
            <summary> Inserts and empty paragraph into the end of this range.
            
            </summary>
            <param name="props">The properties that the new paragraph will have.
            </param>
            <param name="styleIndex">The index into the stylesheet for the new paragraph.
            </param>
            <returns> The newly inserted paragraph.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32,System.String)">
            <summary> Inserts a paragraph into the end of this range. The paragraph will contain
            one character run that has the default properties for the paragraph's
            style.
            
            It is necessary for the text to end with the character '\r'
            
            </summary>
            <param name="props">The paragraph's properties.
            </param>
            <param name="styleIndex">The index of the paragraph's style in the style sheet.
            </param>
            <param name="text">The text to insert.
            </param>
            <returns> A newly inserted paragraph.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertParagraphsForTable(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32,System.String,SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl,System.Int32,System.Int32,System.Boolean)">
            <summary> Inserts a paragraph that is part of a table structure at the end of this range. 
            The paragraph will contain one character run that has the default properties 
            for the paragraph's style.
            
            It is necessary for the text to end with the character '\r'
            
            </summary>
            <param name="paraProps">The paragraph's properties.
            </param>
            <param name="styleIndex">The index of the paragraph's style in the style sheet.
            </param>
            <param name="text">The text to insert.
            </param>
            <returns> A newly inserted paragraph.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(System.String,System.String,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(System.String,System.String,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.createBookmarkInternal(System.String)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.createEmptyParagraph(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32,System.Boolean)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.createEmptyCharacterRun(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertTextAt(System.String,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertTextAtEnd(System.String,System.Boolean)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertTextboxTextAtEnd(System.String,System.Boolean)">
            <summary>Add a piece of text to the end of the textbox subdocument</summary>
            
            @method.excluded
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.SectionProperties)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(SoftArtisans.OfficeWriter.WordWriter.SectionProperties)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.delete">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertBefore(SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl,System.Int32)">
            <summary> Inserts a simple table into the beginning of this range. The number of
            columns is determined by the TableProperties passed into this function.
            
            </summary>
            <param name="props">The table properties for the table.
            </param>
            <param name="rows">The number of rows.
            </param>
            <returns> The empty Table that is now part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl,System.Int32,System.Boolean)">
            <summary> Inserts a simple table into the end of this range. The number of columns is
            determined by the TableProperties passed into this function.
            
            </summary>
            <param name="tableProps">The table properties for the table.
            </param>
            <param name="rows">The number of rows.
            </param>
            <returns> The empty Table that is now part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertAfter(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,System.Int32,System.Int32,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.Element.Type)">
            <summary> Inserts a list into the beginning of this range.
            
            </summary>
            <param name="props">The properties of the list entry. All list entries are paragraphs.
            </param>
            <param name="listID">The id of the list that contains the properties.
            </param>
            <param name="level">The indentation level of the list.
            </param>
            <param name="styleIndex">The base style's index in the stylesheet.
            </param>
            <param name="index">
            </param>
            <param name="parentType">
            </param>
            <returns> The empty ListEntry that is now part of the document.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getCharacterRun(System.Int32)">
            <summary> Gets the character run at index. The index is relative to this range.
            
            </summary>
            <param name="index">The index of the character run to get.
            </param>
            <returns> The character run at the specified index in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getSection(System.Int32)">
            <summary> Gets the section at index. The index is relative to this range.
            
            </summary>
            <param name="index">The index of the section to get.
            </param>
            <returns> The section at the specified index in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getParagraph(System.Int32)">
            <summary> Gets the paragraph at index. The index is relative to this range.
            
            </summary>
            <param name="index">The index of the paragraph to get.
            </param>
            <returns> The paragraph at the specified index in this range.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.type">
            <summary> This method is used to determine the type. Handy for switch statements
            compared to the instanceof operator.
            
            </summary>
            <returns> A TYPE constant.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.setupDefaultTable(System.Boolean,System.Boolean,SoftArtisans.OfficeWriter.WordWriter.TableModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.pushbackText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.pushbackParagraphs">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getPreferredOverhang(System.Int32)">
            <summary> Used to get the indent for a table inserted in this range. This is
            overridden in child classes of Range that represent a different
            painting context. (Frames, Table Cells);
            
            </summary>
            <returns> the left indent in twips.
            </returns>
            <method.excluded>  </method.excluded>
            <summary> 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getPreferredTableWidth(System.Boolean)">
            <summary> Used to get the Width for a table inserted in this range. This is
            overridden in child classes of Range that represent a different
            painting context. (Frames, Table Cells);
            
            </summary>
            <returns> the width of the table in twips
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.initAll">
            <summary> loads all of the list indexes.</summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.limitBounds(System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.initParagraphs">
            <summary> inits the paragraph list indexes.</summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.initCharacterRuns">
            <summary> inits the character run list indexes.</summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.initSections">
            <summary> inits the section list indexes.</summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.findRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary> Used to find the list indexes of a particular property.
            
            </summary>
            <param name="rpl">A list of property nodes.
            </param>
            <param name="min">A hint on where to start looking.
            </param>
            <param name="start">The starting character offset.
            </param>
            <param name="end">The ending character offset.
            </param>
            <returns> An int array of length 2. The first int is the start index and the
            second int is the end index.
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.reset">
            <summary> resets the list indexes.</summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustModelForInsertion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> This method adjusts the document model for insertions.
            
            </summary>
            <param name="charIndex">
            </param>
            <param name="parIndex">
            </param>
            <param name="sectionIndex">
            </param>
            <param name="length">
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustModelForInsertion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             <summary>This method adjusts the document model for insertions, given a subDocType. Mostly used
            with textboxes right now.</summary>
            
            @param charIndex
            @param parIndex
            @param sectionIndex
            @param length
            @param subDocType
            @method.excluded
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustModelForTableInsertion(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> This method adjusts the document model for a table insertion.
            
            </summary>
            <param name="charIndex">
            </param>
            <param name="parIndex">
            </param>
            <param name="sectionIndex">
            </param>
            <param name="length">
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.bumpForInsert(System.Int32)">
            <summary> adjust this range after an insert happens. Assumes that the insert is
            before this range.
            
            </summary>
            <param name="length">the length to adjust for
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustForTextInsert(System.Int32,System.Int32,System.Boolean,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <summary> adjust this range after an insert happens.
            
            </summary>
            <param name="length">the length to adjust for
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustForTextDelete(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustForParagraphInsert(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.adjustForSectionInsert(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertImageAfter(System.IO.Stream)">
            <method>  paramType0=System.IO.Stream </method>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertImageBefore(System.IO.Stream)">
            <method>  paramType0=System.IO.Stream </method>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertTextboxTextAfter(System.String,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel},System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.ParagraphModel},System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources)">
            <summary>
            This inserts some textbox text to the end of the textbox subdocument. It eventually calls
            insertTextboxTextAtEnd. Both are named after insertTextAfter and insertTextAtEnd, respectively
            </summary>
            <param name="text">the text to insert</param>
            <param name="characterRuns">the list of character runs corresponding to the text in the source document</param>
            <param name="paragraphRuns">the list of paragraphs corresponding to the text in the source document</param>
            <param name="textboxStart">the cp which beings the textbox</param>
            <param name="textboxEnd">the cp which ends the textbox</param>
            <returns>a newly created array of character runs</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.importData(SoftArtisans.OfficeWriter.Shared.DataSource,SoftArtisans.OfficeWriter.WordWriter.DataImportPropertiesModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.importData(SoftArtisans.OfficeWriter.Shared.DataSource,SoftArtisans.OfficeWriter.WordWriter.AutoFormatter,SoftArtisans.OfficeWriter.WordWriter.DataImportPropertiesModel,System.Int32,System.Boolean,System.Int32,System.Int32[])">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertImageAfterInternal(System.SByte[])">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insertImageBeforeInternal(System.SByte[])">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getByteArrayFromInputStream(System.IO.Stream)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.compare(SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <summary>
            TODO: if we ever intended ElementModel to be comparable, we should put this code in the compare method
            </summary>
            <param name="model2"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.insert(SoftArtisans.OfficeWriter.WordWriter.ElementModel,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            This inserts 'element' into this at the specified location.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getIstdsFromPAPX(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.PAPX},System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.CHPX})">
             <summary>
             Each PAPX has an associated style index. (The data structure is called GrpPrlAndIstd 
             in the 2008 documentation, section 2.9.114)
            
             The style description at the index may include properties which aren't overridden by 
             the character sprms, so we need to get a list of them
             and map them to the list of CHPXs. 
             </summary>
             <param name="paragraphList">a list of PAPXs</param>
             <param name="characterList">a list of CHPXs</param>
             <returns>a list of the same size as characterList, where each element in characterList 
             would have the corresponding style ID of the returned value</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.handleCharacterRuns(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.CHPX},SoftArtisans.OfficeWriter.WordWriter.ElementModel,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources,SoftArtisans.OfficeWriter.WordWriter.WWOutputStream,System.SByte[],System.Int32,System.Int32,System.Int32,System.String,System.Collections.Generic.ICollection{SoftArtisans.OfficeWriter.WordWriter.FSPANode},System.Int16[])">
            <summary>
            Handles the character runs. Makes sure inserted character runs have the correct styles and
            checks for drawing objects which need to be inserted
            </summary>
            <param name="characterList">a list of CHPXs to iterate through</param>
            <param name="element">The source element</param>
            <param name="res"></param>
            <param name="dataOut">the output data stream</param>
            <param name="dataStream">the input data stream</param>
            <param name="parIndex">unused</param>
            <param name="offset">the offset to insert at</param>
            <param name="insertLength">unused</param>
            <param name="text">the text corresponding to the character runs</param>
            <param name="newFSPANodes">a list of shapes to add new shapes to</param>
            <param name="istds">an array of style indexes which correspond to the characterruns in the same position in characterList</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.getTextboxParagraphsSubList(System.Int32)">
            <summary>This is like getParagraphsSubList except it gets paragraphs for the textbox subdocument.
            
             This may or may not work properly. It isn't called in the code right now</summary>
            
            
            @param newStart
            @return
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.Document">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.SubDocType">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.EndInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.StartInternal">
            <summary> Gets the start of this range. This is used for internal calls to find the start.
            The reason this was created was to facilitate easier transforms to dotNet style
            methods. 
            
            </summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.BlockElements">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Bookmarks">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Bookmarks.getRange(System.String)">
            <summary> Returns an int array of length 2 where the int at the first index is the
            start of the bookmark and the int at the second bookmark is the end.
            </summary>
            <param name="bookmarkName">
            </param>
            <returns> int array of length 2
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Bookmarks.validateName(System.String)">
            <param name="name">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.BookmarkTagTableInformation">
            <summary>
            All the information that a Bookmark Tag has when inside a table.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Border">
            <Doc>
      <summary>
        <para>This class is used to specify border settings for various entities in a Word document.</para>
      </summary>
      <remarks>
        <para>You cannot create a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border"/> object using the <c>new</c> keyword. You must reference an existing Border by using either the <c>Border</c> property of the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> class or the <c>GetBorder(Border.Location)</c> method of one of the following classes: <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/>, <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section"/> or <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell"/>.</para>
        <para>The following sample gets the <c>Border</c> object for the bottom part of the upper left table cell of the first table in a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Border brdr =
               (Table)(doc.GetElements(Element.Type.Table)[0])[0, 0].GetBorder(Border.Location.Bottom);

          //--- Set Width to 1 point
          brdr.LineWidth = 8;
          brdr.Style = Border.LineStyle.Single;
        </code>
          <br/>
          <code>

          Dim app As WordApplication = New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim brdr As Border = _
               doc.GetElements(Element.Type.Table)(0)(0, 0).GetBorder(Border.Location.Bottom)

          '--- Set Width to 1 point
          brdr.LineWidth = 8
          brdr.Style = Border.LineStyle.Single
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.Color">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:System.Drawing.Color"/> object that represents the color of this border.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Color:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Color
          System.Drawing.Color borderColor = brdr.Color;

          //--- Set Color
          brdr.Color = System.Drawing.Color.Blue;
        </code>
            <br/>
            <code>

          '--- Get Color
          Dim borderColor As System.Drawing.Color = brdr.Color

          '--- Set Color
          brdr.Color = System.Drawing.Color.Blue
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.LineWidth">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the line width of this border in 1/8 points. (The maximum width is 32 points.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Width:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LineWidth
          int lineWidth = brdr.LineWidth;

          //--- Set LineWidth to 1 point
          brdr.LineWidth = 8;
        </code>
            <br/>
            <code>

          '--- Get LineWidth
          Dim lineWidth As Integer = brdr.LineWidth

          '--- Set LineWidth to 1 point
          brdr.LineWidth = 8
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.Style">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle"/> object that represents the line style of this border. (Single, thick, double, etc.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Style:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get LineStyle
          Border.LineStyle lnStyle = brdr.LineStyle;

          //--- Set LineStyle
          brdr.LineStyle = Border.LineStyle.Thick;
        </code>
            <br/>
            <code>

          '--- Get LineStyle
          Dim lnStyle As Border.LineStyle = brdr.LineStyle

          '--- Set LineStyle
          brdr.LineStyle = Border.LineStyle.Thick
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.Padding">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the space to maintain between the border and the text in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>The minimum width is 0 points and the maximum width is 32 points. Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Options button &gt; From text</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Padding
          int padding = brdr.Padding;

          //--- Set Padding to 4 points
          brdr.Padding = 80;
        </code>
            <br/>
            <code>

          '--- Get Padding
          Dim padding As Integer = brdr.Padding

          '--- Set Padding to 4 points
          brdr.Padding = 80
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.HasShadow">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not the border has a shadow effect.</para>
        </summary>
        <remarks>
          <para>This is set to false by default.</para>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Setting: &gt; Shadow</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get HasShadow
          bool hasShadow = brdr.HasShadow;

          //--- Set HasShadow
          brdr.HasShadow = true;
        </code>
            <br/>
            <code>

          '--- Get HasShadow
          Dim hasShadow As Boolean = brdr.HasShadow

          '--- Set HasShadow
          brdr.HasShadow = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.Reverse">
            <Doc>
        <summary>Sets or returns a boolean which specifies whether or not the border graphic is reversed. </summary>
        <remarks>
          <para>This only has an effect on certain line styles which are not symmetrical (for example, http://wiki.softartisans.com/display/WW8/Border.LineStyle#ThinThickSmallGap). Reversing the right and bottom graphics of certain line styles can create a "3D" effect. CharacterRuns have only one border. Paragraphs have different border parts. For borders around characterRuns, <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Border.Reverse"/> tells you whether or not the right and bottom sides of the border have reversed graphics. For borders around paragraphs, it is necessary to explicitly reverse the right and bottom sides.</para>
          <para>Reverse defaults to false which means that by default borders will appear "boxed".</para>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab &gt; Setting: &gt; Box</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get Reverse
          bool reverse = brdr.Reverse;

          //--- Set a 3D border around a character run
          Border brdr = charRun.Font.Border;
          brdr.Reverse = true;
          brdr.LineWidth = 12;
          brdr.Style = Border.LineStyle.ThinThickSmallGap;

          //--- Set a 3D border around a paragraph
          para.Formatting.GetBorder(Border.Location.Top).Style = Border.LineStyle.ThinThickSmallGap;
          para.Formatting.GetBorder(Border.Location.Top).LineWidth = 12;
          para.Formatting.GetBorder(Border.Location.Left).Style = Border.LineStyle.ThinThickSmallGap;
          para.Formatting.GetBorder(Border.Location.Left).LineWidth = 12;
          para.Formatting.GetBorder(Border.Location.Bottom).Style = Border.LineStyle.ThinThickSmallGap;
          para.Formatting.GetBorder(Border.Location.Bottom).LineWidth = 12;
          para.Formatting.GetBorder(Border.Location.Bottom).Reverse = true;
          para.Formatting.GetBorder(Border.Location.Right).Style = Border.LineStyle.ThinThickSmallGap;
          para.Formatting.GetBorder(Border.Location.Right).LineWidth = 12;
          para.Formatting.GetBorder(Border.Location.Right).Reverse = true;
        </code>
            <br/>
            <code>

          '--- Get Reverse
          Dim reverse As Boolean = brdr.Reverse

          '--- Set a 3D border around a character run
          Border brdr = charRun.Font.Border
          brdr.Reverse = True
          brdr.LineWidth = 12
          brdr.Style = Border.LineStyle.ThinThickSmallGap

          '--- Set a 3D border around a paragraph
          para.Formatting.GetBorder(Border.Location.Top).Style = Border.LineStyle.ThinThickSmallGap
          para.Formatting.GetBorder(Border.Location.Top).LineWidth = 12
          para.Formatting.GetBorder(Border.Location.Left).Style = Border.LineStyle.ThinThickSmallGap
          para.Formatting.GetBorder(Border.Location.Left).LineWidth = 12
          para.Formatting.GetBorder(Border.Location.Bottom).Style = Border.LineStyle.ThinThickSmallGap
          para.Formatting.GetBorder(Border.Location.Bottom).LineWidth = 12
          para.Formatting.GetBorder(Border.Location.Bottom).Reverse = True
          para.Formatting.GetBorder(Border.Location.Right).Style = Border.LineStyle.ThinThickSmallGap
          para.Formatting.GetBorder(Border.Location.Right).LineWidth = 12
          para.Formatting.GetBorder(Border.Location.Right).Reverse = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle">
            <Doc>
        <summary>
          <para>Used to specify a line style for borders.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DashDotStroked">
            <Doc>
          <summary>Dash-dot-stroked</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DashLargeGap">
            <Doc>
          <summary>Dashed line with large gaps</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DashSmallGap">
            <Doc>
          <summary>Dashed line with small gaps between the dashes</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Dot">
            <Doc>
          <summary>Dotted line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DotDash">
            <Doc>
          <summary>Dot-dash line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DotDotDash">
            <Doc>
          <summary>Dot-dot-dash line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Double">
            <Doc>
          <summary>Double line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.DoubleWave">
            <Doc>
          <summary>Two wavy lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Emboss3d">
            <Doc>
          <summary>Line with 3-dimensional embossed effect</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Engrave3d">
            <Doc>
          <summary>Line with 3-dimensional engraved effect</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Hairline">
            <Doc>
          <summary>Very thin line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.None">
            <Doc>
          <summary>No line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Single">
            <Doc>
          <summary>Single line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Thick">
            <Doc>
          <summary>Thick line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThickThinLargeGap">
            <Doc>
          <summary>Thick line over thin line with a large gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThickThinMediumGap">
            <Doc>
          <summary>Thick line over thin line with a medium gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThickThinSmallGap">
            <Doc>
          <summary>Thick line over thin line with a small gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickLargeGap">
            <Doc>
          <summary>Thin line over thick line with a large gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickMediumGap">
            <Doc>
          <summary>Thin line over thick line with a medium gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickSmallGap">
            <Doc>
          <summary>Thin line over thick line with a small gap between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickThinLargeGap">
            <Doc>
          <summary>Thick line with thin lines above and below, and large gaps between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickThinMediumGap">
            <Doc>
          <summary>Thick line with thin lines above and below, and medium gaps between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ThinThickThinSmallGap">
            <Doc>
          <summary>Thick line with thin lines above and below, and small gaps between the lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Triple">
            <Doc>
          <summary>Triple line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Unknown">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Wave">
            <Doc>
          <summary>Wavy line</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.LineStyle.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.LineStyle&quot;]/Member[@signature=&quot;Border.LineStyle.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Border.Location">
            <Doc>
        <summary>
          <para>Used to specify the border location. Under certain circumstance it is necessary to specify the location of a border. Not all of these will apply for all circumstances.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Bar">
            <Doc>
          <summary>A border that is placed outside of text when facing pages are displayed</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Between">
            <Doc>
          <summary>
            <para>Border between conforming paragraphs.  Conforming paragraphs share the following characteristics:</para>
            <list type="bullet">
              <item>
                <description>Both have the same <see cref="T:SoftArtisans.OfficeWriter.WordWriter.AbsolutePositioning"/> attributes.</description>
              </item>
              <item>
                <description>Both have borders.</description>
              </item>
              <item>
                <description>The widths of both paragraphs are equal.</description>
              </item>
              <item>
                <description>Both paragraphs are within a table or not. </description>
              </item>
            </list>
          </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Bottom">
            <Doc>
          <summary>Bottom border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Horizontal">
            <Doc>
          <summary>All horizontal borders</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Left">
            <Doc>
          <summary>Left border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Right">
            <Doc>
          <summary>Right border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Top">
            <Doc>
          <summary>Top border</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Vertical">
            <Doc>
          <summary>All vertical borders</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.Location.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Location&quot;]/Member[@signature=&quot;Border.Location.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.Location.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Location&quot;]/Member[@signature=&quot;Border.Location.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Location&quot;]/Member[@signature=&quot;Border.Location.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Border.Location.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Location&quot;]/Member[@signature=&quot;Border.Location.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Border.Location.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Border&quot;]/Member[@signature=&quot;Border.Location&quot;]/Member[@signature=&quot;Border.Location.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.toByteArray2K3">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.toByteArray97">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode.setColor(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode.BrcType">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode.Ico24">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode.Ico97">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.setColor(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.toByteArray">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.BrcType">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.Ico24">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode2K3.Ico97">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.convertTo2K3">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.toInt">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.setColor(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.Equals(System.Object)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.BrcType">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.Empty">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.Ico24">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.BorderCode97.Ico97">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BuildableBinTable">
            <summary> Summary description for BuildableBinTable.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BuildablePLexFCs">
            <summary> BuildablePLexFCs is a base for all BuildablePlexOfFCs classes. It has only basic functionality 
            of a collection of FC Nodes, since read/write implementation is significantly different between 
            all classes..
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BuildableCHPX.buildWordRecordFKP(System.Int32)">
            <summary> builds the number of FKP records required to fit all the entry 
            from the buildable FKP
            03/03/2003 -- added aLastFinalFC and FC "linking" between FKPs
            </summary>
            <param name="aLastFinalFC">Final FC of the last FKP added to the BIN table. 
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecord.#ctor">
            <summary> default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecord.#ctor(System.Int32)">
            <summary> fixed size constructor
            creates a buffer with fixed size (for fixed size records)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecord.#ctor(System.Int32,System.IO.Stream,System.Int64)">
            <summary> Reading constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecord.read(System.IO.Stream,System.Int32)">
            <summary> reads the data from stream to record buffer</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecord.putBit(System.Int32,System.Int32,System.Boolean)">
            <summary>Sets a bit within a byte to the given value</summary>
            <param name="byteOffset">The offset of the byte to edit</param>
            <param name="offsetWithinByte">the index within that byte to set (0 is the rightmost bit, 7 
                   is the leftmost bit)</param>
            <param name="bit">whether to set the bit to 1 or 0 (true implies set the bit to 1)</param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">if the offset is outside the data range</exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.BuildableStringTable">
            <summary> Summary description for BuildableStringTable.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.BuildableWordRecordFLD.setFieldBit(System.Int32,System.Int32,System.Boolean)">
            <summary>set a bit within the given field descriptor</summary>
            <param name="index">the index of the field descriptor to edit</param>
            <param name="offsetWithinData">the bit to set (0 is the rightmost bit, 15 is the leftmost bit) <br/>
                   Note: The most significant bit is the leftmost</param>
            <param name="bit">whether to set the bit to 1 or 0 (true implies 1)</param>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">if the index is out of range</exception>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.BuiltInFonts._fontMap">
            These sequences of bytes are mostly taken from the Font Family Name (FFN) record in a word file.
            
            To add a new font, make a simple word document which uses that font,
            open a hex editor (or dump a file using the hex option in Worddump)
            look for the beginning of the record for your font. The name of each font is listed after
            the font data. It might be easiest (maybe) to look for 0x190 (bytes 0x90 0x01),
            which corresponds to the (short)400 you see below,
            then go two bytes backward, and start from there.
            
            The Font Family Name record is listed in the Word 2000 File Format document, and each parameter of Ffn()
            corresponds with a field from the Font Family Name record. Good luck!
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ByteField">
            <summary> representation of a byte (8-bit) field at a fixed location within a
            byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.FixedField`1">
            <summary> construct the FixedField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the array's valid index range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="T:System.IO.IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the array's valid index range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the FixedField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FixedField`1.Set(`0,System.SByte[])">
            <summary> set the FixedField's current value and write it to a byte array
            
            </summary>
            <param name="value">to be set
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.FixedField`1.Value">
            <summary> get the LongField's current value
            
            </summary>
            <returns> current value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32)">
            <summary> construct the ByteField with its offset into its containing
            byte array and a default value of 0
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte)">
            <summary> construct the ByteField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the ByteField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.#ctor(System.Int32,System.SByte,System.SByte[])">
            <summary> construct the ByteField with its offset into its containing
            byte array, initialize its value, and write its value to its
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range of the bte array
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="T:System.IO.IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of the byte array's range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ByteField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PropertyNode">
            <summary> Represents a lightweight node in the Trees used to store content
            properties.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CpRange">
            <summary>
            A simple class to denote anything that spans a range of CPs.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new cp range.
            </summary>
            <param name="cpStart">the start of the range (inclusive)</param>
            <param name="cpEnd">the end of the range (exclusive)</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpRange.CompareTo(System.Object)">
            <summary>
            Compare this range to another based on their start CPs
            </summary>
            <param name="o">the other range to compare with this one</param>
            <returns>0 if they both start at the same location, -1 if this range starts before
            the other, 1 if the other range starts before this one.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpRange.adjustForDelete(System.Int32,System.Int32)">
            <summary>
            Adjust for when a deletion occurs either overlapping with this node or before it.
            </summary>
            <param name="start">the start CP of the deletion</param>
            <param name="length">the number of characters deleted</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpRange.limitsAreEqual(SoftArtisans.OfficeWriter.WordWriter.CpRange)">
            <summary>
            Checks to see if the limits of this object are equal to that of another
            </summary>
            <param name="o">another range of cps</param>
            <returns><code>true</code> if the start and end of this range are the same as the 
            other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpRange.CompareByEndCp(SoftArtisans.OfficeWriter.WordWriter.CpRange,SoftArtisans.OfficeWriter.WordWriter.CpRange)">
            <summary>
            Compare this range to another based on their end CPs
            </summary>
            <param name="o">the other range to compare with this one</param>
            <returns>0 if they both end at the same location, -1 if this range starts before
            the other, 1 if the other range starts before this one.</returns>        
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CpRange.Start">
            <returns> The offset of this property's text.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CpRange.End">
            <returns> The offset of the end of this property's text.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PropertyNode.#ctor(System.Int32,System.Int32,System.Object)">
            <param name="cpStart">The start of the text for this property.
            </param>
            <param name="cpEnd">The end of the text for this property.
            </param>
            <param name="grpprl">The property description in compressed form.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CachedPropertyNode.getSprmBuf">
            @return This property's property in compressed form.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.CellRange">
            <summary>
            An object which represents a range (ie A1:B2)
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CellSpacingStruct">
            <summary> This class is used purely as a convenience when dealing with sprms for tables and table cells</summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Format.getFKPforFC(System.Int32)">
            <summary> finds FKP record for FC (file character position).
            if one is already loaded into cache, returns it.
            otherwise, reads it from file and returns it.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterFormat.createFKPTable(System.Int64)">
            <summary>  createFKPTable creates and loads existing FKP record from disk</summary>
            <returns> WordRecordFKP -- a base class
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FormatEntry">
            <summary> Base class for all Formats.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> class represents a contiguous run of characters in the document, all of which have the same formatting.</para>
      </summary>
      <remarks>
        <para>To insert a new character run into a document, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextBefore(System.String,System.Boolean)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTextAfter(System.String,System.Boolean)"/>.  To get an existing character run, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> or <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Element.Children"/> and check which elements are of type http://wiki.softartisans.com/display/WW8/Element.Type#CharacterRun.</para>
        <para>The following sample demonstrates inserting a new character run into a document and retrieving the first character run from an existing document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Insert a character run at the end of the document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          CharacterRun run = doc.InsertTextAfter("Hello world!", true);

          //--- Get the first character run of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          CharacterRun firstCharRun =
               (CharacterRun)doc.GetElements(Element.Type.CharacterRun)[0];
        </code>
          <br/>
          <code>

          '--- Insert a character run at the end of the document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim run As CharacterRun = doc.InsertTextAfter("Hello world!", True)

          '--- Get the first character run of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim firstCharRun As CharacterRun = _
               doc.GetElements(Elements.Type.CharacterRun)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;CharacterRun&quot;]/Member[@signature=&quot;CharacterRun.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;CharacterRun&quot;]/Member[@signature=&quot;CharacterRun.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.Style">
            <Doc>
        <summary>
          <para>Sets or Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the Style of this character run.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.Deleted">
            <Doc>
        <summary>
          <para>Returns a <c>boolean</c> that represents if this character run was deleted with revision tracking on.</para>
        </summary>
        <example>
          <para>
            <code>

          bool deleted = oCharacterRun.Deleted;
        </code>
            <br/>
            <code>

          Dim deleted As Boolean = oCharacterRun.Deleted
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.New">
            <Doc>
        <summary>
          <para>Returns a <c>boolean</c> that represents if this character run was added while revision tracking was turned on.</para>
        </summary>
        <example>
          <para>
            <code>

          bool newRun = oCharacterRun.New;
        </code>
            <br/>
            <code>

          Dim newRun As Boolean = oCharacterRun.New
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.DeletedBy">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that represents the name of the author who deleted the text in this character run (if revision tracking was on when it was deleted -- Deleted returns true).</para>
        </summary>
        <example>
          <para>
            <code>

          string deletedBy = oCharacterRun.DeletedBy;
        </code>
            <br/>
            <code>

          Dim deletedBy As String = oCharacterRun.DeletedBy
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.DeletedTime">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object that represents the date and time the text in this character run was deleted (if revision tracking was on when it was deleted --  Deleted returns true).</para>
        </summary>
        <example>
          <para>
            <code>

          DateTime deletedTime = oCharacterRun.DeletedTime;
        </code>
            <br/>
            <code>

          Dim deletedTime As DateTime = oCharacterRun.DeletedTime
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.ModifiedBy">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that represents the name of the author who inserted the text in this character run (if revision tracking was on when it was modified).</para>
        </summary>
        <example>
          <para>
            <code>

          string modifiedBy = oCharacterRun.ModifiedBy;
        </code>
            <br/>
            <code>

          Dim modifiedBy As String = oCharacterRun.ModifiedBy
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.ModifiedTime">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object that represents the date and time the text in this character run was inserted (if revision tracking was on when it was modified).</para>
        </summary>
        <example>
          <para>
            <code>

          DateTime modifiedTime = oCharacterRun.ModifiedTime;
        </code>
            <br/>
            <code>

          Dim modifiedTime As DateTime = oCharacterRun.ModifiedTime
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.PropertiesChangedBy">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that represents the name of the author who modified the properties of this character run.</para>
        </summary>
        <example>
          <para>
            <code>

          string propChangedBy = oCharacterRun.PropertiesChangedBy;
        </code>
            <br/>
            <code>

          Dim propChangedBy As String = oCharacterRun.PropertiesChangedBy
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.PropertiesChangedTime">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object that represents the date and time the properties of this character run were modified.</para>
        </summary>
        <example>
          <para>
            <code>

          DateTime propChangedTime = oCharacterRun.PropertiesChangedTime;
        </code>
            <br/>
            <code>

          Dim propChangedTime As DateTime = oCharacterRun.PropertiesChangedTime
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRun.Font">
            <Doc>
        <summary>
          <para>Sets or returns a font for the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/>.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get Font
          Font fnt = charRun.Font;

          //--- Set Font
          charRun.Font = fnt
        </code>
            <br/>
            <code>

          '--- Get Font
          Dim oFont As Font = charRun.Font

          '--- Set Font
          charRun.Font = fnt
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel">
            <summary> This class represents a run of text that share common properties.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FontModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.#ctor(SoftArtisans.OfficeWriter.WordWriter.CHPX,System.Int16,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <param name="chpx">The chpx this object is based on.
            </param>
            <param name="ss">The stylesheet for the document this run belongs to.
            </param>
            <param name="istd">The style index if this run's base style.
            </param>
            <param name="parent">The parent range of this character run (usually a paragraph).
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.Clone">
            <summary> Used to create a deep copy of this object.
            
            </summary>
            <returns> A deep copy.
            </returns>
            <throws>  CloneNotSupportedException </throws>
            <summary>           never
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.type">
            <summary> Here for runtime type determination using a switch statement convenient.
            
            </summary>
            <returns> TYPE_CHARACTER
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>This ignores the any special characters in this character run.
            Note: this is incredibly prone to creating duplicates with other elements, such as 
            images and fields.</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up character runs if
            they span special characters like end of table cell markers or end of paragraph markers
            </remarks>
            <param name="startIndex">The index in the document of the first character to include</param>
            <param name="endIndex">The index in the document of the first character not to include</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.defaultHyperlink">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.addSprmsFromStyles(SoftArtisans.OfficeWriter.WordWriter.StyleSheet,SoftArtisans.OfficeWriter.WordWriter.StyleSheet,System.Collections.Generic.IDictionary{System.Int32,System.Nullable{System.Int16}})">
            <summary>Add formatting differences between two styles to this run. This is used to take
            new styles from
            fromStyle that aren't in toStyle and add them to the character run</summary>
            
            <param name="toStyle">the current style of the character run</param>
            <param name="fromStyle">the style whose properties you want</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel.TextColor">
            <value> The ico24 field for the CHP record.
            </value>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SprmUncompressor.getFlag(System.Int32)">
            <summary> Converts an int into a boolean. If the int is non-zero, it returns true.
            Otherwise it returns false.
            
            </summary>
            <param name="x">The int to convert.
            
            </param>
            <returns> A boolean whose value depends on x.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterSprmCompressor.compressCharacterProperty(SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,System.Boolean)">
            <summary>
            
            </summary>
            <param name="newCHP"></param>
            <param name="oldCHP"></param>
            <param name="inStyleSheet">If <paramref name="inStyleSheet"/> is <c>true</c>, the following sprms are not permitted:
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCFSpecVanish"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCIstd"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCIstdPermute"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCPlain"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCMajority"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCDispFldRMark"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCIdslRMarkDel"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCLbcCRJ"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCPbiIBullet"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCPbiGrf"/> <br/>
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.SprmConstants.SprmCCnf"/> <br/></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterSprmUncompressor.uncompressCHP(SoftArtisans.OfficeWriter.WordWriter.StyleSheet,System.Int16,System.SByte[],System.Int32,System.Collections.Generic.IDictionary{System.Int32,System.Nullable{System.Int16}})">
            <summary>
            
            </summary>
            <param name="sheet"></param>
            <param name="istd"></param>
            <param name="grpprl"></param>
            <param name="offset"></param>
            <param name="istdMap">A map from the styles in the document that this character run came from to the given
            style sheet. or null</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterSprmUncompressor.unCompressCHPOperation(SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,SoftArtisans.OfficeWriter.WordWriter.FontModelImpl,SoftArtisans.OfficeWriter.WordWriter.SprmOperation)">
            <summary> Used in decompression of a chpx. This performs an operation defined by
            a single sprm.
            
            </summary>
            <param name="oldCHP">The base CharacterProperties.
            </param>
            <param name="newCHP">The current CharacterProperties.
            </param>
            <param name="operand">The operand defined by the sprm (See Word file format spec)
            </param>
            <param name="param">The parameter defined by the sprm (See Word file format spec)
            </param>
            <param name="varParam">The variable length parameter defined by the sprm. (See
            Word file format spec)
            </param>
            <param name="grpprl">The entire chpx that this operation is a part of.
            </param>
            <param name="offset">The offset in the grpprl of the next sprm
            </param>
            <param name="styleSheet">The StyleSheet for this document.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CharacterSprmUncompressor.getFlag(System.Int32)">
            <summary> Converts an int into a boolean. If the int is non-zero, it returns true.
            Otherwise it returns false.
            
            </summary>
            <param name="x">The int to convert.
            
            </param>
            <returns> A boolean whose value depends on x.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Child">
            <summary> This interface defines methods for finding and setting sibling
            Property instances
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.getNextChild">
            <summary> Get the next Child, if any
            
            </summary>
            <returns> the next Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.getPreviousChild">
            <summary> Get the previous Child, if any
            
            </summary>
            <returns> the previous Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Child.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType">
            <summary> Character Properties.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Chse">
            <summary> Get the chse field for the CHP record.</summary>
            <summary> Set the chse field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Format_flags">
            <summary> Get the format_flags field for the CHP record.</summary>
            <summary> Set the format_flags field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FSpecVanish">
            <summary> Get the fSpecVanish field for the CHP record.</summary>
            <summary> Set the fSpecVanish field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FtcAscii">
            <summary> Get the ftcAscii field for the CHP record.</summary>
            <summary> Set the ftcAscii field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FtcFE">
            <summary> Get the ftcFE field for the CHP record.</summary>
            <summary> Set the ftcFE field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FtcOther">
            <summary> Get the ftcOther field for the CHP record.</summary>
            <summary> Set the ftcOther field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FtcBi">
            <summary> Get the ftcBi field for the CHP record.</summary>
            <summary> Set the ftcBi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Hps">
            <summary> Get the hps field for the CHP record.</summary>
            <summary> Set the hps field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.HpsAsci">
            <summary> Get the hpsAsci field for the CHP record.</summary>
            <summary> Set the hpsAsci field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.HpsFE">
            <summary> Get the hpsFE field for the CHP record.</summary>
            <summary> Set the hpsFE field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.HpsBi">
            <summary> Get the hpsBi field for the CHP record.</summary>
            <summary> Set the hpsBi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DxaSpace">
            <summary> Get the dxaSpace field for the CHP record.</summary>
            <summary> Set the dxaSpace field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Iss">
            <summary> Get the iss field for the CHP record.</summary>
            <summary> Set the iss field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Kul">
            <summary> Get the kul field for the CHP record.</summary>
            <summary> Set the kul field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.CvUl">
            <summary> Get the cvUl field for the CHP record.</summary>
            <summary> Set the cvUl field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Ico24">
            <summary> Get the ico24 field for the CHP record.
            NOTE: This probably shouldn't be virtual, because it's misleading to do something different
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Ico">
            <summary> Get the ico field for the CHP record.</summary>
            <summary> Set the ico field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IcoBi">
            <summary> Get the icoBi field for the CHP record.</summary>
            <summary> Set the icoBi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.PctCharWidth">
            <summary> Get the pctCharWidth field for the CHP record.</summary>
            <summary> Set the pctCharWidth field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.HpsPos">
            <summary> Get the hpsPos field for the CHP record.</summary>
            <summary> Set the hpsPos field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.LidDefault">
            <summary> Get the lidDefault field for the CHP record.</summary>
            <summary> Set the lidDefault field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.LidFE">
            <summary> Get the lidFE field for the CHP record.</summary>
            <summary> Set the lidFE field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.LidBi">
            <summary> Get the lidBi field for the CHP record.</summary>
            <summary> Set the lidBi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IdctHint">
            <summary> Get the idctHint field for the CHP record.</summary>
            <summary> Set the idctHint field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.WCharScale">
            <summary> Get the wCharScale field for the CHP record.</summary>
            <summary> Set the wCharScale field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FcPic">
            <summary> Get the fcPic field for the CHP record.</summary>
            <summary> Set the fcPic field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FcObj">
            <summary> Get the fcObj field for the CHP record.</summary>
            <summary> Set the fcObj field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.LTagObj">
            <summary> Get the lTagObj field for the CHP record.</summary>
            <summary> Set the lTagObj field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IbstRMark">
            <summary> Get the ibstRMark field for the CHP record.</summary>
            <summary> Set the ibstRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IbstRMarkDel">
            <summary> Get the ibstRMarkDel field for the CHP record.</summary>
            <summary> Set the ibstRMarkDel field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DttmRMark">
            <summary> Get the dttmRMark field for the CHP record.</summary>
            <summary> Set the dttmRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DttmRMarkDel">
            <summary> Get the dttmRMarkDel field for the CHP record.</summary>
            <summary> Set the dttmRMarkDel field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Istd">
            <summary> Get the istd field for the CHP record.</summary>
            <summary> Set the istd field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.BaseIstd">
            <summary> Get the baseIstd field for the CHP record.</summary>
            <summary> Set the baseIstd field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FtcSym">
            <summary> Get the ftcSym field for the CHP record.</summary>
            <summary> Set the ftcSym field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.XchSym">
            <summary> Get the xchSym field for the CHP record.</summary>
            <summary> Set the xchSym field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IdslRMReason">
            <summary> Get the idslRMReason field for the CHP record.</summary>
            <summary> Set the idslRMReason field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IdslReasonDel">
            <summary> Get the idslReasonDel field for the CHP record.</summary>
            <summary> Set the idslReasonDel field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Hresi">
            <summary> Get the hresi field for the CHP record.</summary>
            <summary> Set the hresi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.HpsKern">
            <summary> Get the hpsKern field for the CHP record.</summary>
            <summary> Set the hpsKern field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FPropMark">
            <summary> Get the fPropMark field for the CHP record.</summary>
            <summary> Set the fPropMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IbstPropRMark">
            <summary> Get the ibstPropRMark field for the CHP record.</summary>
            <summary> Set the ibstPropRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DttmPropRMark">
            <summary> Get the dttmPropRMark field for the CHP record.</summary>
            <summary> Set the dttmPropRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.SfxtText">
            <summary> Get the sfxtText field for the CHP record.</summary>
            <summary> Set the sfxtText field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FDispFldRMark">
            <summary> Get the fDispFldRMark field for the CHP record.</summary>
            <summary> Set the fDispFldRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IbstDispFldRMark">
            <summary> Get the ibstDispFldRMark field for the CHP record.</summary>
            <summary> Set the ibstDispFldRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DttmDispFldRMark">
            <summary> Get the dttmDispFldRMark field for the CHP record.</summary>
            <summary> Set the dttmDispFldRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.XstDispFldRMark">
            <summary> Get the xstDispFldRMark field for the CHP record.</summary>
            <summary> Set the xstDispFldRMark field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Shd">
            <summary> Get the shd field for the CHP record.</summary>
            <summary> Set the shd field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Brc">
            <summary> Get the brc field for the CHP record.</summary>
            <summary> Set the brc field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.ItypFELayout">
            <summary> Get the itypFELayout field for the CHP record.</summary>
            <summary> Set the itypFELayout field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Copt">
            <summary> Get the copt field for the CHP record.</summary>
            <summary> Set the copt field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Cpg">
            <summary> Get the cpg field for the CHP record.</summary>
            <summary> Set the cpg field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.DxaFitText">
            <summary> Get the dxaFitText field for the CHP record.</summary>
            <summary> Set the dxaFitText field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.LFitTextID">
            <summary> Get the lFitTextID field for the CHP record.</summary>
            <summary> Set the lFitTextID field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Pbi">
            <summary> Get the pbi field for the CHP record.</summary>
            <summary> Set the pbi field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.RsidText">
            <summary> Get the rsidText field for the CHP record.</summary>
            <summary> Set the rsidText field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.RsidProp">
            <summary> Get the rsidProp field for the CHP record.</summary>
            <summary> Set the rsidProp field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.RsidRMDel">
            <summary> Get the rsidRMDel field for the CHP record.</summary>
            <summary> Set the rsidRMDel field for the CHP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FBold">
            <returns>  the fBold field value.
            </returns>
            <summary> Sets the fBold field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FItalic">
            <returns>  the fItalic field value.
            </returns>
            <summary> Sets the fItalic field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FRMarkDel">
            <returns>  the fRMarkDel field value.
            </returns>
            <summary> Sets the fRMarkDel field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FOutline">
            <returns>  the fOutline field value.
            </returns>
            <summary> Sets the fOutline field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FFldVanish">
            <returns>  the fFldVanish field value.
            </returns>
            <summary> Sets the fFldVanish field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FSmallCaps">
            <returns>  the fSmallCaps field value.
            </returns>
            <summary> Sets the fSmallCaps field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FCaps">
            <returns>  the fCaps field value.
            </returns>
            <summary> Sets the fCaps field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FVanish">
            <returns>  the fVanish field value.
            </returns>
            <summary> Sets the fVanish field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FRMark">
            <returns>  the fRMark field value.
            </returns>
            <summary> Sets the fRMark field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FSpec">
            <returns>  the fSpec field value.
            </returns>
            <summary> Sets the fSpec field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FStrike">
            <returns>  the fStrike field value.
            </returns>
            <summary> Sets the fStrike field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FObj">
            <returns>  the fObj field value.
            </returns>
            <summary> Sets the fObj field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FShadow">
            <returns>  the fShadow field value.
            </returns>
            <summary> Sets the fShadow field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FLowerCase">
            <returns>  the fLowerCase field value.
            </returns>
            <summary> Sets the fLowerCase field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FData">
            <returns>  the fData field value.
            </returns>
            <summary> Sets the fData field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FOle2">
            <returns>  the fOle2 field value.
            </returns>
            <summary> Sets the fOle2 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FEmboss">
            <returns>  the fEmboss field value.
            </returns>
            <summary> Sets the fEmboss field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FImprint">
            <returns>  the fImprint field value.
            </returns>
            <summary> Sets the fImprint field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FDStrike">
            <returns>  the fDStrike field value.
            </returns>
            <summary> Sets the fDStrike field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FUsePgsuSettings">
            <returns>  the fUsePgsuSettings field value.
            </returns>
            <summary> Sets the fUsePgsuSettings field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FBoldBi">
            <returns>  the fBoldBi field value.
            </returns>
            <summary> Sets the fBoldBi field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FComplexScripts">
            <returns>  the fComplexScripts field value.
            </returns>
            <summary> Sets the fComplexScripts field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FItalicBiDi">
            <returns>  the fItalicBiDi field value.
            </returns>
            <summary> Sets the fItalicBiDi field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FBiDi">
            <returns>  the fBiDi field value.
            </returns>
            <summary> Sets the fBiDi field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FNoProof">
            <returns>  the fNoProof field value.
            </returns>
            <summary> Sets the fNoProof field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FWebHidden">
            <returns>  the fWebHidden field value.
            </returns>
            <summary> Sets the fWebHidden field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FFitText">
            <returns>  the fFitText field value.
            </returns>
            <summary> Sets the fFitText field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FSdtVanish">
            <returns>  the fSdtVanish field value.
            </returns>
            <summary> Sets the fSdtVanish field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FDiacColor">
            <returns>  the fDiacColor field value.
            </returns>
            <summary> Sets the fDiacColor field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FHasOldProps">
            <returns>  the fHasOldProps field value.
            </returns>
            <summary> Sets the fHasOldProps field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FPropRMark">
            <returns>  the fPropRMark field value.
            </returns>
            <summary> Sets the fPropRMark field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FStdVanish">
            <returns>  the fStdVanish field value.
            </returns>
            <summary> Sets the fStdVanish field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Ysr">
            <returns>  the ysr field value.
            </returns>
            <summary> Sets the ysr field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.ChYsr">
            <returns>  the chYsr field value.
            </returns>
            <summary> Sets the chYsr field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IcoHighlight">
            <returns>  the icoHighlight field value.
            </returns>
            <summary> Sets the icoHighlight field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FHighlight">
            <returns>  the fHighlight field value.
            </returns>
            <summary> Sets the fHighlight field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.Kcd">
            <returns>  the kcd field value.
            </returns>
            <summary> Sets the kcd field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FNavHighlight">
            <returns>  the fNavHighlight field value.
            </returns>
            <summary> Sets the fNavHighlight field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FChsDiff">
            <returns>  the fChsDiff field value.
            </returns>
            <summary> Sets the fChsDiff field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FMacChs">
            <returns>  the fMacChs field value.
            </returns>
            <summary> Sets the fMacChs field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FFtcAsciSym">
            <returns>  the fFtcAsciSym field value.
            </returns>
            <summary> Sets the fFtcAsciSym field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FTNY">
            <returns>  the fTNY field value.
            </returns>
            <summary> Sets the fTNY field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FWarichu">
            <returns>  the fWarichu field value.
            </returns>
            <summary> Sets the fWarichu field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FKimimoji">
            <returns>  the fKimimoji field value.
            </returns>
            <summary> Sets the fKimimoji field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FRuby">
            <returns>  the fRuby field value.
            </returns>
            <summary> Sets the fRuby field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FLSFitText">
            <returns>  the fLSFitText field value.
            </returns>
            <summary> Sets the fLSFitText field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.IWarichuBracket">
            <returns>  the iWarichuBracket field value.
            </returns>
            <summary> Sets the iWarichuBracket field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FWarichuNoBracket">
            <returns>  the fWarichuNoBracket field value.
            </returns>
            <summary> Sets the fWarichuNoBracket field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FTNYCompress">
            <returns>  the fTNYCompress field value.
            </returns>
            <summary> Sets the fTNYCompress field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FTNYFetchTxm">
            <returns>  the fTNYFetchTxm field value.
            </returns>
            <summary> Sets the fTNYFetchTxm field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CHPAbstractType.FCellFitText">
            <returns>  the fCellFitText field value.
            </returns>
            <summary> Sets the fCellFitText field value.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CHPBinTable">
            <summary> This class holds all of the character formatting properties.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CHPBinTable.#ctor(SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter,System.SByte[],System.SByte[],System.Int32,System.Int32,System.Boolean)">
            <summary> Constructor used to read a binTable in from a Word document.
            
            </summary>
            <param name="documentStream">
            </param>
            <param name="tableStream">
            </param>
            <param name="offset">
            </param>
            <param name="size">
            </param>
            <param name="fcMin">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CHPBinTable.writeTo(SoftArtisans.OfficeWriter.WordWriter.WWFileSystem,System.Int32,SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter,System.Boolean)">
            <summary>
            Returns the number of CHP blocks that were written.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CHPFormattedDiskPage">
            <summary> Represents a CHP fkp. The style properties for paragraph and character runs
            are stored in fkps. There are PAP fkps for paragraph properties and CHP fkps
            for character run properties. The first part of the fkp for both CHP and PAP
            fkps consists of an array of 4 byte int offsets that represent a
            Paragraph's or Character run's text offset in the main stream. The ending
            offset is the next value in the array. For example, if an fkp has X number of
            Paragraph's stored in it then there are (x + 1) 4 byte ints in the beginning
            array. The number X is determined by the last byte in a 512 byte fkp.
            
            CHP and PAP fkps also store the compressed styles(grpprl) that correspond to
            the offsets on the front of the fkp. The offset of the grpprls is determined
            differently for CHP fkps and PAP fkps.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FormattedDiskPage">
            <summary> Represents an FKP data structure. This data structure is used to store the
            grpprls of the paragraph and character properties of the document. A grpprl
            is a list of sprms(decompression operations) to perform on a parent style.
            
            The style properties for paragraph and character runs
            are stored in fkps. There are PAP fkps for paragraph properties and CHP fkps
            for character run properties. The first part of the fkp for both CHP and PAP
            fkps consists of an array of 4 byte int offsets in the main stream for that
            Paragraph's or Character run's text. The ending offset is the next
            value in the array. For example, if an fkp has X number of Paragraph's
            stored in it then there are (x + 1) 4 byte ints in the beginning array. The
            number X is determined by the last byte in a 512 byte fkp.
            
            CHP and PAP fkps also store the compressed styles(grpprl) that correspond to
            the offsets on the front of the fkp. The offset of the grpprls is determined
            differently for CHP fkps and PAP fkps.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FormattedDiskPage.#ctor(System.SByte[],System.Int32)">
            <summary> Uses a 512-byte array to create a FKP</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FormattedDiskPage.getStart(System.Int32)">
            <summary> Used to get a text offset corresponding to a grpprl in this fkp.</summary>
            <param name="index">The index of the property in this FKP
            </param>
            <returns> an int representing an offset in the "WordDocument" stream
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FormattedDiskPage.getEnd(System.Int32)">
            <summary> Used to get the end of the text corresponding to a grpprl in this fkp.</summary>
            <param name="index">The index of the property in this fkp.
            </param>
            <returns> an int representing an offset in the "WordDocument" stream
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FormattedDiskPage.size">
            <summary> Used to get the total number of grrprl's stored int this FKP</summary>
            <returns> The number of grpprls in this FKP
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CHPFormattedDiskPage.#ctor(SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter,System.SByte[],System.Int32)">
            <summary> This constructs a CHPFormattedDiskPage from a raw fkp (512 byte array
            read from a Word file).
            
            </summary>
            <param name="fkp">The 512 byte array to read data from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CHPFormattedDiskPage.getGrpprl(System.Int32)">
            <summary> Gets the chpx for the character run at index in this fkp.
            
            </summary>
            <param name="index">The index of the chpx to get.
            </param>
            <returns> a chpx grpprl.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CHPX">
            <summary> Comment me
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Chunk.start">
            <summary>
            The starting bound in data of this chunk's information
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.Chunk.end">
            <summary>
            The ending bound in data of this chunk's information
            
            this is a value such that end - start = length in bytes. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Chunk.Write``1(System.Int32,``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Write count bytes from buffer at offset in buffer to the chunk, starting at positionInChunk
            </summary>
            <param name="positionInChunk"></param>
            <param name="buffer">Make sure this is either byte[] or sbyte[]</param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="stretch">true if we should push 'end' to the end of 'data' to accommodate 
            more data. We normally want this false unless there's a good reason; Write()'s
            don't push back data as they write, and they only add to the Stream if it's at
            the end of the entire stream</param>
            <returns>
            The number of bytes written
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Chunk.Insert``1(``0[],System.Int32)">
            <summary>
            
            </summary>
            <param name="dataToInsert">
            This must be small enough to fit, else an exception is thrown.
            This must be an sbyte[] or a byte[]</param>
            <param name="currentChunkPosition"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Chunk.End">
            <summary>
            The ending bound in data of this chunk's information
            
            this is a value such that end - start = length in bytes. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ClassID">
            <summary>  <p>Represents a class ID (16 bytes). Unlike other little-endian
            type the {@link ClassID} is not just 16 bytes stored in the wrong
            order. Instead, it is a double word (4 bytes) followed by two
            words (2 bytes each) followed by 8 bytes.</p>
            
            </summary>
            <author>  Rainer Klute <a
            href="mailto:klute@rainer-klute.de">&lt;klute@rainer-klute.de&gt;</a>
            </author>
            <version>  $Id: ClassID.java,v 1.10 2003/10/31 16:39:05 avik Exp $
            </version>
            <since> 2002-02-09
            </since>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ClassID.LENGTH">
            <summary><p>The number of bytes occupied by this object in the byte
            stream.</p> 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ClassID.bytes">
            <summary> <p>The bytes making out the class ID in correct order,
            i.e. big-endian.</p>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.#ctor(System.SByte[],System.Int32)">
            <summary>  <p>Creates a {@link ClassID} and reads its value from a byte
            array.</p>
            
            </summary>
            <param name="src">The byte array to read from.
            </param>
            <param name="offset">The offset of the first byte to read.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.#ctor">
            <summary>  <p>Creates a {@link ClassID} and initializes its value with
            0x00 bytes.</p>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.write(System.SByte[],System.Int32)">
            <summary> <p>Writes the class ID to a byte array in the
            little-endian.</p>
            
            </summary>
            <param name="dst">The byte array to write to.
            
            </param>
            <param name="offset">The offset within the <var>dst</var> byte array.
            
            </param>
            <exception cref="!:ArrayStoreException"> if there is not enough room for the class
            ID 16 bytes in the byte array after the <var>offset</var> position.
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.ClassID.Equals(System.Object)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.ToString">
            <summary> Returns a human readable representation of the Class ID
            in standard format <code>"{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}"</code>
            </summary>
            <returns> String representation of the Class ID represented
            by this object.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ClassID.GetHashCode">
            <seealso cref="!:Object.hashCode()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ClassID.Bytes">
            <summary> <p>Gets the bytes making out the class ID. They are returned in
            correct order, i.e. big-endian.</p>
            
            </summary>
            <returns> the bytes making out the class ID.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ClassID.Length">
            <returns> The number of bytes occupied by this object in the byte
            stream.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.SAException" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor">
            <summary> Serialization constructor.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.String)">
            <summary> Simple constructor, allowing you to set the getMessage() text of the
            exception.
            </summary>
            <param name="message">Error message text to set.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.String,System.Exception)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAException.#ctor(System.Exception)" -->
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.ColumnBinding">
            <summary>
            This binding is for data with an actual column, e.g. merge fields.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.ColumnBinding.directlyContained">
            <summary>
            If true, this field is directly contained within <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.ColumnBinding.matchingGroup"/>, with no
            other groups in between.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.ColumnBinding.DataWrapper.GetDataType">
            <summary>
            Converts the <c>OleDbType</c> to a <see cref="T:SoftArtisans.OfficeWriter.Shared.MarkerData.Types"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.ColumnlessBinding">
            <summary>
            This binding is solely for repeat blocks and next fields, which have no associated column.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ColumnWrapper">
            <summary> A wrapper for a Column of data (used to be ExcelWriter's VectorWrapper.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentRangeElement">
            <summary>
            A block for either the CommentStart or CommentEnd
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock">
            <summary>
            The base class for all blocks in the XML template.
            </summary>
            <remarks>Any subclass of this class, must call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcess(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)"/> at the end of its
            constructor.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader">
            <summary>
            The class used for reading in xml during preProcessing. 
            </summary>
            <remarks>This maintains its own path and space context. Read calls will automatically
            skip over whitespace, along with maintaining table/paragraph properties for bookmarks. 
            </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1">
            <summary>
            A class for reading in XML and maintaining a path and handling whitespace without namespaces. 
            </summary>
            <remarks>This maintains its own path and space context. </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.path">
            <summary>
            The path that the reader is currently at.
            Do not call Enter,Exit, or Pass directly on this, use:
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.EnterElementContext"/>,<see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.ExitElementContext"/>, or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.PassElementContext"/>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader{`0})">
            <summary>
            Sets up a new reader, based on an old one, to be used for SubReaders
            </summary>
            <param name="outerReader"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.IsEndTag(System.String)">
            <summary>
            Returns true if the current tag is an end tag with the given name.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.IsStartTag(System.String)">
            <summary>
            Returns true if the current tag is a start tag with the given name.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Read">
            <summary>
            Advances this reader
            </summary>
            <seealso cref="M:System.Xml.XmlReader.Read"/>
            <returns><c>true</c> if the next node was read successfully; <c>false</c> if there are no
            more nodes to read</returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.ReadBase"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.ReadBase">
            <summary>
            Advances this reader
            </summary>
            <remarks>This exists to prevent potential stack overflows (such as through calling 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.SkipWhitespace"/>.</remarks>
            <seealso cref="M:System.Xml.XmlReader.Read"/>
            <returns><c>true</c> if the next node was read successfully; <c>false</c> if there are no
            more nodes to read</returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Read"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.SkipWhitespace">
            <summary>
            Skips over any insignificant whitespace
            </summary>
            <returns><c>true</c> if the skip was successfully completed, <c>false</c>, if the end of
            the file was reached before any additional content</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.EnterElementContext">
            <summary>
            Updates the context when you enter an element,
            this should not be called on empty elements.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.ExitElementContext">
            <summary>
            Updates the context when you exit an element,
            this should not be called on empty elements
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.PassElementContext">
            <summary>
            Updates the context when you skip over an element.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.UpdateContext">
            <summary>
            Updates the context based on the current reader.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.CopyElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment)">
            <summary>
            Copies the entire contents of the current element to the given fragment.
            </summary>
            <param name="fragment">A fragment of xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.CopyElement">
            <summary>
            Copies the entire contents of the current element to an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement"/>.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.NodeType">
            <summary>
            The type of node this is currently pointing too; <see cref="P:System.Xml.XmlReader.NodeType"/>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Path">
            <summary>
            The current path; this can later be given back to the reader as a goal.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Name">
            <summary>
            <see cref="P:System.Xml.XmlReader.Name"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.EOF" -->
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Value">
            <summary>
            The text value of the current node.
            </summary>
            <seealso cref="P:System.Xml.XmlReader.Value"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.IsEmptyElement">
            <summary>
            Whether or not the current nod is an empty element
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Depth">
            <summary>
            The depth of the current node in the XML document.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Item(System.String)">
            <summary>
            <see cref="!:XmlReader.Item(string)"/>
            </summary>
            <param name="attributeName">The name of the attribute to retrieve</param>
            <returns>The value of the given attribute</returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader._tags">
            <summary>
            a stack of all the currently open tags.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.#ctor(System.IO.Stream,SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag)">
            <summary>
            Creates a new Xml PreProcessing Reader for reading an entire document part from a word file.
            </summary>
            <param name="stream">A stream containing an xml word part.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.#ctor(System.String)">
            <summary>
            Creates a Xml PreProcessing reader prime for testing
            </summary>
            <param name="xml">A piece of xml. This must be complete elements, although more than one
            root element is allowed.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.PushSectionHandler(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.IHandleSections)">
            <summary>
            Add a new section handler for handling sections. 
            </summary>
            <remarks>If section properties or a section break are reached the most recently added
            handler will have the appropriate methods called.</remarks>
            <param name="sectionHandler">A class for handling when section properties and section
            breaks are reached.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.PopSectionHandler">
            <summary>
            Remove the most recently added section handler.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.SkipElement">
            <summary>
            Skips the children and end tag of the current node.
            Do not call this if you might be skipping over content
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.SkipToEndTag">
            <summary>
            Skips to the corresponding end tag if there is one, otherwise this is the same as <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ContextualXmlReader`1.Read"/>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.Read">
            <summary>
            Advances this reader to the next content, skipping over any non-preserved whitespace.
            </summary>
            <seealso cref="M:System.Xml.XmlReader.Read"/>
            <returns><c>true</c> if the next node was read successfully; <c>false</c> if there are no
            more nodes to read</returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.Peek">
            <summary>
            Advances the reader, but the next call to read won't advance the reader.
            </summary>
            <returns><c>true</c> if the next node was read successfully; <c>false</c> if there are no
            more nodes to read</returns>
            <exception cref="T:System.Xml.XmlException">An error occurred while parsing the XML.</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.Filters">
            <summary>
            These are the filters generated when this PreProcessor reads
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.OpenTags">
            <summary>
            A list of all the open tags, starting from the inner most tag
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.IHandleSections.HandleSectionPropertiesToBeSkipped(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Method to be called when Section properties are read in
            </summary>
            <param name="path">The path to the section properties start tag within the paragraph
            properties.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.IHandleSections.HandleSectionBreak(System.Collections.Generic.LinkedListNode{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IConsumableParagraph)">
            <summary>
              Method to be called when the actual section break is reached
            </summary>
            <param name = "sectionProperties">The element containing section properties</param>
            <param name = "path">The path to the section break; this will be path to the  end of
              paragraph tag.</param>
            <param name = "paragraph">The paragraph contaning the section break</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader.IHandleSections.HandleSectionProperties(System.Collections.Generic.LinkedListNode{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Method to be called when the last section properties of the document is reached
            </summary>
            <param name="sectionProperties">The section properties</param>
            <param name="path">The path to the section properties</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.GetFieldMarkers(System.String,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{System.String}@)">
            <summary>
            Returns a list of all the bookmarks contained directly within this block.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.IsStart(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            When overridden checks whether the element that the reader is pointing to is the start of
            this block.
            </summary>
            <param name="reader">An XML reader parsing a document</param>
            <returns><c>true</c> if the reader points to the start of this block, 
            <c>false</c> otherwise. When not overridden, returns <c>false</c></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            When overridden, does any additional processing on the current element in the reader.
            </summary>
            <remarks>After this method is called the reader should be in the exact same place as it
            was when called. For example if an overriding version iterates through some of the
            attributes, it should end with a call to <see cref="M:System.Xml.XmlReader.MoveToElement"/>. The
            exception to this is if an entire element (e.g. a sibling) is read in, in which case the
            reader should be pointed to the end of that element</remarks>
            <param name="context">The context of preprocessing used for creating this block.
            </param>
            <returns>Whether to stop processing and return control to the calling method (
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.stopPreprocessing"/>) or to continue processing in this block (
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.continuePreprocessing"/>)</returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcess(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcess(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Iterates through the elements processing each of them.
            </summary>
            <param name="mightRepeatXml">If this is true that implies that either the current block
            or a parent block might cause some xml from the file to be written more than once.
            </param>
            <remarks>This should be called in the base class of any children of this class.</remarks>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.AddChild(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            Adds a child block to this block, or the child's children if the child is ignored.
            </summary>
            <param name="pathToChild">The path to the start of the child</param>
            <param name="child">The child block</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.AddChild(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock})">
            <summary>
            Adds a child block to this block, or the child's children if the child is ignored.
            </summary>
            <param name="pathToChild">The path to the start of the child</param>
            <param name="child">The child block</param>
            <param name="alternateChildren"> A list of children, that aren't actually this blocks children</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.AddSibling(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Adds a sibling block to the list of this block's siblings, or siblings siblings, if the
            sibling is ignored.
            </summary>
            <param name="sibling">the path to the start of the sibling</param>
            <param name="pathToSibling">The sibling block</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.UpdateBlocksWithData(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter)">
            <summary>
            Does any clean up required of the children, recursively. 
            </summary>
            <remarks>This removes any bookmarks that don't have sources associated with them, and
            removes next fields if they are the first or last field of a bookmark.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Process(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            If overridden, writes out the appropriate output to the writer.
            </summary>
            <remarks>This is the method that should be called for anywhere, except on the entire
            document. </remarks>
            <param name="reader">The source XML; a word document. At the end of this method call the
            reader should be pointed just past the end of this block. For example, if this is a
            bookmark, it would be pointed to the very first piece of XML (including non-significant
            whitespace) after the bookmarkEnd tag. If not overridden copies until the end of file
            </param>
            <param name="writer">The destination XML; will be a word document. After a call to this
            the entire contents/output of this block will be written to the writer. If not overridden
            simply copies all XML that is not owned by children; children process there own sections
            of XML.</param>
            <param name="path">The current path</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Process(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,System.Boolean)">
            <summary>
            This method is only called from CopyingProcess and is used to deal with removing bookmarks.
            </summary>
            <param name="reader"></param>
            <param name="writer"></param>
            <param name="binaryDataStorage"></param>
            <param name="write"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.CopyingProcess(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            A less common version of process, that copies everything between children directly to the
            writer.
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Process(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Reads in the contents of this block from the reader
            </summary>
            <remarks>At the end of this method call the reader should be positioned after the end tag
            for this block.</remarks>
            <param name="reader">The source xml</param>
            <param name="propertyBag">The options set by the user</param>
            <seealso cref="!:Process(XmlProcessingReader,XmlWriter,IStoreBinaryDataForOpenXml,DataParameter)"/>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Reads in the contents of the given block from the reader
            </summary>
            <param name="block">Another block.</param>
            <param name="reader">The source xml</param>
            <param name="propertyBag">The options set by the user</param>
            <seealso cref="!:Process(XmlProcessingReader,XmlWriter,IStoreBinaryDataForOpenXml,DataParameter)"/>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the output of this block to the writer
            </summary>
            <remarks><see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)"/> must be called before this method</remarks>
            <seealso cref="!:Process(XmlProcessingReader,XmlWriter,IStoreBinaryDataForOpenXml,DataParameter)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Rewrite(System.Xml.XmlWriter)">
            <summary>
            Rewrites whatever was written before to the output.
            </summary>
            <remarks>This is here for if fields.</remarks>
            <param name="writer">The destination XML</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingWrite(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter)">
            <summary>
            Writes out the output of this block to the writer
            </summary>
            <remarks><see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)"/> must be called before this method</remarks>
            <param name="writer">The destination Xml</param>
            <param name="data">The data to be used for populating the document</param>
            <seealso cref="!:Process(XmlProcessingReader,XmlWriter,IStoreBinaryDataForOpenXml,DataParameter)"/>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">If block is an instance of this base class</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.HandleSectionPropertiesToBeSkipped(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Adds a skip block at the specified path, so that the properties aren't written out during
            processing, but instead will be written out in an empty paragraph.
            </summary>
            <param name="path">The path of the properties within the paragraph properties</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.HandleSectionBreak(System.Collections.Generic.LinkedListNode{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IConsumableParagraph)">
            <summary>
            Adds an section break block for inserting the section properties during processing.
            </summary>
            <param name="sectionProperties"></param>
            <param name="path">The path to the end of paragraph tag</param>
            <param name="paragraph"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.IsMergeField">
            <summary>
            Whether or not this block is a merge field.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.IsBookmark">
            <summary>
            Whether this block is repeat block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Name">
            <summary>
            If this block is a bookmark or a merge field; the name associated with it.
            </summary>
            <remarks>If this is not a merge field this will be <c>null</c></remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Ignore">
            <summary>
            Returns whether this block should be ignored and the contained blocks should just be
            taken from it.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ProcessThis">
            <summary>
            Sets and returns whether this block should be processed at all.
            This is used to remove bookmarks (and everything they contain) from the document.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ChildCount">
            <summary>
            The number of immediate children of this block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.SiblingCount">
            <summary>
            The number of immediate children of this block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.ComparableText">
            <summary>
            If this is a simple block or field, this will return text for comparing inside an if
            field, otherwise it's null.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.FieldMarkers">
            <summary>
            Returns a list of all the merge fields contained directly within this block.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.EndsInstructionTokens">
            <summary>
            Whether or not this type of block would cause the end of a piece of instruction text if
            it's not included in quotes.
            </summary>
            <remarks>This is <c>false</c> by default.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Children">
            <summary>
            Only for debugging help.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.Bookmarks">
            <summary>
            Returns a list of all the bookmarks contained directly within this block.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock">
            <summary>
            A simple struct containing a block and the path to that block.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            Creates a new Path to a sub block
            </summary>
            <param name="path">the path to the block</param>
            <param name="block">the block itself</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock.Path">
            <summary>
            The Path to the block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock.Block">
            <summary>
            The Sub-block itself
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWriteOnce">
            <summary>
            This block will be written out once by default, overriden classes, may changed the number
            of writes by altering <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWriteOnce.write"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWriteOnce.write">
            <summary>
            Whether or not to write out anything.
            </summary>
            <remarks>If this is false when <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWriteOnce.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/> is called, then this block
            doesn't write anything out.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReference.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Whether or not this comment reference has a range associated with it or if it is by itself.
            </summary>
            <remarks>If this is by itself then it should be removed as a child block, and the </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReferences">
            <summary>
            A container for all the CommentReference elements, which will be written out when Process
            is called on the  end of the last paragraph of the document part.
            </summary>
            <remarks> Only the comments which have there start and end written will be written. To
            note that a comment has been written: <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReferences.AddProcessingRangeElement(System.Int32,System.Boolean)"/>
            This is here because if you write out a CommentRangeStart tag, the comment only appears if
            there is a CommentReference tag somewhere in the document, so if there's any missing when
            we get to the end of the document we write them out then.
            If the last paragraph is consumed, then we create a paragraph, because it shouldn't really
            have any negative consequences</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReferences.HadRangeOriginally(System.Int32)">
            <summary>
            Whether or not the template contained a range associated with the given comment.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReferences.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            This should be pointing to the end tag of the last paragraph of the document
            </summary>
            <param name="reader"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.CommentReferences.HasComments">
            <summary>
            whether or not there are any comments in this document to begin with.
            </summary>
            <remarks>Note: this does not necessarily mean that there will be any after processing as
            they could be removed during preprocessing.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWritable">
            <summary>
            Represents classes which can be written to xml.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWritable.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes out the data contained in this writable object to an xml writer.
            </summary>
            <param name="writer">An xml writer writing out some xml</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableControlCharacter">
            <summary>
            Represents text in a word document that isn't exactly text such as a new paragraph or a tab.
            </summary>
            <seealso cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableControlCharacter.Type"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText">
            <summary>
            These pieces of text do not have children
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText">
            <summary>
            Defines pieces of text that can be compared
            </summary>
            <remarks>These texts allow us to compare portions of a document. There are 
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText"/>s for those with no children such as raw text a
            paragraph break, etc. and <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText"/> such as a block or
            generic piece of text.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText.GetChildren">
            <summary>
            Iterates over all the children of this text, returning only irreducible elements
            </summary>
            <remarks>Any objects created must be maintained until
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText.GetChildrenReversed"/>. In other words the results from this method call
            should have the same instances as those from the reversed, just in reverse order. This is
            primarily so that if calling 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText.Equals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText)"/>, it can use reference
            equality to determine when it has returned to the element with the asterisk. This only
            needs to be maintained until the next call to <c>GetChildrenReversed</c>.</remarks>
            <returns>An enumeration of all the text contained in this text.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText.GetChildrenReversed">
            <summary>
            Returns the children of this text in reverse order.
            </summary>
            <remarks>Any objects created must have the same reference as those returned using
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText.GetChildren"/>.</remarks>
            <returns>The children of this text in reverse order.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText.VisibleText">
            <summary>
            Returns the text of this text
            </summary>
            <returns>the text, or <c>null</c>, if there are whitespace tags in this text.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.CompareTo(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@)">
            <summary>
            Compares this text with another text
            </summary>
            <remarks>The following comparisons have been tested for string vs. xml: <br/>a >
            [Paragraph] > [VerticalTab] > [tab] > [space]</remarks>
            <param name="other">another piece of text</param>
            <param name="startingIndex">The first character from this text to compare. If the return
            value is zero, this will be updated to the index of the first character not compared. If
            the return value is not zero, the resulting value of this is undefined.
            </param>
            <param name="otherStartingIndex">The first character from the other text to compare. If
            the return value is zero, this will be updated to the index of the first character not
            compared, or negative one if the contents of this text have been exhausted. If the return
            value is not zero, the resulting value of this is undefined.
            </param>
            <returns>A negative number if this is less than other, zero if they are equal, a positive
            number if it's greater than other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.Equals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@,System.Boolean@)">
            <summary>
            Checks if this text is equal to another taking into consideration wildcards.
            </summary>
            <remarks>
            Wildcards are only allowed in this text and not in the other. So it's
            Expression2.Equals(Expression1).
            <para>According to Word's Help
            (http://office.microsoft.com/en-us/word/HP100779691033.aspx)  Expression2 must be
            enclosed in quotation marks so that it is compared as a string. <br/>
            
            If the operator is = or &lt;&gt;, Expression2 can contain a  question mark (?) to
            represent any single character or an asterisk (*) to represent any string of characters. 
            <br/>
            
            If you use an asterisk in Expression2, the portion of Expression1 that corresponds to the
            asterisk and any remaining characters in Expression2 cannot exceed 128 characters. <br/>
            
            Although, undocumented, if two asterisks (*) are included in Expression2, the second and
            any following are considered literals. Question Marks (?) are allowed to appear more than
            once. </para>
            
            <para>
            This comparison works in the following manner: Call on the first two texts with indexes
            both 0. If an index becomes -1, move that text to the next in the list and set its index
            to 0. When <c>reverseDirection</c> becomes <c>true</c>, record both indexes and texts.
            Start calling <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.ReverseEquals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@,System.Int32,System.Int32)"/>.</para> </remarks>
            <param name="other">another piece of text.</param>
            <param name="index">The index in this text to start comparing. If the return value is 
            <c>true</c>, this will be set to the index of the first character not compared, or -1 if
            the contents of this text have been exhausted. If the return value is 
            <c>false</c>, the resulting value of this is undefined.
            </param>
            <param name="otherIndex">The index in the other text to start comparing. If the return
            value is <c>true</c>, this will be set to the index of the first character not compared,
            or negative one if the contents of this text have been exhausted. If the return value is 
            <c>false</c>, the resulting value of this is undefined.
            </param>
            <param name="reverseDirection">This will be set to true when an asterisk is found and
            comparsions need to be done in reverse. </param>
            <returns><c>true</c> if this text is equivalent to the other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.ReverseEquals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Checks if this text is equal to another taking into consideration wildcards.
            </summary>
            <remarks>
            Wildcards are only allowed in this text and not in the other. So it's
            Expression2.Equals(Expression1).
            <para>According to Word's Help
            (http://office.microsoft.com/en-us/word/HP100779691033.aspx)  Expression2 must be
            enclosed in quotation marks so that it is compared as a string. <br/>
            
            If the operator is = or &lt;&gt;, Expression2 can contain a  question mark (?) to
            represent any single character or an asterisk (*) to represent any string of characters. 
            <br/>
            
            If you use an asterisk in Expression2, the portion of Expression1 that corresponds to the
            asterisk and any remaining characters in Expression2 cannot exceed 128 characters. <br/>
            
            Although, undocumented, if two asterisks (*) are included in Expression2, the second and
            any following are considered literals. Question Marks (?) are allowed to appear more than
            once. </para>
            <para>
            This comparison works in the following manner: Call on the last two texts with indexes
            both -1. If an index becomes -1, move that text to the previous in the list. When one of
            the texts is the one recorded when the asterisk was found set its associated stop
            variable to the one recorded.</para>
            </remarks>
            <param name="other">another piece of text.</param>
            <param name="index">The index in the text to start comparing. A value of -1 is considered
            the last character in the text. If the return value is <c>true</c>, this will be set to
            the index of the first character not compared. If the return value is <c>false</c>, the
            output of this variable is undefined.</param>
            <param name="otherIndex">The index in the other text to start comparing. A value of -1 is
            considered the last character in the text. If the return value is <c>true</c>, this will
            be set to the index of the first character not compared. If the return value is 
            <c>false</c>, the output of this variable is undefined.</param>
            <param name="stop">The last character to compare. If -1 the entire text will be compared.
            This should be the index grabbed from comparing with <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.Equals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@,System.Boolean@)"/></param>
            <param name="otherStop">The last character in the other text to compare. If -1 the entire
            text will be compared. This should be the index grabbed from comparing with 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText.Equals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IIrreducibleComparableText,System.Int32@,System.Int32@,System.Boolean@)"/></param>
            <returns>Returns <c>true</c> if this text is equivalent to the other text. If the indices
            are equal to the stops and the objects are the ones containing the asterisk, then the two
            texts are equal.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableControlCharacter.Type">
            <summary>
            The different types that are supported
            </summary>
            <remarks>a > [Image] > [Paragraph] > [VerticalTab] > [tab] > [space]</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableString">
            <summary>
            Text that is simply a string.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableString.IsSpace(System.Int32@)">
            <summary>
            Checks whether the character at the given location is a space
            </summary>
            <param name="index">The location in the text to check. Increments the index or sets it to
            -1 if it has passed the length of this string</param>
            <returns><c>true</c> if the character at the given index is a space, <c>false</c>
            otherwise</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableText">
            <summary>
            A combination object that contains a list of other text and thus can represent anything
            in the document.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText">
            <summary>
            Pieces of comparable text that have children
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText.CompareTo(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText,SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag,System.Boolean)">
            <summary>
            Compares this text with another text
            </summary>
            <remarks>The following comparisons have been tested for string vs. xml: <br/>
            a > [Paragraph] > [VerticalTab] > [tab] > [space]</remarks>
            <param name="other">another piece of text</param>
            <returns>A negative number if this is less than other, zero if they are equal, a positive
            number if it's greater than other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText.Equals(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText)">
            <summary>
            Checks if this text is equal to another taking into consideration wildcards.
            </summary>
            <remarks>
            Wildcards are only allowed in this text and not in the other. So it's
            Expression2.Equals(Expression1).
            <para>According to Word's Help
            (http://office.microsoft.com/en-us/word/HP100779691033.aspx)  Expression2 must be
            enclosed in quotation marks so that it is compared as a string. <br/>
            
            If the operator is = or &lt;&gt;, Expression2 can contain a  question mark (?) to
            represent any single character or an asterisk (*) to represent any string of characters. 
            <br/>
            
            If you use an asterisk in Expression2, the portion of Expression1 that corresponds to the
            asterisk and any remaining characters in Expression2 cannot exceed 128 characters. <br/>
            
            Although, undocumented, if two asterisks (*) are included in Expression2, the second and
            any following are considered literals. Question Marks (?) are allowed to appear more than
            once. </para></remarks>
            <param name="other">another piece of text.</param>
            <returns><c>true</c> if this text is equivalent to the other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReducibleComparableText.Add(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IComparableText)">
            <summary>
            Adds a new irreducible piece to this text.
            </summary>
            <param name="child">A part of the current text.</param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ComparableText.numberString">
            <summary>
            This is only valid from calling IsNumber
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings">
            <Doc>
      <summary>
        <para>This class contains various settings so imported documents from other versions of Word and competing products will look the way they were intended to.</para>
      </summary>
      <remarks>
        <para>You cannot create a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings"/> object using the <c>new</c> keyword. You must get an existing <c>CompatibilitySettings</c> object from a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        <para>The following sample gets the CompatibilitySettings of a document so you can start working with these properties.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          CompatibilitySettings cs = doc.CompatibilitySettings;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim cs As CompatibilitySettings = doc.CompatibilitySettings
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;CompatibilitySettings&quot;]/Member[@signature=&quot;CompatibilitySettings.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;CompatibilitySettings&quot;]/Member[@signature=&quot;CompatibilitySettings.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SuppressSpacingLike5">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that toggles the suppression of line spacing like Word 5 for Mac.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Suppress extra line spacing at top of page like Word 5.x for the Mac</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SuppressSpacingLike5
          bool suppressSpacingLike5 = cs.SuppressSpacingLike5;

          //--- Set SuppressSpacingLike5
          cs.SuppressSpacingLike5 = true;
        </code>
            <br/>
            <code>

          '--- Return SuppressSpacingLike5
          Dim suppressSpacingLike5 As Boolean = cs.SuppressSpacingLike5

          '--- Set SuppressSpacingLike5
          cs.SuppressSpacingLike5 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SuppressSpacingLikeWP">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that toggles the suppression of line spacing like WordPerfect.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Suppress extra line spacing like WordPerfect 5.x</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SuppressSpacingLikeWP
          bool suppressSpacingLikeWP = cs.SuppressSpacingLikeWP;

          //--- Set SuppressSpacingLikeWP
          cs.SuppressSpacingLikeWP = true;
        </code>
            <br/>
            <code>

          '--- Return SuppressSpacingLikeWP
          Dim suppressSpacingLikeWP As Boolean = cs.SuppressSpacingLikeWP

          '--- Set SuppressSpacingLikeWP
          cs.SuppressSpacingLikeWP = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.LineWrapLike6">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will wrap lines like Word 6 for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Lines wrap like Word 6.0</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineWrapLike6
          bool lineWrapLike6 = cs.LineWrapLike6;

          //--- Set LineWrapLike6
          cs.LineWrapLike6 = true;
        </code>
            <br/>
            <code>

          '--- Return LineWrapLike6
          Dim lineWrapLike6 As Boolean = cs.LineWrapLike6

          '--- Set LineWrapLike6
          cs.LineWrapLike6 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.BorderRulesLike6">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word should use Word 6 border rules for this document.</para>
        </summary>
        <remarks>
          <para>This is set to <c>true</c> by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use Word 6.x/95 Border rules</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return BorderRulesLike6
          bool borderRulesLike6 = cs.BorderRulesLike6;

          //--- Set BorderRulesLike6
          cs.BorderRulesLike6 = true;
        </code>
            <br/>
            <code>

          '--- Return BorderRulesLike6
          Dim borderRulesLike6 As Boolean = cs.BorderRulesLike6

          '--- Set BorderRulesLike6
          cs.BorderRulesLike6 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ExactOnTop">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will center "exact line height" lines in this document.</para>
        </summary>
        <remarks>
          <para>This is set to <c>false</c> by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't center "exact line height" lines</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ExactOnTop
          bool exactOnTop = cs.ExactOnTop;

          //--- Set ExactOnTop
          cs.ExactOnTop = true;
        </code>
            <br/>
            <code>

          '--- Return ExactOnTop
          Dim exactOnTop As Boolean = cs.ExactOnTop

          '--- Set ExactOnTop
          cs.ExactOnTop = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SuppressExtraAfter">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will supress extra line spacing at the bottom of the page for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Suppress extra line spacing at bottom of page</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SuppressExtraAfter
          bool suppressExtraAfter = cs.SuppressExtraAfter;

          //--- Set SuppressExtraAfter
          cs.SuppressExtraAfter = true;
        </code>
            <br/>
            <code>

          '--- Return SuppressExtraAfter
          Dim suppressExtraAfter As Boolean = cs.SuppressExtraAfter

          '--- Set SuppressExtraAfter
          cs.SuppressExtraAfter = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SpaceLikeWP5">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will calculate the width of a space like WordPerfect 5 for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Set the width of a space like WordPerfect 5.x</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SpaceLikeWP5
          bool spaceLikeWP5 = cs.SpaceLikeWP5;

          //--- Set SpaceLikeWP5
          cs.SpaceLikeWP5 = true;
        </code>
            <br/>
            <code>

          '--- Return SpaceLikeWP5
          Dim spaceLikeWP5 As Boolean = cs.SpaceLikeWP5

          '--- Set SpaceLikeWP5
          cs.SpaceLikeWP5 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.JustifyLikeWP6">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will do full justification like WordPerfect 6 for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Do full justification like WordPerfect 6.x for Windows</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return JustifyLikeWP6
          bool justifyLikeWP6 = cs.JustifyLikeWP6;

          //--- Set JustifyLikeWP6
          cs.JustifyLikeWP6 = true;
        </code>
            <br/>
            <code>

          '--- Return JustifyLikeWP6
          Dim justifyLikeWP6 As Boolean = cs.JustifyLikeWP6

          '--- Set JustifyLikeWP6
          cs.JustifyLikeWP6 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UsePrinterMetrics">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will use printer metrics to lay out this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use printer metric to lay out document</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UsePrinterMetrics
          bool usePrinterMetrics = cs.UsePrinterMetrics;

          //--- Set UsePrinterMetrics
          cs.UsePrinterMetrics = true;
        </code>
            <br/>
            <code>

          '--- Return UsePrinterMetrics
          Dim usePrinterMetrics As Boolean = oCompatibilitySettings.UsePrinterMetrics

          '--- Set UsePrinterMetrics
          cs.UsePrinterMetrics = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ShapesLike97">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will layout auto shapes like Word 97 for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Lay out AutoShapes like Word 97</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShapesLike97
          bool shapesLike97 = cs.ShapesLike97;

          //--- Set ShapesLike97
          cs.ShapesLike97 = true;
        </code>
            <br/>
            <code>

          '--- Return ShapesLike97
          Dim shapesLike97 As Boolean = oCompatibilitySettings.ShapesLike97

          '--- Set ShapesLike97
          cs.ShapesLike97 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.FootnotesLike97">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will layout footnotes like Word 97 in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Lay out footnotes like Work 6.x/95/97</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return FootnotesLike97
          bool footnotesLike97 = cs.FootnotesLike97;

          //--- Set FootnotesLike97
          cs.FootnotesLike97 = true;
        </code>
            <br/>
            <code>

          '--- Return FootnotesLike97
          Dim footnotesLike97 As Boolean = cs.FootnotesLike97

          '--- Set FootnotesLike97
          cs.FootnotesLike97 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AdjustTableLineHeight">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will auto-adjust line height in Tables in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Adjust line height to grid height in the table</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AdjustTableLineHeight
          bool adjustTableLineHeight = cs.AdjustTableLineHeight;

          //--- Set AdjustTableLineHeight
          cs.AdjustTableLineHeight = true;
        </code>
            <br/>
            <code>

          '--- Return AdjustTableLineHeight
          Dim adjustTableLineHeight As Boolean = oCompatibilitySettings.AdjustTableLineHeight

          '--- Set AdjustTableLineHeight
          oCompatibilitySettings.AdjustTableLineHeight = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AutospaceLike95">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will auto space like Word 95 in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Auto space like Word 95</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AutospaceLike95
          bool autospaceLike95 = cs.AutospaceLike95;

          //--- Set AutospaceLike95
          cs.AutospaceLike95 = true;
        </code>
            <br/>
            <code>

          '--- Return AutospaceLike95
          Dim autospaceLike95 As Boolean = cs.AutospaceLike95

          '--- Set AutospaceLike95
          cs.AutospaceLike95 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AlignRowsIndependent">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will align table rows independently of one another in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Align table rows independently</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AlignRowsIndependent
          bool alignRowsIndependent = cs.AlignRowsIndependent;

          //--- Set AlignRowsIndependent
          cs.AlignRowsIndependent = true;
        </code>
            <br/>
            <code>

          '--- Return AlignRowsIndependent
          Dim alignRowsIndependent As Boolean = cs.AlignRowsIndependent

          '--- Set AlignRowsIndependent
          cs.AlignRowsIndependent = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UseTableRawWidth">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will lay out tables using their raw width in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Lay out tables with raw width</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UseTableRawWidth
          bool useTableRawWidth = cs.UseTableRawWidth;

          //--- Set UseTableRawWidth
          cs.UseTableRawWidth = true;
        </code>
            <br/>
            <code>

          '--- Return UseTableRawWidth
          Dim useTableRawWidth As Boolean = cs.UseTableRawWidth

          '--- Set UseTableRawWidth
          cs.UseTableRawWidth = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.TableRowsApart">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will allow table rows to be layed out apart from one another in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Allow table rows to lay out apart</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TableRowsApart
          bool tableRowsApart = cs.TableRowsApart;

          //--- Set TableRowsApart
          cs.TableRowsApart = true;
        </code>
            <br/>
            <code>

          '--- Return TableRowsApart
          Dim tableRowsApart As Boolean = cs.TableRowsApart

          '--- Set TableRowsApart
          cs.TableRowsApart = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.LineBreaksLike97">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will use line breaking rules from Word 97 for East Asian text in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use Word 97 line breaking rules for Asian text</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineBreaksLike97
          bool lineBreaksLike97 = cs.LineBreaksLike97;

          //--- Set LineBreaksLike97
          cs.LineBreaksLike97 = true;
        </code>
            <br/>
            <code>

          '--- Return LineBreaksLike97
          Dim lineBreaksLike97 As Boolean = cs.LineBreaksLike97

          '--- Set LineBreaksLike97
          cs.LineBreaksLike97 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AllowTableBreaks">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will allow tables to break across pages in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't break wrapped tables across pages</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AllowTableBreaks
          bool allowTableBreaks = cs.AllowTableBreaks;

          //--- Set AllowTableBreaks
          cs.AllowTableBreaks = true;
        </code>
            <br/>
            <code>

          '--- Return AllowTableBreaks
          Dim allowTableBreaks As Boolean = cs.AllowTableBreaks

          '--- Set AllowTableBreaks
          cs.AllowTableBreaks = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AllowSnapInCells">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will snap text to grid while in a table with inline objects in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't snap text to grid inside table with Inline objects</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AllowSnapInCells
          bool allowSnapInCells = cs.AllowSnapInCells;

          //--- Set AllowSnapInCells
          cs.AllowSnapInCells = true;
        </code>
            <br/>
            <code>

          '--- Return AllowSnapInCells
          Dim allowSnapInCells As Boolean = cs.AllowSnapInCells

          '--- Set AllowSnapInCells
          cs.AllowSnapInCells = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ApplyBreakingRules">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will apply breaking rules in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use line breaking rules</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ApplyBreakingRules
          bool applyBreakingRules = cs.ApplyBreakingRules;

          //--- Set ApplyBreakingRules
          cs.ApplyBreakingRules = true;
        </code>
            <br/>
            <code>

          '--- Return ApplyBreakingRules
          Dim applyBreakingRules As Boolean = cs.ApplyBreakingRules

          '--- Set ApplyBreakingRules
          cs.ApplyBreakingRules = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.WrapTextWithPunct">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will wrap text with punctuation in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't allow hanging punctuation with character grid</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return WrapTextWithPunct
          bool wrapTextWithPunct = cs.WrapTextWithPunct;

          //--- Set WrapTextWithPunct
          cs.WrapTextWithPunct = true;
        </code>
            <br/>
            <code>

          '--- Return WrapTextWithPunct
          Dim wrapTextWithPunct As Boolean = cs.WrapTextWithPunct

          '--- Set WrapTextWithPunct
          cs.WrapTextWithPunct = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UseAsianBreakingRules">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will use Asian breaking rules for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't use Asian rules for line breaks with character grid</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UseAsianBreakingRules
          bool useAsianBreakingRules = cs.UseAsianBreakingRules;

          //--- Set UseAsianBreakingRules
          cs.UseAsianBreakingRules = true;
        </code>
            <br/>
            <code>

          '--- Return UseAsianBreakingRules
          Dim useAsianBreakingRules As Boolean = cs.UseAsianBreakingRules

          '--- Set UseAsianBreakingRules
          cs.UseAsianBreakingRules = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UseTableStylesLike2002">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will use table styles like Word 2002. Word 2002 places the top border of a column under the heading row, rather than above it as Word 2003 does.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use Word 2002 table style rules</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UseTableStylesLike2002
          bool useTableStylesLike2002 = cs.UseTableStylesLike2002;

          //--- Set UseTableStylesLike2002
          cs.UseTableStylesLike2002 = true;
        </code>
            <br/>
            <code>

          '--- Return UseTableStylesLike2002
          Dim useTableStylesLike2002 As Boolean = cs.UseTableStylesLike2002

          '--- Set UseTableStylesLike2002
          cs.UseTableStylesLike2002 = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.GrowTableAutoFit">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will allow autofit tables to extend into the margins when in print layout for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Allow tables to extend into margins</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return GrowTableAutoFit
          bool growTableAutoFit = cs.GrowTableAutoFit;

          //--- Set GrowTableAutoFit
          cs.GrowTableAutoFit = true;
        </code>
            <br/>
            <code>

          '--- Return GrowTableAutoFit
          Dim growTableAutoFit As Boolean = cs.GrowTableAutoFit

          '--- Set GrowTableAutoFit
          cs.GrowTableAutoFit = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.NoTabForIndent">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will not add automatic tab stops for a hanging indent.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't add automatic tab stop for hanging indent</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return NoTabForIndent
          bool noTabForIndent = cs.NoTabForIndent;

          //--- Set NoTabForIndent
          cs.NoTabForIndent = true;
        </code>
            <br/>
            <code>

          '--- Return NoTabForIndent
          Dim noTabForIndent As Boolean = cs.NoTabForIndent

          '--- Set NoTabForIndent
          cs.NoTabForIndent = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.NoSpaceForRaisedLower">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will not add extra space raised or lowered characters.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't add extra space for raised/lowered characters</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return NoSpaceForRaisedLower
          bool noSpaceForRaisedLower = cs.NoSpaceForRaisedLower;

          //--- Set NoTabForIndent
          cs.NoSpaceForRaisedLower = true;
        </code>
            <br/>
            <code>

          '--- Return NoSpaceForRaisedLower
          Dim noSpaceForRaisedLower As Boolean = cs.NoSpaceForRaisedLower

          '--- Set NoSpaceForRaisedLower
          cs.NoSpaceForRaisedLower = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SuppressSpaceAfterPageBreak">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will suppress paragraph space before and space after options after a page break in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Suppress Space Before after a hard page or column break</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SuppressSpaceAfterPageBreak
          bool suppressSpaceAfterPageBreak = cs.SuppressSpaceAfterPageBreak;

          //--- Set NoTabForIndent
          cs.SuppressSpaceAfterPageBreak = true;
        </code>
            <br/>
            <code>

          '--- Return SuppressSpaceAfterPageBreak
          Dim noSpaceForRaisedLower As Boolean = cs.SuppressSpaceAfterPageBreak

          '--- Set SuppressSpaceAfterPageBreak
          cs.SuppressSpaceAfterPageBreak = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.WrapTrailingSpaces">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will wrap trailing spaces at the end of a line in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Wrap trailing spaces to next line</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return WrapTrailingSpaces
          bool wrapTrailingSpaces = cs.WrapTrailingSpaces;

          //--- Set WrapTrailingSpaces
          cs.WrapTrailingSpaces = true;
        </code>
            <br/>
            <code>

          '--- Return WrapTrailingSpaces
          Dim wrapTrailingSpaces As Boolean = cs.WrapTrailingSpaces

          '--- Set WrapTrailingSpaces
          cs.WrapTrailingSpaces = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.MapPrintColor">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will print colors in this document as black on non-color printers.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Print colors as black on noncolor printers</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return MapPrintColor
          bool mapPrintColor = cs.MapPrintColor;

          //--- Set MapPrintColor
          cs.MapPrintColor = true;
        </code>
            <br/>
            <code>

          '--- Return MapPrintColor
          Dim mapPrintColor As Boolean = cs.MapPrintColor

          '--- Set MapPrintColor
          cs.MapPrintColor = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.BalanceColumns">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will balance columns for continuous section starts in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't balance columns for Continuous section starts</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return BalanceColumns
          bool balanceColumns = cs.BalanceColumns;

          //--- Set BalanceColumns
          cs.BalanceColumns = true;
        </code>
            <br/>
            <code>

          '--- Return BalanceColumns
          Dim balanceColumns As Boolean = cs.BalanceColumns

          '--- Set MapPrintColor
          cs.BalanceColumns = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SupressTopSpacing">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will suppress line spacing at the top of the page in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't balance columns for Continuous section starts</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SupressTopSpacing
          bool supressTopSpacing = cs.SupressTopSpacing;

          //--- Set SupressTopSpacing
          cs.SupressTopSpacing = true;
        </code>
            <br/>
            <code>

          '--- Return SupressTopSpacing
          Dim supressTopSpacing As Boolean = cs.SupressTopSpacing

          '--- Set SupressTopSpacing
          cs.SupressTopSpacing = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SwapBorders">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will swap left and right borders on odd facing pages in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't balance columns for Continuous section starts</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SwapBorders
          bool swapBorders = cs.SwapBorders;

          //--- Set SwapBorders
          cs.SwapBorders = true;
        </code>
            <br/>
            <code>

          '--- Return SwapBorders
          Dim swapBorders As Boolean = cs.SwapBorders

          '--- Set SupressTopSpacing
          cs.SwapBorders = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.AllowLeading">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will add leading (extra space) between rows of text in this document.</para>
        </summary>
        <remarks>
          <para>This is set to <c>true</c> by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't balance columns for Continuous section starts</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AllowLeading
          bool allowLeading = cs.AllowLeading;

          //--- Set AllowLeading
          cs.AllowLeading = true;
        </code>
            <br/>
            <code>

          '--- Return AllowLeading
          Dim allowLeading As Boolean = cs.AllowLeading

          '--- Set AllowLeading
          cs.AllowLeading = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.MirrorMargins">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will swap margins on left/right pages.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Swap left and right borders on odd facing pages</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return MirrorMargins
          bool mirrorMargins = cs.MirrorMargins;

          //--- Set MirrorMargins
          cs.MirrorMargins = true;
        </code>
            <br/>
            <code>

          '--- Return MirrorMargins
          Dim mirrorMargins As Boolean = cs.MirrorMargins

          '--- Set MirrorMargins
          cs.MirrorMargins = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SnapPageBorder">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will snap table and page borders to the page border in this document.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return SnapPageBorder
          bool snapPageBorder = cs.SnapPageBorder;

          //--- Set SnapPageBorder
          cs.SnapPageBorder = true;
        </code>
            <br/>
            <code>

          '--- Return SnapPageBorder
          Dim snapPageBorder As Boolean = cs.SnapPageBorder

          '--- Set SnapPageBorder
          cs.SnapPageBorder = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ShowBreaksInFrames">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show hard page or column breaks in frames.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Show hard page or column breaks in frames</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShowBreaksInFrames
          bool showBreaksInFrames = cs.ShowBreaksInFrames;

          //--- Set ShowBreaksInFrames
          cs.ShowBreaksInFrames = true;
        </code>
            <br/>
            <code>

          '--- Return ShowBreaksInFrames
          Dim showBreaksInFrames As Boolean = cs.ShowBreaksInFrames

          '--- Set ShowBreaksInFrames
          cs.ShowBreaksInFrames = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ConvertMailMergeEsc">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will treat \" as "" in mail merge data sources in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Treat \" as "" in mail merge data sources</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ConvertMailMergeEsc
          bool convertMailMergeEsc = cs.ConvertMailMergeEsc;

          //--- Set ConvertMailMergeEsc
          cs.ConvertMailMergeEsc = true;
        </code>
            <br/>
            <code>

          '--- Return ConvertMailMergeEsc
          Dim convertMailMergeEsc As Boolean = cs.ConvertMailMergeEsc

          '--- Set ConvertMailMergeEsc
          cs.ConvertMailMergeEsc = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.LeaveBackslashAlone">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will not convert '\' characters into Yen signs in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Convert backslash characters into yen signs</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LeaveBackslashAlone
          bool leaveBackslashAlone = cs.LeaveBackslashAlone;

          //--- Set LeaveBackslashAlone
          cs.LeaveBackslashAlone = true;
        </code>
            <br/>
            <code>

          '--- Return LeaveBackslashAlone
          Dim leaveBackslashAlone As Boolean = cs.LeaveBackslashAlone

          '--- Set LeaveBackslashAlone
          cs.LeaveBackslashAlone = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.ExpandShiftReturn">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will expand character spaces on the line ending in SHIFT + RETURN in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't expand character spaces on the line ending Shift-Return</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ExpandShiftReturn
          bool expandShiftReturn = cs.ExpandShiftReturn;

          //--- Set ExpandShiftReturn
          cs.ExpandShiftReturn = true;
        </code>
            <br/>
            <code>

          '--- Return ExpandShiftReturn
          Dim expandShiftReturn As Boolean = cs.ExpandShiftReturn

          '--- Set ExpandShiftReturn
          cs.ExpandShiftReturn = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UnderlineTrailingSpaces">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will underline trailing spaces for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Don't underline on trailing spaces</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UnderlineTrailingSpaces
          bool underlineTrailingSpaces = cs.UnderlineTrailingSpaces;

          //--- Set UnderlineTrailingSpaces
          cs.UnderlineTrailingSpaces = true;
        </code>
            <br/>
            <code>

          '--- Return UnderlineTrailingSpaces
          Dim underlineTrailingSpaces As Boolean = cs.UnderlineTrailingSpaces

          '--- Set UnderlineTrailingSpaces
          cs.UnderlineTrailingSpaces = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.UseLargerSmallCaps">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will use larger small capitalization like Word 5 for Mac for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Use larger small caps like Word 5.x for the Macintosh</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UseLargerSmallCaps
          bool useLargerSmallCaps = cs.UseLargerSmallCaps;

          //--- Set UseLargerSmallCaps
          cs.UseLargerSmallCaps = true;
        </code>
            <br/>
            <code>

          '--- Return UseLargerSmallCaps
          Dim useLargerSmallCaps As Boolean = cs.UseLargerSmallCaps

          '--- Set UseLargerSmallCaps
          cs.UseLargerSmallCaps = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.TruncateFontHeight">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will truncate font heights for this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Truncate font height</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TruncateFontHeight
          bool truncateFontHeight = cs.TruncateFontHeight;

          //--- Set TruncateFontHeight
          cs.TruncateFontHeight = true;
        </code>
            <br/>
            <code>

          '--- Return TruncateFontHeight
          Dim truncateFontHeight As Boolean = cs.TruncateFontHeight

          '--- Set TruncateFontHeight
          cs.TruncateFontHeight = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.CompatibilitySettings.SubBasedOnSize">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will replace fonts based on size in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Compatibility tab &gt; Compatibility options for [filename].doc section &gt; Options &gt; Substitute fonts based on font size</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SubBasedOnSize
          bool subBasedOnSize = cs.SubBasedOnSize;

          //--- Set SubBasedOnSize
          cs.SubBasedOnSize = true;
        </code>
            <br/>
            <code>

          '--- Return SubBasedOnSize
          Dim subBasedOnSize As Boolean = cs.SubBasedOnSize

          '--- Set SubBasedOnSize
          cs.SubBasedOnSize = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Processor">
            <summary> Base class for different Word document processors
            Processor is a class that implements 'Process' method functionality, 
            i.e. does all the work of populating fields with data.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ComplexProcessor.UpdateIfFields">
            <summary>Sets the processor to update the if fields during process()</summary>
            
            @param newValue
                       if <code>true</code>, process() will update the cached text
                       for all the if fields in the file, otherwise they will be
                       ignored.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.CompoundFile">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CompressedBorderCode">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CompressedBorderCode.doUpdate">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CompressedDropCapSpecifier">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DropCapSpecifier">
            <summary> This data structure is used by a paragraph to determine how it should drop
            its first letter. I think its the visual effect that will show a giant first
            letter to a paragraph. I've seen this used in the first paragraph of a book
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DropCapSpecifier.toShort">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CompressedDropCapSpecifier.doUpdate">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CompressedShading">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.toByteArray2K3">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.toByteArray97">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.ToDebugStringForShadingDescriptor(SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern)">
            <summary>ToDebugStringForShadingDescriptor is used for ShadingPattern since ShadingPattern is exposed through
            the api, and all necessary info is available anyways.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor.Empty">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor2K3.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor2K3.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor2K3.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor2K3.Empty">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CompressedShading.doUpdate">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ConfigurationLicenseReader.TryGetKeyString">
            <summary>
            This method will not throw an exception. If you need the exception to be thrown use KeyString
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream">
            <summary>
            This class is not thread safe!
            
            This provides a noncontiguous memory stream which is allocated when it's written to and
            deallocated when it's read from.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream.#ctor">
            <summary>
            populate the storage
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ConsumingNonContiguousMemoryStream.Length">
            <summary>
            The amount of data left in the stream
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ICountable`1">
            <summary>
            An IEnumerable which supports Count
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.CountBinding">
            <summary>
            A Binding to the DataRows for getting the count of all the numbers in a column
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter">
            <summary>
            Class for converting CPs to FCs when writing to the file.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter.#ctor(System.Collections.Generic.List{SoftArtisans.OfficeWriter.WordWriter.TextRange})">
            <summary>
            Creates a new converter for converting CPs to FCs
            </summary>
            <param name="ranges">a list of all the ctext ranges written to the file. These should
            be sorted by CP.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter.CpToFc(System.Int32)">
            <summary>
            Returns the file position corresponding to the given character position.
            </summary>
            <remarks>
            The end of a text piece is exclusive, so this should only be used
            for inclusive CPs (ie. the end of a format entry should not use this, but
            everything else should)
            </remarks>
            <param name="cp">the character position to convert</param>
            <returns>the FC of the given CP or -1 if the CP is invalid</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter.CpToFcAtEnd(System.Int32)">
            <summary>
            Returns the file position corresponding to the given end character
            position. 
            </summary>
            <remarks>The end of a text piece is exclusive, this will return
            the end of a text piece if the CP matches, and thus should only be used
            for the end of other exclusive ranges.</remarks>
            <param name="cp">the character position of the end of some range</param>
            <returns>the FC corresponding to the given CP, or -1 if it's not a valid CP</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties">
            <Doc>
      <summary>
        <para>This class is used to control settings for importing data into a table or table cell.</para>
      </summary>
      <remarks>
        <para>To create a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateDataImportProperties"/>.</para>
        <para>To actually import data, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.ImportData(System.Object[][])"/> and pass in a <c>DataImportProperties</c> object along with the data to import.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          DataImportProperties importProps = doc.CreateDataImportProperties();

          //--- Set a few properties
          importProps.UseColumnNames = true;
          importProps.AutoFit = true;

          //--- Import data into a new table and apply the DataImportProperties
          Table dataImportTable = oTable.ImportData(oDataTable, importProps);
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim importProps As DataImportProperties = doc.CreateDataImportProperties()

          '--- Set a few properties
          importProps.UseColumnNames = True
          importProps.AutoFit = True

          '--- Import data into a new table and apply the DataImportProperties
          Table dataImportTable = oTable.ImportData(oDataTable, importProps)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DataImportProperties&quot;]/Member[@signature=&quot;DataImportProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DataImportProperties&quot;]/Member[@signature=&quot;DataImportProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.UseColumnNames">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether to use the column names from the data source when importing the data. This property is set to true by default.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return UseColumnNames
          bool useColNames = importProps.UseColumnNames;

          //--- Set UseColumnNames
          importProps.UseColumnNames = false;
        </code>
            <br/>
            <code>

          '--- Return UseColumnNames
          Boolean useColNames = importProps.UseColumnNames

          '--- Set UseColumnNames
          importProps.UseColumnNames = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.MaxRows">
            <Doc>
        <summary>
          <para>Returns or set an <c>int</c> that represents the maximum number of rows to be imported.  If more rows than this are in the data source, the extra ones will be ignored.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return MaxRows
          int rows = importProps.MaxRows;

          //--- Set MaxRows
          importProps.MaxRows = 50;
        </code>
            <br/>
            <code>

          '--- Return MaxRows
          Dim rows As Integer = importProps.MaxRows

          '--- Set MaxRows
          importProps.MaxRows = 50
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.MaxColumns">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the maximum number of columns to be imported.  If more columns than this are in the data source, the extra ones will be ignored.</para>
        </summary>
        <remarks>
          <para>The default value is 0, which represents unlimited columns.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return MaxColumns
          int cols = importProps.MaxColumns;

          //--- Set MaxRows
          importProps.MaxColumns = 10;
        </code>
            <br/>
            <code>

          '--- Return MaxColumns
          Dim cols As Integer = importProps.MaxColumns

          '--- Set MaxRows
          importProps.MaxColumns = 10
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.ColumnIndexFilter">
            <Doc>
        <summary>
          <para>Sets or returns an array of column indexes specifying the columns to import.</para>
        </summary>
        <remarks>
          <para>If the length of the specified array is greater than MaxColumns, or exceeds the size of the target area, the columns will be added in the order in which they appear in the array.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ColumnIndexFilter
          int[] colIndexes = importProps.ColumnIndexFilter;

          //--- Set ColumnIndexFilter
          importProps.ColumnIndexFilter = new int[]{0,2,3,6};
        </code>
            <br/>
            <code>

          '--- Return ColumnIndexFilter
          Dim colIndexes() As Integer = importProps.ColumnIndexFilter

          '--- Set ColumnIndexFilter
          importProps.ColumnIndexFilter = New Integer(){0, 2, 3, 6}
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.ColumnNameFilter">
            <Doc>
        <summary>
          <para>Sets or returns an array of columns names specifying the columns to import.    If the length of the specified array is greater than MaxColumns, or exceeds the size of the target area, the columns will be added in the order in which they appear in the array.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return ColumnNameFilter
          String[] colNames = importProps.ColumnNameFilter;

          //--- Set ColumnNameFilter
          importProps.ColumnNameFilter = new String[]{"Name", "Address", "Zip"};
        </code>
            <br/>
            <code>

          '--- Return ColumnNameFilter
          Dim colNames As String() = importProps.ColumnNameFilter

          '--- Set ColumnNameFilter
          importProps.ColumnNameFilter = New String() {"Name", "Address", "Zip"}
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.AutoFit">
            <Doc>
        <summary>
          <para>Sets or returns a boolean representing whether or not the table that is automatically created for the imported data will automatically be sized to fit the data being imported.</para>
        </summary>
        <remarks>
          <para>This is set to <c>false</c> by default.</para>
        </remarks>
        <example>
          <para>
            <code>

          //---- Return AutoFit
          boolean fit = importProps.AutoFit;

          //--- Set AutoFit
          importProps.AutoFit = true;
        </code>
            <br/>
            <code>

          '--- Return AutoFit
          Dim fit As Boolean = importProps.AutoFit

          '--- Set AutoFit
          importProps.AutoFit = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.AutoFormatter">
            <Doc>
        <summary>
          <para>Sets or returns an <see cref="P:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties.AutoFormatter"/> that specifies how the imported data should be formatted in the table.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DataImportPropertiesModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter">
            <summary>
            A simple class to make all the writing methods simpler, since you always need all of
            these.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter.SetRepeatBlock(System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter@,System.Int32@)">
            <summary>
            Creates a new data parameter for when entering a repeat block
            </summary>        
            <remarks>This sets the default data source, etc. and adds a DataRows for the block.
            </remarks>
            <param name="defaultDataSourceName">The name of the bookmark's data source</param>
            <param name="bookmarkData">Set to the data associated with the bookmar, and to be used
            for its children.</param>
            <returns><c>true</c>, if the name has an associated repeat block; false otherwise.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows">
            <summary>
            
            </summary>
            <remarks>
            Usage:
            <code>
            while (outputRow.Next())
              for (int i=0; i&lt;markers.length; i++)
                marker.ProcessingWrite(outputRow[i])
            </code></remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows.markers">
            <summary>
            Removed after initialize
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows.Next">
            <summary>
            Advances to the next row. Returns <c>true</c>, if the current row is now valid (i.e. it
            succeeded)
            </summary>
            <returns><c>true</c> if the row successfully advanced to the next row</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows.Peek(System.Int32,SoftArtisans.OfficeWriter.Shared.MarkerData@)">
            <summary>
            Returns the ith data in the next row; useful for comparing, and checking for duplicates.
            </summary>
            <param name="i">The index in the list of markers</param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows.UseMe">
            <summary>
            Whether this should be used for getting data (<c>true</c>), or the underlying data source
            should be used directly.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows.Item(System.Int32)">
            <summary>
            Returns the ith data in this row.
            </summary>
            <param name="i">The index in the list of markers</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRowsBinding">
            <summary>
            Binding wraps <see cref="T:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3"/> output.
            </summary>
            <remarks>Note, that this class ignores the column Number/name that you give it, because
            columns in <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataRows"/> are based on the index within the repeat block, and not on
            the data source. </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataSourceBinding">
            <summary>
            An incredibly simple implementation of <see cref="T:SoftArtisans.OfficeWriter.Shared.ISimpleBinding"/> for WordWriter.
            </summary>
            <remarks>To start this was just a simple wrapper for the data source, perhaps it will be
            updated later, to include more, or DataSource/ISimpleBinding wille be changed around so that
            DataSource can implement it.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ISimpleBinding">
            <summary>
            A Wrapper for the data source associated with a marker
            </summary>
            <remarks>Any <c>columnNumber</c> parameters should be the result from one of the 
            <c>GetColumnNumber</c> methods and <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnName(System.Int32,System.Boolean)"/>. It is expected that you will
            call GetFieldType before any of the other Get* Methods. GetString is the only method that 
            can handle <see cref="F:System.Data.OleDb.OleDbType.IUnknown"/> (i.e. columnNumber&lt;0)</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.Next">
            <summary>
            Advances the Data Source one row
            </summary>
            <returns><c>true</c> if the data source was successfully advanced</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetFieldType(System.Int32)">
            <summary>
            Get the type of the data in the given column, or <see cref="F:System.Data.OleDb.OleDbType.IUnknown"/> if 
            <paramref name="columnNumber"/> is less than 0
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)">
            <summary>
            Returns the column number for the column associated with the given name. 
            </summary>
            <param name="columnName">The name associated with the column to retrieve</param>
            <param name="optional">If this is <c>false</c> and <paramref name="columnName"/> is not
            associated with a column, an exception will be thrown.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)">
            <summary>
            Returns the column number as appropriate for the binding.
            </summary>
            <param name="columnNumber">The column number; a 1-based index, can be grabbed directly
            from the input</param>
            <param name="optional"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnName(System.Int32,System.Boolean)">
            <summary>
            Returns the column name associated with the given column
            </summary>
            <param name="columnNumber">The column number; a 1-based index, can be grabbed directly
            from the input</param>
            <param name="optional">If this is <c>true</c>, no exception will be thrown if the given
            number does not align with a data source</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetString(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetLong(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetFloat(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetShort(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetBoolean(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetDate(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetBytes(System.Int32)">
            <summary>
            Returns the binary information in the data source.
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.IsNull(System.Int32)">
            <summary>
            Returns whether the given column is <c>null</c> or not.
            </summary>
            <param name="columnNumber">The output from <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.String,System.Boolean)"/> or
            <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.GetColumnNumber(System.Int32,System.Boolean)"/>.</param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.ShouldntAccessAnyMoreData">
            <summary>
            Returns true if there is both no data left and that this means we should not access any
            column info. This should be used to avoid getting data from a row when we're past the end
            and therefore avoiding an exception.
            
            This was added in response to OWD-3041, where empty data sources would cause
            weird behavior. Getting information from a row after the end of the data stream would throw an
            exception in OOXML Excel, but not in Binary Excel. Binary Excel did this check already, and we
            need to add a similar check to OOXML Excel so that empty data sources don't cause an exception.
            
            In WordWriter this always returns false, since we don't want to avoid accessing info from a row.
            I think WordWriter handles this case already in some different way, but I haven't looked into it
            so I don't really know.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataSourceBinding.#ctor(SoftArtisans.OfficeWriter.Shared.DataSource)">
            <summary>
            Creates a new binding for a repeat block
            </summary>
            <param name="dataSource"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataSourceWritingBinding">
            <summary>
            An implementation of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding"/> that wraps a <see cref="T:SoftArtisans.OfficeWriter.Shared.DataSource"/>
            Primarily used for data outside of repeat blocks.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataSourceWritingData.GetDataType">
            <summary>
            Converts the <c>OleDbType</c> to a <see cref="T:SoftArtisans.OfficeWriter.Shared.MarkerData.Types"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DataViewWrapper">
            Provides an interface to a System.Data.DataView.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.#ctor(System.Data.DataView)">
            Takes a DataView and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.rewind">
            DataViews are always rewindable.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DataViewWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DefaultEscherRecordFactory">
            <summary> Generates escher records when provided the byte array containing those records.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherRecordFactory">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherRecordFactory">
            <summary> The escher record factory interface allows for the creation of escher
            records from a pointer into a data array.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecordFactory.createRecord(System.SByte[],System.Int32)">
            <summary> Create a new escher record from the data provided.  Does not attempt
            to fill the contents of the record however.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DefaultEscherRecordFactory.createRecord(System.SByte[],System.Int32)">
            <summary> Generates an escher record including the any children contained under that record.
            An exception is thrown if the record could not be generated.
            
            </summary>
            <param name="data">  The byte array containing the records
            </param>
            <param name="offset">The starting offset into the byte array
            </param>
            <returns> The generated escher record
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DefaultEscherRecordFactory.recordsToMap">
            <summary> Converts from a list of classes into a map that contains the record id as the key and
            the Constructor in the value part of the map.  It does this by using reflection to look up
            the RECORD_ID field then using reflection again to find a reference to the constructor.
            
            </summary>
            <param name="records">The records to convert
            </param>
            <returns> The map containing the id/constructor pairs.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DefaultEscherRecordFactory.isRecordIdValid(System.Int16,System.Int16)">
            <summary>Check if the recordId and options look valid
            
            This is used when looking through the table stream, figuring out if a record
            header is spotted. This is only used for debugging purposes</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.addImageToStorage(SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor)">
            
            <return>blip index of image added</return>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.addImageToStorage(SoftArtisans.OfficeWriter.Shared.EscherBSERecord)">
            <summary>Adds an image to the EscherBStoreContainerRecord and returns an index to the right EscherBSERecord
            in the EscherBStoreContainerRecord  </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.updateBlipStorage(SoftArtisans.OfficeWriter.WordWriter.WWOutputStream)">
            <summary>Write out Blips (BSESubRecords) to the main stream and set the BSERecords' offsets correctly</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.recursiveRead(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.Shared.EscherRecord})">
            <summary>recursiveRead iterates through a list of records</summary>
            
            <param>a list of EscherRecords</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.createDggRoot">
            <summary>Create an EscherDggContainerRecord </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.createDrawingGroup(System.Int32,System.Int32)">
            <summary>Create an EscherDgContainerRecord</summary>
            
            <param>shapeStart</param>
            <param>id</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.createSolverGroup">
            Create a EscherSolverContainerRecord. See its java file for more information.
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.createShapeGroup(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,System.Int32)">
            <summary>Create an EscherSpgrContainerRecord and fill it with other records</summary>
            <param>root</param>
            <param>shapeID</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.debugRecordsInTableStream(System.SByte[],System.Int32)">
            <summary>This is a function for debugging purposes. It goes through a stream (table stream),
            compiles a list of EscherRecords it finds (based on whether a set of bytes
            looks like a record id and options), and compares that list to the list of records
            in _records. Ideally this would detect missing records that were mistakenly skipped.
             
             NOTE: there may be false negatives, so treat this info accordingly</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.getFlatRecordList">
            <summary>This function does a depth first search through all the child records, compiling a list. It's used
            for debugging purposes.</summary>
            
            <return>a list of all child records, recursively found</return>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.findShapeGroupByID(System.Int32)">
            <summary>Iterate through the records and return an EscherSpContainerRecord which contains the shape with the
            correct shapeID.</summary>
            
            @param shapeID
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.findSpgrGroupByID(System.Int32)">
            <summary>Iterate through the records and return an EscherSpgrContainerRecord which contains an
            EscherSpContainerRecord with the correct shapeID.</summary>
            @param shapeID
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.createShape(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,SoftArtisans.OfficeWriter.Shared.EscherBSERecord,SoftArtisans.OfficeWriter.Shared.EscherOptRecord,SoftArtisans.OfficeWriter.Shared.EscherContainerRecord)">
            <summary>create a new shape, return next shape ID, increment necessary counters</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.toEscher(System.Int32,SoftArtisans.OfficeWriter.Shared.EscherBSERecord,SoftArtisans.OfficeWriter.Shared.EscherOptRecord,SoftArtisans.OfficeWriter.Shared.EscherContainerRecord)">
            <summary>Returns a newly created EscherSpContainerRecord with appropriate options set, based on the given
            parameters.</summary>  
            
            @param shapeID
            @param bse
            @param opt
            @param shapeGroup
            @return
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.incrementShapeID">
            <summary>increase LastMSOSPID, NumShapes, NumShapesSaved, and the cluster's count by 1</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.addExistingShape(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,System.Int32,SoftArtisans.OfficeWriter.Shared.EscherContainerRecord)">
            <summary>
            clone a shape group, set a new shape ID, remove the shape name, and return the result
            </summary>
            <param name="shapeGroup"></param>
            <param name="shapeID"></param>
            <param name="parentShapeGroup"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.updateTextboxID(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,System.Int32)">
            <summary>Update the textbox id (the index into _mainTextboxes, plus 1) for
            relevant areas of the EscherSpContainerRecord</summary>
            
            @param ecr
            @param shapeID
            @param parentShapeGroup
            @param newTextboxID
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.addExistingShapeGroup(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,System.Int32)">
            <summary>Sometimes a bunch of shapes are referenced together in an EscherSpgrContainerRecord. This clones them
            all, returning a mapping of old shape id's to new ones.</summary>
            
            @param spgrGroup
            @param parentShapeID
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.addSolvers(SoftArtisans.OfficeWriter.WordWriter.DggInfo,System.Collections.Generic.IList{System.Object[]})">
            Using a mapping of old shape ID's to new ones, clone the EscherSolverContainerRecord of another
            DggInfo, and switch the old shape IDs for new ones.
            
            @param dgginfo
            @param shapeIDMapping
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.getSolverGroup">
            <summary>Iterate through the records, and return the EscherSolverContainerRecord when it's found</summary>
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DggInfo.updateShapeIdProperties(SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,System.Int32,System.Int32)">
            <summary>
            Go through the properties of record and if they contain the old shape id, replace with the new shape id
            </summary>
            <param name="record"></param>
            <param name="oldShapeId"></param>
            <param name="newShapeId"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DggInfo.DefaultDg">
            <summary>Get the main drawing group. Create it if it doesn't already exist</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DggInfo.HeaderDefaultDg">
            <summary>Get the header drawing group. Create it if it doesn't already exist</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DggInfo.DggRoot">
            <summary>Get the EscherDggRecord</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryEntry">
            <summary> This interface defines methods specific to Directory objects
            managed by a Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Entry">
            <summary> This interface provides access to an object managed by a Filesystem
            instance. Entry objects are further divided into DocumentEntry and
            DirectoryEntry instances.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Entry.delete">
            <summary> Delete this Entry. This operation should succeed, but there are
            special circumstances when it will not:
            
            If this Entry is the root of the Entry tree, it cannot be
            deleted, as there is no way to create another one.
            
            If this Entry is a directory, it cannot be deleted unless it is
            empty.
            
            </summary>
            <returns> true if the Entry was successfully deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Entry.renameTo(System.String)">
            <summary> Rename this Entry. This operation will fail if:
            
            There is a sibling Entry (i.e., an Entry whose parent is the
            same as this Entry's parent) with the same name.
            
            This Entry is the root of the Entry tree. Its name is dictated
            by the Filesystem and many not be changed.
            
            </summary>
            <param name="newName">the new name for this Entry
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.Name">
            <summary> get the name of the Entry
            
            </summary>
            <returns> name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Entry.Parent">
            <summary> get this Entry's parent (the DirectoryEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            
            </summary>
            <returns> this Entry's parent; null iff this is the root Entry
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.getEntry(System.String)">
            <summary> get a specified Entry by name
            
            </summary>
            <param name="name">the name of the Entry to obtain.
            
            </param>
            <returns> the specified Entry, if it is directly contained in
            this DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.FileNotFoundException"> if no Entry with the specified
            name exists in this DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.HasEntry(System.String)">
            <summary>
            Returns whether the specified entry exists in this directory
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns><c>true</c> if the specified entry is in this directory; <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDocument(System.String,System.IO.Stream)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="stream">the InputStream from which to create the new
            DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry; the data will be provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.createDirectory(System.String)">
            <summary> create a new DirectoryEntry
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.Entries">
            <summary> get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            
            </summary>
            <returns> iterator; never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.Empty">
            <summary> is this DirectoryEntry empty?
            
            </summary>
            <returns> true if this instance contains no Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.EntryCount">
            <summary> find out how many Entry instances are contained directly within
            this DirectoryEntry
            
            </summary>
            <returns> number of immediately (no grandchildren etc.) contained
            Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryEntry.StorageClsid">
            <summary> Gets the storage clsid of the directory entry
            
            </summary>
            <returns> storage Class ID
            </returns>
            <summary> Sets the storage clsid for the directory entry
            
            </summary>
            <param name="clsidStorage">storage Class ID
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryNode">
            <summary> Simple implementation of DirectoryEntry
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EntryNode">
            <summary> Abstract implementation of Entry
            
            Extending classes should override isDocument() or isDirectory(), as
            appropriate
            
            Extending classes must override isDeleteOK()
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EntryNode._property">
            <summary>
             the DocumentProperty backing this object
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EntryNode._parent">
            <summary>
             this object's parent Entry
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.#ctor(SoftArtisans.OfficeWriter.Shared.Property,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DocumentNode. This method is not public by design; it
            is intended strictly for the internal use of extending classes
            
            </summary>
            <param name="property">the Property for this Entry
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.delete">
            <summary> Delete this Entry. This operation should succeed, but there are
            special circumstances when it will not:
            
            If this Entry is the root of the Entry tree, it cannot be
            deleted, as there is no way to create another one.
            
            If this Entry is a directory, it cannot be deleted unless it is
            empty.
            
            </summary>
            <returns> true if the Entry was successfully deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EntryNode.renameTo(System.String)">
            <summary> Rename this Entry. This operation will fail if:
            
            There is a sibling Entry (i.e., an Entry whose parent is the
            same as this Entry's parent) with the same name.
            
            This Entry is the root of the Entry tree. Its name is dictated
            by the Filesystem and many not be changed.
            
            </summary>
            <param name="newName">the new name for this Entry
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Property">
            <summary> grant access to the property
            
            </summary>
            <returns> the property backing this entry
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Root">
            <summary> is this the root of the tree?
            
            </summary>
            <returns> true if so, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Name">
            <summary> get the name of the Entry
            
            </summary>
            <returns> name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EntryNode.Parent">
            <summary> get this Entry's parent (the DocumentEntry that owns this
            Entry). All Entry objects, except the root Entry, has a parent.
            
            </summary>
            <returns> this Entry's parent; null iff this is the root Entry
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSViewable">
            <summary> Interface for a drill-down viewable object. Such an object has
            content that may or may not be displayed, at the discretion of the
            viewer. The content is returned to the viewer as an array or as an
            Iterator, and the object provides a clue as to which technique the
            viewer should use to get its content.
            
            A POIFSViewable object is also expected to provide a short
            description of itself, that can be used by a viewer when the
            viewable object is collapsed.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSViewable.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSViewable.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.#ctor(SoftArtisans.OfficeWriter.Shared.DirectoryProperty,SoftArtisans.OfficeWriter.Shared.POIFSFileSystem,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DirectoryNode. This method is not public by design; it
            is intended strictly for the internal use of this package
            
            </summary>
            <param name="property">the DirectoryProperty for this DirectoryEntry
            </param>
            <param name="filesystem">the POIFSFileSystem we belong to
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.getEntry(System.String)">
            <summary> get a specified Entry by name
            
            </summary>
            <param name="name">the name of the Entry to obtain.
            
            </param>
            <returns> the specified Entry, if it is directly contained in
            this DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.FileNotFoundException"> if no Entry with the specified
            name exists in this DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.HasEntry(System.String)">
            <summary>
            Returns whether the specified entry exists in this directory
            </summary>
            <param name="name">the name of the Entry to obtain.</param>
            <returns><c>true</c> if the specified entry is in this directory; <c>false</c> otherwise
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(System.String,System.IO.Stream)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="stream">the InputStream from which to create the new
            DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry; the data will be provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDirectory(System.String)">
            <summary> create a new DirectoryEntry
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.createDocument(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> create a new DocumentEntry
            
            </summary>
            <param name="document">the new document
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.changeName(System.String,System.String)">
            <summary> Change a contained Entry's name
            
            </summary>
            <param name="oldName">the original name
            </param>
            <param name="newName">the new name
            
            </param>
            <returns> true if the operation succeeded, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryNode.deleteEntry(SoftArtisans.OfficeWriter.Shared.EntryNode)">
            <summary> Delete an entry
            
            </summary>
            <param name="entry">the EntryNode to be deleted
            
            </param>
            <returns> true if the entry was deleted, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Path">
            <returns> this directory's path representation
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Entries">
            <summary> get an iterator of the Entry instances contained directly in
            this instance (in other words, children only; no grandchildren
            etc.)
            
            </summary>
            <returns> iterator; never null, but hasNext() may return false
            immediately (i.e., this DirectoryEntry is empty). All
            objects retrieved by next() are guaranteed to be
            implementations of Entry.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.Empty">
            <summary> is this DirectoryEntry empty?
            
            </summary>
            <returns> true if this instance contains no Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.EntryCount">
            <summary> find out how many Entry instances are contained directly within
            this DirectoryEntry
            
            </summary>
            <returns> number of immediately (no grandchildren etc.) contained
            Entry instances
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.StorageClsid">
            <summary> Gets the storage clsid of the directory entry
            
            </summary>
            <returns> storage Class ID
            </returns>
            <summary> Sets the storage clsid for the directory entry
            
            </summary>
            <param name="clsidStorage">storage Class ID
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.DirectoryEntry">
            <summary> is this a DirectoryEntry?
            
            </summary>
            <returns> true if the Entry is a DirectoryEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryNode.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DirectoryProperty">
            <summary> Directory property
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Property">
            <summary> This abstract base class is the ancestor of all classes
            implementing POIFS Property behavior.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> Constructor from byte data
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.writeData(System.IO.Stream)">
            <summary> Write the raw data to an OutputStream.
            
            </summary>
            <param name="stream">the OutputStream to which the data should be
            written.
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getSize">
            <summary> find out the document size
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.shouldUseSmallBlocks">
            <summary> Based on the currently defined size, should this property use
            small blocks?
            
            </summary>
            <returns> true if the size is less than _big_block_minimum_bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.isSmall(System.Int32)">
            <summary> does the length indicate a small document?
            
            </summary>
            <param name="length">length in bytes
            
            </param>
            <returns> true if the length is less than
            _big_block_minimum_bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setSize(System.Int32)">
            <summary> Set the size of the document associated with this Property
            
            </summary>
            <param name="size">the size of the document, in bytes
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.isValidIndex(System.Int32)">
            <summary> determine whether the specified index is valid
            
            </summary>
            <param name="index">value to be checked
            
            </param>
            <returns> true if the index is valid
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getNextChild">
            <summary> Get the next Child, if any
            
            </summary>
            <returns> the next Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.getPreviousChild">
            <summary> Get the previous Child, if any
            
            </summary>
            <returns> the previous Child; may return null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Property.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.Property.CompareTo(SoftArtisans.OfficeWriter.Shared.Property)" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.StartBlock">
            <returns> the start block
            </returns>
            <summary> Set the start block for the document referred to by this
            Property.
            
            </summary>
            <param name="startBlock">the start block index
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.StorageClsid">
            <summary> Sets the storage clsid, which is the Class ID of a COM object which
            reads and writes this stream
            </summary>
            <returns> storage Class ID for this property stream
            </returns>
            <summary> Sets the storage class ID for this property stream. This is the Class ID
            of the COM object which can read and write this property stream
            </summary>
            <param name="clsidStorage">Storage Class ID
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.NodeColor">
            <summary> Set the node color.
            
            </summary>
            <param name="nodeColor">the node color (red or black)
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ChildProperty">
            <summary> Set the child property.
            
            </summary>
            <param name="child">the child property's index in the Property Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ChildIndex">
            <summary> Get the child property (its index in the Property Table)
            
            </summary>
            <returns> child property index
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Index">
            <summary> get the index for this Property
            
            </summary>
            <returns> the index of this Property within its Property Table
            </returns>
            <summary> Set the index for this Property
            
            </summary>
            <param name="index">this Property's index within its containing
            Property Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.NextChildIndex">
            <summary> get the next sibling
            
            </summary>
            <returns> index of next sibling
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.PreviousChildIndex">
            <summary> get the previous sibling
            
            </summary>
            <returns> index of previous sibling
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Property.Name">
            <summary> Get the name of this property
            
            </summary>
            <returns> property name as String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Parent">
            <summary> Behavior for parent (directory) properties
            
            </summary>
            <author>  Marc Johnson27591@hotmail.com
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.addChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a new child to the collection of children
            
            </summary>
            <param name="property">the new child to be added; must not be null
            
            </param>
            <exception cref="!:IOException"> if the Parent already has a child with
            the same name
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.setPreviousChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the previous Child
            
            </summary>
            <param name="child">the new 'previous' child; may be null, which has
            the effect of saying there is no 'previous' child
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Parent.setNextChild(SoftArtisans.OfficeWriter.Shared.Child)">
            <summary> Set the next Child
            
            </summary>
            <param name="child">the new 'next' child; may be null, which has the
            effect of saying there is no 'next' child
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.Parent.Children">
            <summary> Get an iterator over the children of this Parent; all elements
            are instances of Property.
            
            </summary>
            <returns> Iterator of children; may refer to an empty collection
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.#ctor(System.String)">
            <summary> Default constructor
            
            </summary>
            <param name="name">the name of the directory
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.addChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a new child to the collection of children
            
            </summary>
            <param name="property">the new child to be added; must not be null
            
            </param>
            <exception cref="T:System.IO.IOException"> if we already have a child with the same
            name
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.changeName(SoftArtisans.OfficeWriter.Shared.Property,System.String)">
            <summary> Change a Property's name
            
            </summary>
            <param name="property">the Property whose name is being changed
            </param>
            <param name="newName">the new name for the Property
            
            </param>
            <returns> true if the name change could be made, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.deleteChild(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Delete a Property
            
            </summary>
            <param name="property">the Property being deleted
            
            </param>
            <returns> true if the Property could be deleted, else false
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DirectoryProperty.Children">
            <summary> Get an iterator over the children of this Parent; all elements
            are instances of Property.
            
            </summary>
            <returns> Iterator of children; may refer to an empty collection
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Document">
            <Doc>
      <summary>
        <para>Represents a Word document.</para>
      </summary>
      <remarks>
        <para>To create a new document, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Create"/>.  To open an existing document, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.IO.Stream)"/>.</para>
        <para>Note: <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> inherits from <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> and inherits a lot basic functionality from that class.  Be sure to see the <c>Element</c> API docs when looking for specific functionality.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Create a new Word document
          WordApplication app = new WordApplication();
          Document doc = app.Create();

          //--- Open an existing Word document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
        </code>
          <br/>
          <code>

          '--- Create a new Word document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()

          '--- Open an existing Word document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.GetBookmark(System.String)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Bookmark"/> object that represents the bookmark in this document that has the specified name.</para>
        </summary>
        <param name="name">
          <para>The name of the bookmark.</para>
        </param>
        <returns>
          <para>A <c>Bookmark</c> object representing the bookmark specified.</para>
        </returns>
        <example>
          <para>
            <code>

          Bookmark oBookmark = oDocument.GetBookmark("MyBookmark");
        </code>
            <br/>
            <code>

          Dim oBookmark As Bookmark = oDocument.GetBookmark("MyBookmark")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.GetVariable(System.String)">
            <Doc>
        <summary>
          <para>Returns the document variable specified by name.</para>
        </summary>
        <param name="name">
          <para>The name of the variable.</para>
        </param>
        <returns>
          <para>The document variable specified by name.  If the variable does not exist, <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.GetVariable(System.String)"/> returns null.</para>
        </returns>
        <example>
          <para>
            <code>
string docVariable = doc.GetVariable("var");</code>
            <br/>
            <code>
Dim docVariable As String = doc.GetVariable("var")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.SetVariable(System.String,System.String)">
            <Doc>
        <summary>Sets the value of the variable with the specified name.  If the variable does not exist, <c>setVariable</c> creates a new variable.  If the variable does exist, <c>setVariable</c> overwrites the existing variable.</summary>
        <param name="name">
          <para>The name of the variable.</para>
        </param>
        <param name="val">
          <para>The value of the variable.</para>
        </param>
        <example>
          <para>
            <code>
doc.SetVariable("platform", "Windows");</code>
            <br/>
            <code>
doc.SetVariable("platform", "Windows")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateDataImportProperties">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DataImportProperties"/> object, which you can then use to set options for importing data into a table in a Word document.</para>
        </summary>
        <returns>
          <para>A <c>DataImportProperties</c> object, which you can then use to set options for importing data into a table in a Word document.</para>
        </returns>
        <example>
          <para>
            <code>
DataImportProperties oDataImportProperties = oDocument.CreateDataImportProperties();</code>
            <br/>
            <code>
Dim oDataImportProperties As DataImportProperties = oDocument.CreateDataImportProperties()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateFont">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> object based on the font used by the Normal Style. You can then change the properties of this font and use it elsewhere.</para>
        </summary>
        <returns>
          <para>A <c>Font</c> object based on the font used by the Normal Style.</para>
        </returns>
        <example>
          <para>
            <code>
Font oFont = oDocument.CreateFont();</code>
            <br/>
            <code>
Dim oFont As Font = oDocument.CreateFont()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateParagraphFormatting">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> object based on the paragraph formatting used by the BodyText style. You can then change the properties of this font and use it elsewhere.</para>
        </summary>
        <returns>
          <para>A <c>ParagraphFormatting</c> object based on the paragraph formatting used by the BodyText style.</para>
        </returns>
        <example>
          <para>
            <code>
ParagraphFormatting oParagraphFormatting = oDocument.CreateParagraphFormatting();</code>
            <br/>
            <code>
Dim oParagraphFormatting As ParagraphFormatting = oDocument.CreateParagraphFormatting()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateTableFormatting">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting"/> object that represents the table formatting used by the NormalTable style.</para>
        </summary>
        <returns>
          <para>A <c>TableFormatting</c> object that represents the table formatting used by the NormalTable style.</para>
        </returns>
        <example>
          <para>
            <code>
TableFormatting oTableFormatting = oDocument.CreateTableFormatting();</code>
            <br/>
            <code>
Dim oTableFormatting As TableFormatting = oDocument.CreateTableFormatting()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Append(SoftArtisans.OfficeWriter.WordWriter.Document)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Append()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.Sections">
            <Doc>
        <summary>
          <para>Returns an array of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section"/> objects that represents all the sections in this Document.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.Watermark">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Watermark"/> object representing an image or text that appears in the background of a printed document.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.ViewSettings">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings"/> object that can be used to get and set various settings that pertain to how Word will display this document.</para>
        </summary>
        <example>
          <para>
            <code>

          WordViewSettings oWordViewSettings = oDocument.ViewSettings;
        </code>
            <br/>
            <code>

          Dim oWordViewSettings As WordViewSettings = oDocument.ViewSettings
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.CompatibilitySettings">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.CompatibilitySettings"/> object that can be used to get and set various settings that help Word display documents that were imported from earlier versions and competing products.</para>
        </summary>
        <example>
          <para>
            <code>

          CompatibilitySettings oCompatibilitySettings = oDocument.CompatibilitySettings;
        </code>
            <br/>
            <code>

          Dim oCompatibilitySettings As CompatibilitySettings = oDocument.CompatibilitySettings
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.HyphenSettings">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings"/> object that can be used to get and set the hyphenation settings for this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        </summary>
        <example>
          <para>
            <code>

          WordHyphenSettings oWordHyphenSettings = oDocument.HyphenSettings;
        </code>
            <br/>
            <code>

          Dim oWordHyphenSettings As WordHyphenSettings = oDocument.HyphenSettings
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.ChangeTracking">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking"/> object that can be used to get and set the change tracking settings for this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        </summary>
        <example>
          <para>
            <code>

          WordChangeTracking oWordChangeTracking = oDocument.ChangeTracking;
        </code>
            <br/>
            <code>

          Dim oWordChangeTracking As WordChangeTracking = oDocument.ChangeTracking
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.PrintFacingPages">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if the headers and footers should be different for odd and even pages, such as when the pages in this document will be mirrored. When set to <c>true</c>, it creates one header or footer for even-numbered pages and a different header or footer for odd-numbered pages.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Layout tab &gt; Headers and footers section &gt; Different odd and even</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PrintFacingPages
          bool printFacingPages = oDocument.PrintFacingPages;

          //--- Set PrintFacingPages
          oDocument.PrintFacingPages = true;
        </code>
            <br/>
            <code>

          '--- Return PrintFacingPages
          Dim printFacingPages As Boolean = oDocument.PrintFacingPages

          '--- Set PrintFacingPages
          oDocument.PrintFacingPages = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.UseWidowControl">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if widow control is in effect for this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        </summary>
        <remarks>
          <para>The default value for a new <c>Document</c> is <c>false</c>.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UseWidowControl
          bool useWidowControl = oDocument.UseWidowControl;

          //--- Set UseWidowControl
          oDocument.UseWidowControl = true;
        </code>
            <br/>
            <code>

          '--- Return UseWidowControl
          Dim useWidowControl As Boolean = oDocument.UseWidowControl

          '--- Set UseWidowControl
          oDocument.UseWidowControl = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.MergeStylesFromTemplate">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if Word will update the styles in the current document to match the styles in the attached Word template (i.e. Normal.dot) each time you open the document in Word. This should be set to <c>true</c> when you want to ensure that your document contains up-to-date style formatting.</para>
        </summary>
        <remarks>
          <para>The default value for a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> is <c>false</c>.</para>
          <para>MS Word equivalent: Tools menu &gt; Templates and Add-ins... &gt; Document template section &gt; Automatically update document styles</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return MergeStylesFromTemplate
          bool mergeStyles = oDocument.MergeStylesFromTemplate;

          //--- Set MergeStylesFromTemplate
          oDocument.MergeStylesFromTemplate = true;
        </code>
            <br/>
            <code>

          '--- Return MergeStylesFromTemplate
          Dim mergeStyles As Boolean = oDocument.MergeStylesFromTemplate

          '--- Set MergeStylesFromTemplate
          oDocument.MergeStylesFromTemplate = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DefaultTabWidth">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> representing the default tab width for this <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>. The value that is returned is in twips. One twip = (1/20 pt) or ( 1/1440 in).</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Tabs... &gt; Default tab stops</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DefaultTabWidth
          int defaultTabWidth = oDocument.DefaultTabWidth;

          //--- Set DefaultTabWidth to 1 inch
          oDocument.DefaultTabWidth = 1440;
        </code>
            <br/>
            <code>

          '--- Return DefaultTabWidth
          Dim defaultTabWidth As Integer = oDocument.DefaultTabWidth

          '--- Set DefaultTabWidth to 1 inch
          oDocument.DefaultTabWidth = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DateCreated">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object representing the date this document was created.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Created:</para>
        </remarks>
        <example>
          <para>
            <code>

          DateTime oDateTime = oDocument.DateCreated;
        </code>
            <br/>
            <code>

          Dim oDateTime As DateTime = oDocument.DateCreated
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DateRevised">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object representing the date this document was last revised.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Modified:</para>
        </remarks>
        <example>
          <para>
            <code>

          DateTime oDateTime = oDocument.DateRevised;
        </code>
            <br/>
            <code>

          Dim oDateTime As DateTime = oDocument.DateRevised
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DatePrinted">
            <Doc>
        <summary>
          <para>Returns a <c>DateTime</c> object representing the date this document was last printed using Word.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Printed:</para>
        </remarks>
        <example>
          <para>
            <code>

          DateTime oDateTime = oDocument.DatePrinted;
        </code>
            <br/>
            <code>

          Dim oDateTime As DateTime = oDocument.DatePrinted
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.NumWords">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of words in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Statistics listbox &gt; Words:</para>
        </remarks>
        <example>
          <para>
            <code>

          int numWords = oDocument.NumWords;
        </code>
            <br/>
            <code>

          Dim numWords As Integer = oDocument.NumWords
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.NumCharacters">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of characters in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Statistics listbox &gt; Characters:</para>
        </remarks>
        <example>
          <para>
            <code>

          int numCharacters = oDocument.NumCharacters;
        </code>
            <br/>
            <code>

          Dim numCharacters As Integer = oDocument.NumCharacters
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.NumParagraphs">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of paragraphs in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Statistics listbox &gt; Paragraphs:</para>
        </remarks>
        <example>
          <para>
            <code>

          int numParagraphs = oDocument.NumParagraphs;
        </code>
            <br/>
            <code>

          Dim numParagraphs As Integer = oDocument.NumParagraphs
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.NumPagesOnLastOpen">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of pages this document had when it was last opened in Word.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Statistics tab &gt; Statistics listbox &gt; Pages:</para>
        </remarks>
        <example>
          <para>
            <code>

          int numPages = oDocument.NumPagesOnLastOpen;
        </code>
            <br/>
            <code>

          Dim numPages As Integer = oDocument.NumPagesOnLastOpen
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.PrintDataInFormFields">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if Word will only print the data inside a form field in this document. This is typically used to print the data entered into an online form without printing the online form.</para>
        </summary>
        <remarks>
          <para>The default value for a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> is <c>false</c>.</para>
          <para>MS Word equivalent: File menu &gt; Print... &gt; Options... button &gt; Options for current document only section &gt; Print data only for forms <br/><br/>Or <br/><br/>File menu &gt; Page Setup &gt; Paper tab &gt; Print options... button &gt; Options for current document only section &gt; Print data only for forms</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PrintDataInFormFields
          bool printData = oDocument.PrintDataInFormFields;

          //--- Set PrintDataInFormFields
          oDocument.PrintDataInFormFields = true;
        </code>
            <br/>
            <code>

          '--- Return PrintDataInFormFields
          Dim printData As Boolean = oDocument.PrintDataInFormFields

          '--- Set PrintDataInFormFields
          oDocument.PrintDataInFormFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.SaveDataInFormField">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if Word will save only the data entered into a form field (instead of the field itself) for this document. When this is set to <c>true</c>, Word saves the data entered into an online form as a single, tab-delimited record so you can use it in a database. Word saves the file in Text Only file format.</para>
        </summary>
        <remarks>
          <para>The default value for a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> is <c>false</c>.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Save tab &gt; Save options section &gt; Save data only for forms</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SaveDataInFormField
          bool vSaveData = oDocument.SaveDataInFormField;

          //--- Set SaveDataInFormField
          oDocument.PrintDataInFormFields = true;
        </code>
            <br/>
            <code>

          '--- Return SaveDataInFormField
          Dim vSaveData As Boolean = oDocument.SaveDataInFormField

          '--- Set PrintDataInFormFields
          oDocument.SaveDataInFormField = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.GutterPosition">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter"/> object representing the gutter position in this document when it is opened in Word. If you have set up your document with facing pages or two pages per sheet (by using Mirror margins, Book fold, or 2 pages per sheet), then this option is not available. Possible values: Side, Top.</para>
        </summary>
        <remarks>
          <para>The default value for a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> is http://wiki.softartisans.com/display/WW8/Document.Gutter#Side.</para>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Margins section &gt; Gutter position:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return GutterPosition
          Document.Gutter oGutterPosition = oDocument.GutterPosition;

          //--- Set GutterPosition
          oDocument.GutterPosition = Document.Gutter.Top;
        </code>
            <br/>
            <code>

          '--- Return GutterPosition
          Dim oGutterPosition As Document.Gutter = oDocument.GutterPosition

          '--- Set GutterPosition
          oDocument.GutterPosition = Gutter.Top
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.AutoformatType">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat"/> object representing autoformat type for this document. Possible values: Normal, Letter, Email.</para>
        </summary>
        <remarks>
          <para>The default value for a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> is http://wiki.softartisans.com/display/WW8/Document.Autoformat#Normal.</para>
          <para>MS Word equivalent: Format menu &gt; Autoformat... &gt; Please select a document type to help improve the formatting process</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AutoformatType
          Document.Autoformat oAutoformatType = oDocument.AutoformatType;

          //--- Set AutoformatType
          oDocument.AutoformatType = Document.Autoformat.Letter;
        </code>
            <br/>
            <code>

          '--- Return AutoformatType
          Dim oAutoformatType As Document.Autoformat = oDocument.AutoformatType

          '--- Set AutoformatType
          oDocument.AutoformatType = Document.Autoformat.Letter
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DocumentProtection">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.DocumentProtection"/> object that can be used to get and set the protection settings that Word will apply to this document. (Only applicable to Word 2000 or above documents.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Protect document... (plus some additional settings)</para>
        </remarks>
        <example>
          <para>
            <code>

          DocumentProtection oDocumentProtection = oDocument.DocumentProtection;
        </code>
            <br/>
            <code>

          Dim oDocumentProtection As DocumentProtection = oDocument.DocumentProtection
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.Styles">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Styles"/> object that represents the Styles embedded in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Styles and Formatting...</para>
        </remarks>
        <example>
          <para>
            <code>

          Styles style = oDocument.Styles;
        </code>
            <br/>
            <code>

          Dim styles As Styles = oDocument.Styles
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.DocumentProperties">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Styles"/> object that represents the properties of this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties</para>
        </remarks>
        <example>
          <para>
            <code>

          DocumentProperties oDocumentProperties = oDocument.DocumentProperties;
        </code>
            <br/>
            <code>

          Dim oDocumentProperties As DocumentProperties = oDocument.DocumentProperties
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat"/> value specifies the type of AutoFormat settings to apply to a document.  To select an AutoFormat type in Microsoft Word:</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.Email">
            <Doc>
          <summary>The document is an email message</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.Letter">
            <Doc>
          <summary>The document is a letter</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.Normal">
            <Doc>
          <summary>General document</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Autoformat&quot;]/Member[@signature=&quot;Document.Autoformat.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Autoformat&quot;]/Member[@signature=&quot;Document.Autoformat.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Autoformat&quot;]/Member[@signature=&quot;Document.Autoformat.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Autoformat&quot;]/Member[@signature=&quot;Document.Autoformat.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.Autoformat.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Autoformat&quot;]/Member[@signature=&quot;Document.Autoformat.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter"/> value specifies the position of a document's gutter margin.  Gutter margins are used in documents that will be bound.  A gutter margin is an extra margin on the top or side of the page that ensures that the text is not obscured when the document is bound.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.Side">
            <Doc>
          <summary>The gutter margin will be on the left side of odd numbered pages and the right side of even numbered pages.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.Top">
            <Doc>
          <summary>The gutter margin will be at the top of the document.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Gutter&quot;]/Member[@signature=&quot;Document.Gutter.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Gutter&quot;]/Member[@signature=&quot;Document.Gutter.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Gutter&quot;]/Member[@signature=&quot;Document.Gutter.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Gutter&quot;]/Member[@signature=&quot;Document.Gutter.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Document.Gutter.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Document&quot;]/Member[@signature=&quot;Document.Gutter&quot;]/Member[@signature=&quot;Document.Gutter.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentAnnotation">
            <summary> Summary description for DocumentAnnotation.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentBlock">
            <summary> A block of document data.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor(SoftArtisans.OfficeWriter.Shared.RawDataBlock)">
            <summary> create a document block from a raw data block
            
            </summary>
            <param name="block">the raw data block
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor(System.IO.Stream)">
            <summary> Create a single instance initialized with data.
            
            </summary>
            <param name="stream">the InputStream delivering the data.
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.size">
            <summary> Get the number of bytes read for this block
            
            </summary>
            <returns> bytes read into the block
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.partiallyRead">
            <summary> Was this a partially read block?
            
            </summary>
            <returns> true if the block was only partially filled with data
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.convert(System.SByte[],System.Int32)">
            <summary> convert a single long array into an array of DocumentBlock
            instances
            
            </summary>
            <param name="array">the byte array to be converted
            </param>
            <param name="size">the intended size of the array (which may be smaller)
            
            </param>
            <returns> an array of DocumentBlock instances, filled from the
            input array
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.read(SoftArtisans.OfficeWriter.Shared.DocumentBlock[],System.SByte[],System.Int32)">
            <summary> read data from an array of DocumentBlocks
            
            </summary>
            <param name="blocks">the blocks to read from
            </param>
            <param name="buffer">the buffer to write the data into
            </param>
            <param name="offset">the offset into the array of blocks to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentBlock.FillByte">
            <returns> the fill byte used
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentBody">
            <summary> Summary description for DocumentBody.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentEndnote">
            <summary> Summary description for DocumentEndnote.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentEntry">
            <summary> This interface defines methods specific to Document objects
            managed by a Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentEntry.Size">
            <summary> get the size of the document, in bytes
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentFootnote">
            <summary> Summary description for DocumentFootnote.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentHeader">
            <summary> Summary description for DocumentHeader.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentHeaderTextbox">
            <summary> Summary description for DocumentHeaderTextbox.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentInputStream">
            <summary> This class provides methods to read a DocumentEntry managed by a
            Filesystem instance.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentEntry)">
            <summary> Create an InputStream from the specified DocumentEntry
            
            </summary>
            <param name="document">the DocumentEntry to be read
            
            </param>
            <exception cref="T:System.IO.IOException"> if the DocumentEntry cannot be opened
            (like, maybe it has been deleted?)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> Create an InputStream from the specified Document
            
            </summary>
            <param name="document">the Document to be read
            
            </param>
            <exception cref="T:System.IO.IOException"> if the DocumentEntry cannot be opened
            (like, maybe it has been deleted?)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.available">
            <summary> Returns the number of bytes that can be read (or skipped over)
            from this input stream without blocking by the next caller of a
            method for this input stream. The next caller might be the same
            thread or or another thread.
            
            </summary>
            <returns> the number of bytes that can be read from this input
            stream without blocking.
            
            </returns>
            <exception cref="T:System.IO.IOException"> on error (such as the stream has been
            closed)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.Close">
            <summary> Closes this input stream and releases any system resources
            associated with the stream.
            
            </summary>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.mark(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.markSupported">
            <summary> Tests if this input stream supports the mark and reset methods.
            
            </summary>
            <returns> true
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.ReadByte">
            <summary> Reads the next byte of data from the input stream. The value
            byte is returned as an int in the range 0 to 255. If no byte is
            available because the end of the stream has been reached, the
            value -1 is returned. The definition of this method in
            java.io.InputStream allows this method to block, but it won't.
            
            </summary>
            <returns> the next byte of data, or -1 if the end of the stream
            is reached.
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.read(System.SByte[])" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.read(System.SByte[],System.Int32,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.reset" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentInputStream.skip(System.Int64)">
            <summary> Skips over and discards n bytes of data from this input
            stream. The skip method may, for a variety of reasons, end up
            skipping over some smaller number of bytes, possibly 0. This
            may result from any of a number of conditions; reaching end of
            file before n bytes have been skipped is only one
            possibility. The actual number of bytes skipped is returned. If
            n is negative, no bytes are skipped.
            
            </summary>
            <param name="n">the number of bytes to be skipped.
            
            </param>
            <returns> the actual number of bytes skipped.
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentMain">
            <summary> Summary description for DocumentMain.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentNode">
            <summary> Simple implementation of DocumentEntry
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentNode.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentProperty,SoftArtisans.OfficeWriter.Shared.DirectoryNode)">
            <summary> create a DocumentNode. This method is not public by design; it
            is intended strictly for the internal use of this package
            
            </summary>
            <param name="property">the DocumentProperty for this DocumentEntry
            </param>
            <param name="parent">the parent of this entry
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentNode.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.Document">
            <summary> get the POIFSDocument
            
            </summary>
            <returns> the internal POIFSDocument
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.Size">
            <summary> get the zize of the document, in bytes
            
            </summary>
            <returns> size in bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.DocumentEntry">
            <summary> is this a DocumentEntry?
            
            </summary>
            <returns> true if the Entry is a DocumentEntry, else false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.DeleteOK">
            <summary> extensions use this method to verify internal rules regarding
            deletion of the underlying store.
            
            </summary>
            <returns> true if it's ok to delete the underlying store, else
            false
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentNode.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream">
            <summary> This class provides a wrapper over an OutputStream so that Document
            writers can't accidently go over their size limits
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary> Create a DocumentOutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the data is actually
            read
            </param>
            <param name="limit">the maximum number of bytes that can be written
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.WriteByte(System.Byte)">
            <summary> Writes the specified byte to this output stream. The general
            contract for write is that one byte is written to the output
            stream. The byte to be written is the eight low-order bits of
            the argument b. The 24 high-order bits of b are ignored.
            
            </summary>
            <param name="b">the byte.
            </param>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs. In particular,
            an IOException may be thrown if the
            output stream has been closed, or if the
            writer tries to write too much data.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.write(System.SByte[])">
            <summary> Writes b.length bytes from the specified byte array
            to this output stream.
            
            </summary>
            <param name="b">the data.
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Write(System.Byte[],System.Int32,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Flush">
            <summary> Flushes this output stream and forces any buffered output bytes
            to be written out.
            
            </summary>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.Close">
            <summary> Closes this output stream and releases any system resources
            associated with this stream. The general contract of close is
            that it closes the output stream. A closed stream cannot
            perform output operations and cannot be reopened.
            
            </summary>
            <exception cref="T:System.IO.IOException"> if an I/O error occurs.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentOutputStream.writeFiller(System.Int32,System.SByte)">
            <summary> write the rest of the document's data (fill in at the end)
            
            </summary>
            <param name="totalLimit">the actual number of bytes the corresponding
            document must fill
            </param>
            <param name="fill">the byte to fill remaining space with
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O error
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart">
            <summary>
            One portion of the document such as the main document or one of the headers.
            </summary>
            <remarks><see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)"/> ,<see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/>, 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.Rewrite(System.Xml.XmlWriter)"/>  are not supported by document parts.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.pathToBody">
            <summary>
            The path to the open tag of the body element in the document, or <c>null</c> if this is
            not the main document.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxDrawingId,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="reader"></param>
            <param name="propertyBag"></param>
            <param name="maxDrawingId"></param>
            <param name="groupAliases">
            A dictionary from groupAliases to the actual field names. These are global across the
            entire document (not just the document part.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.Process(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.WordTemplateData)">
            <summary>
            Processes the entire document, with the given data
            </summary>
            <remarks>If not overridden this will merely copy all xml to the output, and when a child
            block is reached, processing will be passed to that</remarks>
            <param name="reader">The Reader reading in the document for processing</param>
            <param name="writer">Where the resulting XML will be written to</param>
            <param name="wordTemplateData">The data supplied by the user, that is going to be
            replacing the mergefields</param>
            <param name="binaryDataStorage">Where all the images are stored, in order to eventually be
            written to the zip file</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.SetGlobalBookmark">
            <summary>
            Sets a global bookmark for mail merge within this document; only applicable for the main
            document part.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPart.IsDocument">
            <summary>
            Whether or not this is the main part of the document.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties">
            <summary>
            All the data structures that every block needs to maintain because they are document
            level (or higher) properties.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties.groupAliases">
            <summary>
            A dictionary from groupAliases to the actual field names. These are global across the
            entire document (not just the document part.
            </summary>
            <remarks>The reason that I didn't use <see cref="T:System.Collections.Specialized.StringDictionary"/>, is because it uses
            Culture-Independent comparisons and I have no real idea what that means, so I'd prefer
            to not have it throw exceptions when things collide when they shouldn't. Plus, using 
            ordinal comparisons is probably faster.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties.#ctor(SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxDrawingId,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            
            </summary>
            <param name="propertyBag"></param>
            <param name="maxDrawingId"></param>
            <param name="groupAliases">
            A dictionary from groupAliases to the actual field names. These are global across the
            entire document (not just the document part.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties.GroupAliases">
            <summary>
            A dictionary from groupAliases to the actual field names. These are global across the
            entire document (not just the document part.
            </summary>
            <remarks>The reason that I didn't use <see cref="T:System.Collections.Specialized.StringDictionary"/>, is because it uses
            Culture-Independent comparisons and I have no real idea what that means, so I'd prefer
            to not have it throw exceptions when things collide when they shouldn't. Plus, using 
            ordinal comparisons is probably faster.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties">
            <Doc>
      <summary>
        <para>This class contains all file properties that are used by Word and Windows Explorer to display and store metadata about documents. None of these properties will affect the content of a document.</para>
      </summary>
      <remarks>
        <para>You cannot create a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties"/> object using the <c>new</c> keyword. You must get an existing <c>DocumentProperties</c> object from a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        <para>MS Word equivalent: File menu &gt; Properties</para>
        <para>The following sample gets the DocumentProperties of a document so you can start working with these properties.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          DocumentProperties docProps = doc.DocumentProperties;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim docProps As DocumentProperties = doc.DocumentProperties
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.GetProperty(SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty)">
            <Doc>
        <summary>
          <para>Returns an <c>Object</c> that represents the value of the property specified.</para>
        </summary>
        <param name="property">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty"/> object that represents the built-in property to set.</para>
        </param>
        <returns>
          <para>An <c>Object</c> that represents the value of the property specified.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab &gt; Properties:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return "Author" Property
          string priority =
               (string)docProps.GetProperty(DocumentProperties.BuiltInProperty.Author);
        </code>
            <br/>
            <code>

          '--- Return "Author" Property
          Dim priority As String = _
               docProps.GetProperty(DocumentProperties.BuiltInProperty.Author)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.GetProperty(System.String)">
            <Doc>
        <summary>
          <para>Returns an <c>Object</c> that represents the value of the property specified.</para>
        </summary>
        <param name="propertyName">
          <para>A <c>String</c> representing the name of the property to retrieve.</para>
        </param>
        <returns>
          <para>An <c>Object</c> that represents the value of the property specified.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab &gt; Properties:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return "Priority" Property
          string priority = docProps.GetProperty("Priority");
        </code>
            <br/>
            <code>

          '--- Return "Priority" Property
          Dim priority As String = docProps.GetProperty("Priority")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.SetProperty(SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty,System.Object)">
            <Doc>
        <summary>
          <para>Sets the value of the specified property.</para>
        </summary>
        <param name="property">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty"/> object that represents the built-in property to set.</para>
        </param>
        <param name="propertyValue">
          <para>An <c>Object</c> that represents the value of the property specified.</para>
        </param>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab &gt; Properties:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set "Author" Property
          docProps.SetProperty(DocumentProperties.BuiltInProperty.Author, "Fred Jones");
        </code>
            <br/>
            <code>

          '--- Set "Priority" Property
          docProps.SetProperty(DocumentProperties.BuiltInProperty.Author, "Fred Jones")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.SetProperty(System.String,System.Object)">
            <Doc>
        <summary>
          <para>Sets the value of the specified property.</para>
        </summary>
        <param name="propertyName">
          <para>A <c>String</c> representing the name of the property to set.</para>
        </param>
        <param name="propertyValue">
          <para>An <c>Object</c> that represents the value of the property specified.</para>
        </param>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab &gt; Properties:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set "Priority" Property
          docProps.SetProperty("Priority", "high");
        </code>
            <br/>
            <code>

          '--- Set "Priority" Property
          docProps.SetProperty("Priority", "high")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.GetCustomProperty(System.String)">
            <Doc>
        <summary>
          <para>Returns an <c>Object</c> that represents the value of the custom property specified.</para>
        </summary>
        <param name="key">
          <para>The name of the property to retrieve.</para>
        </param>
        <returns>
          <para>An <c>Object</c> that represents the value of the custom property specified.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab &gt; Properties:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return "Priority" Custom Property
          string priority = docProps.GetCustomProperty("Priority");
        </code>
            <br/>
            <code>

          '--- Return "Priority" Custom Property
          Dim priority As String = docProps.GetCustomProperty("Priority")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.SetCustomProperty(System.String,System.Object)">
            <Doc>
        <summary>
          <para>Sets the specified custom property with a certain value.</para>
        </summary>
        <param name="key">
          <para>A <c>String</c> that represents name of the property to set.</para>
        </param>
        <param name="value">
          <para>An <c>Object</c> that represents the value of the custom property specified.</para>
        </param>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Custom tab</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set "Priority" Custom Property
          docProps.SetCustomProperty("Priority", "High");
        </code>
            <br/>
            <code>

          '--- Set "Priority" Custom Property
          docProps.SetCustomProperty("Priority", "High")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.RestoreDefaults">
            <Doc>
        <summary>
          <para>Sets all the Document properties for this document to their default values.</para>
        </summary>
        <example>
          <para>
            <code>

          docProps.RestoreDefaults();
        </code>
            <br/>
            <code>

          docProps.RestoreDefaults()
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Clear">
            <Doc>
        <summary>
          <para>Clears all the Document properties for this document.</para>
        </summary>
        <example>
          <para>
            <code>

          docProps.Clear();
        </code>
            <br/>
            <code>

          docProps.Clear()
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Application">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that is the name of the application that created this file.</para>
        </summary>
        <example>
          <para>
            <code>

          string application = docProps.Application;
        </code>
            <br/>
            <code>

          Dim application As String = docProps.Application
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Author">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that is the name of the author that created this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Author:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Author
          string author = docProps.Author;

          //--- Set Author
          docProps.Author = "John Doe";
        </code>
            <br/>
            <code>

          '--- Return Author
          Dim author As String = docProps.Author

          '--- Set Author
          docProps.Author = "John Doe"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Title">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that is the title of this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Title:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Title
          string title = docProps.Title;

          //--- Set Title
          docProps.Title = "Sample Word Document";
        </code>
            <br/>
            <code>

          '--- Return Author
          Dim title As String = docProps.Title

          '--- Set Author
          docProps.Title = "Sample Word Document"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Comments">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents the comments attached to this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Comments:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Comments
          string comments = docProps.Comments;

          //--- Set Comments
          docProps.Comments = "This is for our next presentation.";
        </code>
            <br/>
            <code>

          '--- Return Comments
          Dim comments As String = docProps.Comments

          '--- Set Comments
          docProps.Comments = "This is for our next presentation."
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Company">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents any company info added to this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Company:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Company
          string company = docProps.Company;

          //--- Set Company
          docProps.Company = "SoftArtisans, Inc.";
        </code>
            <br/>
            <code>

          '--- Return Company
          Dim company As String = docProps.Company

          '--- Set Company
          docProps.Company = "SoftArtisans, Inc."
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.CreationDate">
            <Doc>
        <summary>
          <para>Sets or returns an object that represents the creation date of this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; General tab &gt; Created:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return CreationDate
          DateTime oDateTime = docProps.CreationDate;

          //--- Set CreationDate
          docProps.CreationDate = DateTime.Now;
        </code>
            <br/>
            <code>

          '--- Return CreationDate
          Dim oDateTime As DateTime = docProps.CreationDate

          '--- Set CreationDate
          docProps.DateTime = DateTime.Now
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Keywords">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents any keywords that are added to this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Keywords:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Keywords
          string keywords = docProps.Keywords;

          //--- Set Keywords
          docProps.Keywords = "Confidential, Memo";
        </code>
            <br/>
            <code>

          '--- Return Keywords
          Dim keywords As String = docProps.Keywords

          '--- Set Keywords
          docProps.Keywords = "Confidential, Memo"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.LastSavedDate">
            <Doc>
        <summary>
          <para>Sets or returns a DateTime that represents the date this file was last saved.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return LastSavedDate
          DateTime oDateTime = docProps.LastSavedDate;

          //--- Set LastSavedDate
          docProps.LastSavedDate = DateTime.Now;
        </code>
            <br/>
            <code>

          '--- Return LastSavedDate
          Dim oDateTime As DateTime = docProps.LastSavedDate

          '--- Set LastSavedDate
          docProps.LastSavedDate = DateTime.Now
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Manager">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents the name of the manager in charge of this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Manager:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Manager
          string manager = docProps.Manager;

          //--- Set Manager
          docProps.Manager = "John Doe";
        </code>
            <br/>
            <code>

          '--- Return Manager
          Dim manager As String = docProps.Manager

          '--- Set Manager
          docProps.Manager = "John Doe"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.Subject">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents the subject of this file.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Properties &gt; Summary tab &gt; Subject:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Subject
          string subject = docProps.Subject;

          //--- Set Subject
          docProps.Subject = "Annual Meeting";
        </code>
            <br/>
            <code>

          '--- Return Subject
          Dim subject As String = docProps.Subject

          '--- Set Subject
          docProps.Subject = "Annual Meeting"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty">
            <Doc>
        <summary>
          <para>
            <c>{}DocumentProperties.BuiltInProperty</c> contains a set of built-in document property fields.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Application">
            <Doc>
          <summary>The application used to create the document </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Author">
            <Doc>
          <summary>Author </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Category">
            <Doc>
          <summary>Category </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Comments">
            <Doc>
          <summary>Comments </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Company">
            <Doc>
          <summary>Company </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.CreationDate">
            <Doc>
          <summary>Date the document was created </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.EditTime">
            <Doc>
          <summary>Total editing time in minutes </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Keywords">
            <Doc>
          <summary>Search keywords </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.LastPrintedDate">
            <Doc>
          <summary>Last date the document was printed </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.LastSavedBy">
            <Doc>
          <summary>User that saved the document last </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.LastSavedDate">
            <Doc>
          <summary>Date the document was last saved </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.LinksUpToDate">
            <Doc>
          <summary>Whether or not links in the document are up-to-date </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Manager">
            <Doc>
          <summary>Manager </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Notes">
            <Doc>
          <summary>Notes </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.RevisionNumber">
            <Doc>
          <summary>Revision number </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.ScaleOrCrop">
            <Doc>
          <summary>Scale or crop </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Subject">
            <Doc>
          <summary>Subject </summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Title">
            <Doc>
          <summary>Title </summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProperties&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty&quot;]/Member[@signature=&quot;DocumentProperties.BuiltInProperty.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentPropertiesModel.write(SoftArtisans.OfficeWriter.Shared.Storage)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentPropertiesModel.CreationDate">
            <method>  property=true returnType=System.DateTime </method>
            <method>  property=true paramType0=System.DateTime </method>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentPropertiesModel.LastSavedDate">
            <method>  property=true returnType=System.DateTime </method>
            <method>  property=true paramType0=System.DateTime </method>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DocumentProperty">
            <summary> Trivial extension of Property for POIFSDocuments
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.#ctor(System.String,System.Int32)">
            <summary> Constructor
            
            </summary>
            <param name="name">POIFSDocument name
            </param>
            <param name="size">POIFSDocument size
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DocumentProperty.preWrite">
            <summary> Perform whatever activities need to be performed prior to
            writing
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentProperty.Document">
            <summary> get the POIFSDocument
            
            </summary>
            <returns> the associated document
            </returns>
            <summary> set the POIFSDocument
            
            </summary>
            <param name="doc">the associated POIFSDocument
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DocumentProperty.Directory">
            <returns> true if a directory type Property
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection">
            <Doc>
      <summary>
        <para>This class is used to get and set document protection settings for a document.</para>
      </summary>
      <remarks>
        <para>You cannot create a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection"/> object using the <c>new</c> keyword. You must get an existing <c>DocumentProtection</c> object from a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>.</para>
        <para>MS Word equivalent: Tools menu &gt; Protect Document...</para>
        <para>The following sample gets the <c>DocumentProtection</c> object of a document so you can start working with these properties.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          DocumentProtection docProtect = doc.DocumentProtection;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim docProtect As DocumentProtection = doc.DocumentProtection
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.DocumentProtected">
            <Doc>
        <summary>
          <para>Sets or returns a protection level for the document. Possible values are: None, TrackChanges, Comments, Forms, and ReadOnly.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get ProtectionLevel
          DocumentProtection.ProtectionLevel level = docProtect.DocumentProtected;

          //--- Set ProtectionLevel to allow editing of Forms only
          docProtect.DocumentProtected = DocumentProtection.ProtectionLevel.Comments;
        </code>
            <br/>
            <code>

          '--- Get ProtectionLevel
          Dim level As DocumentProtection.ProtectionLevel = docProtect.DocumentProtected

          '--- Set ProtectionLevel to allow editing of Forms only
          docProtect.DocumentProtected = DocumentProtection.ProtectionLevel.Comments
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.AnnotationsLocked">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing whether or not annotations are locked in this document.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get AnnotationsLocked
          bool annotationsLocked = docProtect.AnnotationsLocked;

          //--- Set AnnotationsLocked
          docProtect.AnnotationsLocked = true;
        </code>
            <br/>
            <code>

          '--- Get AnnotationsLocked
          Dim annotationsLocked As Boolean = docProtect.AnnotationsLocked

          '--- Set AnnotationsLocked
          docProtect.AnnotationsLocked = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.SelectOnlyFormFields">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing whether or not Word will only allow selections in form fields for this document.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get SelectOnlyFormFields
          bool selectOnlyFormFields = docProtect.SelectOnlyFormFields;

          //--- Set SelectOnlyFormFields
          docProtect.SelectOnlyFormFields = true;
        </code>
            <br/>
            <code>

          '--- Get SelectOnlyFormFields
          Dim selectOnlyFormFields As Boolean = docProtect.SelectOnlyFormFields

          '--- Set SelectOnlyFormFields
          docProtect.SelectOnlyFormFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.StylesLocked">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing whether or not Word will lock the Styles in this document.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get StylesLocked
          bool stylesLocked = docProtect.StylesLocked;

          //--- Set StylesLocked
          oDocumentProperties.StylesLocked = true;
        </code>
            <br/>
            <code>

          '--- Get StylesLocked
          Dim stylesLocked As Boolean = docProtect.StylesLocked

          '--- Set StylesLocked
          docProtect.StylesLocked = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.AutoFormatOverride">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing whether or not Word will autoformat to override a style lock down in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Tools menu &gt; Protect Document... &gt; 1. Formatting restrictions section &gt; Settings... link &gt; Formatting section &gt; Allow AutoFormat to override formatting restrictions</para>
        </remarks>
        <example>
          <para>
            <code>

          //---- Get AutoFormatOverride
          bool autoFormatOverride = docProtect.AutoFormatOverride;

          //--- Set AutoFormatOverride
          docProtect.AutoFormatOverride = true;
        </code>
            <br/>
            <code>

          '--- Get AutoFormatOverride
          Dim autoFormatOverride As Boolean = docProtect.AutoFormatOverride

          '--- Set AutoFormatOverride
          docProtect.AutoFormatOverride = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.EnforceDocumentProtection">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing whether or not Word will enforce document protection in this document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Protect = Tools menu &gt; Protect Document... &gt; 3. Start enforcement section &gt; Yes, Start Enforcing Protection button &amp; Unprotect = Tools menu &gt; Unprotect Document</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get EnforceDocumentProtection
          bool enforceDocumentProtection = docProtect.EnforceDocumentProtection;

          //--- Set EnforceDocumentProtection
          docProtect.EnforceDocumentProtection = true;
        </code>
            <br/>
            <code>

          '--- Get EnforceDocumentProtection
          Dim enforceDocumentProtection As Boolean = docProtect.EnforceDocumentProtection

          '--- Set EnforceDocumentProtection
          docProtect.EnforceDocumentProtection = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel">
            <Doc>
        <summary>
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel"/> value specifies what type of editing is allowed in the document.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.Comments">
            <Doc>
          <summary>Only comments may be edited.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.Forms">
            <Doc>
          <summary>Only form fields may be modified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.None">
            <Doc>
          <summary>All parts of the document may be modified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.ReadOnly">
            <Doc>
          <summary>The document cannot be modified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.TrackChanges">
            <Doc>
          <summary>Word's change tracking feature will be enabled.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DocumentProtection.ProtectionLevel.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;DocumentProtection&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel&quot;]/Member[@signature=&quot;DocumentProtection.ProtectionLevel.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentTextbox">
            <summary> Summary description for DocumentTextbox.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DocumentVariables">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordStringTable">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordStringTable.populateAsciiStringList(System.SByte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Any child classes should override this method to get more generic behavior from a
            String table. 
            </summary>
            <param name="buf">
            </param>
            <param name="offset">
            </param>
            <param name="end">
            </param>
            <param name="extraLen">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentVariables.getAsciiStringValues(System.SByte[],System.Int32,System.Int32)">
            <param name="buf">
            </param>
            <param name="offset">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DocumentVariables.getUnicodeStringValues(System.SByte[],System.Int32,System.Int32)">
            <param name="buf">
            </param>
            <param name="offset">
            </param>
            <param name="i">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocxException">
            <summary>
            This exception is used to represent when there is an error with an Open Office file
            itself.
            </summary>
            <remarks>This only applies when the file itself is corrupt. Mostly this would be  stuff
            thrown by the reader, or if the file breaks our restrictions, such as a mergefield with
            no name, or a field with a mergefield that evaluates to it's operator, or something like
            that.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocxException.prefix">
            <summary>
            The text that is prefixed to the message passed to the constructor.
            </summary>
            <remarks>If you are writing tests, and need to check the message you can do:
            <code>prefix + "your message here"</code></remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType">
            <summary> Document Properties.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.setKeyVirusSession30(System.Int32)">
            <summary> Sets the KeyVirusSession30 field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.getKeyVirusSession30">
            <returns>  the KeyVirusSession30 field value.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FormatFlags">
            <summary> Get the formatFlags field for the DOP record.</summary>
            <summary> Set the formatFlags field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused2">
            <summary> Get the unused2 field for the DOP record.</summary>
            <summary> Set the unused2 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FootnoteInfo">
            <summary> Get the footnoteInfo field for the DOP record.</summary>
            <summary> Set the footnoteInfo field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOutlineDirtySave">
            <summary> Get the fOutlineDirtySave field for the DOP record.</summary>
            <summary> Set the fOutlineDirtySave field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo">
            <summary> Get the docinfo field for the DOP record.</summary>
            <summary> Set the docinfo field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo1">
            <summary> Get the docinfo1 field for the DOP record.</summary>
            <summary> Set the docinfo1 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo2">
            <summary> Get the docinfo2 field for the DOP record.</summary>
            <summary> Set the docinfo2 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo3">
            <summary> Get the docinfo3 field for the DOP record.</summary>
            <summary> Set the docinfo3 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DxaTab">
            <summary> Get the dxaTab field for the DOP record.</summary>
            <summary> Set the dxaTab field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.WSpare">
            <summary> Get the wSpare field for the DOP record.</summary>
            <summary> Set the wSpare field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DxaHotz">
            <summary> Get the dxaHotz field for the DOP record.</summary>
            <summary> Set the dxaHotz field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CConsecHypLim">
            <summary> Get the cConsecHypLim field for the DOP record.</summary>
            <summary> Set the cConsecHypLim field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.WSpare2">
            <summary> Get the wSpare2 field for the DOP record.</summary>
            <summary> Set the wSpare2 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DttmCreated">
            <summary> Get the dttmCreated field for the DOP record.</summary>
            <summary> Set the dttmCreated field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DttmRevised">
            <summary> Get the dttmRevised field for the DOP record.</summary>
            <summary> Set the dttmRevised field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DttmLastPrint">
            <summary> Get the dttmLastPrint field for the DOP record.</summary>
            <summary> Set the dttmLastPrint field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NRevision">
            <summary> Get the nRevision field for the DOP record.</summary>
            <summary> Set the nRevision field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.TmEdited">
            <summary> Get the tmEdited field for the DOP record.</summary>
            <summary> Set the tmEdited field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CWords">
            <summary> Get the cWords field for the DOP record.</summary>
            <summary> Set the cWords field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CCh">
            <summary> Get the cCh field for the DOP record.</summary>
            <summary> Set the cCh field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CPg">
            <summary> Get the cPg field for the DOP record.</summary>
            <summary> Set the cPg field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CParas">
            <summary> Get the cParas field for the DOP record.</summary>
            <summary> Set the cParas field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Edn">
            <summary> Get the Edn field for the DOP record.</summary>
            <summary> Set the Edn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Edn1">
            <summary> Get the Edn1 field for the DOP record.</summary>
            <summary> Set the Edn1 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CLines">
            <summary> Get the cLines field for the DOP record.</summary>
            <summary> Set the cLines field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CWordsFtnEnd">
            <summary> Get the cWordsFtnEnd field for the DOP record.</summary>
            <summary> Set the cWordsFtnEnd field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CChFtnEdn">
            <summary> Get the cChFtnEdn field for the DOP record.</summary>
            <summary> Set the cChFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CPgFtnEdn">
            <summary> Get the cPgFtnEdn field for the DOP record.</summary>
            <summary> Set the cPgFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CParasFtnEdn">
            <summary> Get the cParasFtnEdn field for the DOP record.</summary>
            <summary> Set the cParasFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CLinesFtnEdn">
            <summary> Get the cLinesFtnEdn field for the DOP record.</summary>
            <summary> Set the cLinesFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.LKeyProtDoc">
            <summary> Get the lKeyProtDoc field for the DOP record.</summary>
            <summary> Set the lKeyProtDoc field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.View">
            <summary> Get the view field for the DOP record.</summary>
            <summary> Set the view field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo4">
            <summary> Get the docinfo4 field for the DOP record.</summary>
            <summary> Set the docinfo4 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Adt">
            <summary> Get the adt field for the DOP record.</summary>
            <summary> Set the adt field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Doptypography">
            <summary> Get the doptypography field for the DOP record.</summary>
            <summary> Set the doptypography field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Dogrid">
            <summary> Get the dogrid field for the DOP record.</summary>
            <summary> Set the dogrid field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo5">
            <summary> Get the docinfo5 field for the DOP record.</summary>
            <summary> Set the docinfo5 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo6">
            <summary> Get the docinfo6 field for the DOP record.</summary>
            <summary> Set the docinfo6 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Asumyi">
            <summary> Get the asumyi field for the DOP record.</summary>
            <summary> Set the asumyi field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CChWS">
            <summary> Get the cChWS field for the DOP record.</summary>
            <summary> Set the cChWS field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CChWSFtnEdn">
            <summary> Get the cChWSFtnEdn field for the DOP record.</summary>
            <summary> Set the cChWSFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.GrfDocEvents">
            <summary> Get the grfDocEvents field for the DOP record.</summary>
            <summary> Set the grfDocEvents field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Virusinfo">
            <summary> Get the virusinfo field for the DOP record.</summary>
            <summary> Set the virusinfo field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Spare">
            <summary> Get the Spare field for the DOP record.</summary>
            <summary> Set the Spare field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Reserved1">
            <summary> Get the reserved1 field for the DOP record.</summary>
            <summary> Set the reserved1 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Reserved2">
            <summary> Get the reserved2 field for the DOP record.</summary>
            <summary> Set the reserved2 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CDBC">
            <summary> Get the cDBC field for the DOP record.</summary>
            <summary> Set the cDBC field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CDBCFtnEdn">
            <summary> Get the cDBCFtnEdn field for the DOP record.</summary>
            <summary> Set the cDBCFtnEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Reserved">
            <summary> Get the reserved field for the DOP record.</summary>
            <summary> Set the reserved field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NfcFtnRef">
            <summary> Get the nfcFtnRef field for the DOP record.</summary>
            <summary> Set the nfcFtnRef field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NfcEdnRef">
            <summary> Get the nfcEdnRef field for the DOP record.</summary>
            <summary> Set the nfcEdnRef field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.HpsZoonFontPag">
            <summary> Get the hpsZoonFontPag field for the DOP record.</summary>
            <summary> Set the hpsZoonFontPag field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DywDispPag">
            <summary> Get the dywDispPag field for the DOP record.</summary>
            <summary> Set the dywDispPag field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IlvlLastBulletMain">
            <summary> Get the ilvlLastBulletMain field for the DOP record.</summary>
            <summary> Set the ilvlLastBulletMain field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IlvlLastNumberMain">
            <summary> Get the ilvlLastNumberMain field for the DOP record.</summary>
            <summary> Set the ilvlLastNumberMain field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IstdClickTypePara">
            <summary> Get the istdClickTypePara field for the DOP record.</summary>
            <summary> Set the istdClickTypePara field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo7">
            <summary> Get the docinfo7 field for the DOP record.</summary>
            <summary> Set the docinfo7 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo8">
            <summary> Get the docinfo8 field for the DOP record.</summary>
            <summary> Set the docinfo8 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo9">
            <summary> Get the docinfo9 field for the DOP record.</summary>
            <summary> Set the docinfo9 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo10">
            <summary> Get the docinfo10 field for the DOP record.</summary>
            <summary> Set the docinfo10 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused6">
            <summary> Get the unused6 field for the DOP record.</summary>
            <summary> Set the unused6 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused7">
            <summary> Get the unused7 field for the DOP record.</summary>
            <summary> Set the unused7 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused8">
            <summary> Get the unused8 field for the DOP record.</summary>
            <summary> Set the unused8 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused9">
            <summary> Get the unused9 field for the DOP record.</summary>
            <summary> Set the unused9 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused10">
            <summary> Get the unused10 field for the DOP record.</summary>
            <summary> Set the unused10 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused11">
            <summary> Get the unused11 field for the DOP record.</summary>
            <summary> Set the unused11 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo11">
            <summary> Get the docinfo11 field for the DOP record.</summary>
            <summary> Set the docinfo11 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMaxListCacheMainDoc">
            <summary> Get the cpMaxListCacheMainDoc field for the DOP record.</summary>
            <summary> Set the cpMaxListCacheMainDoc field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo12">
            <summary> Get the docinfo12 field for the DOP record.</summary>
            <summary> Set the docinfo12 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo13">
            <summary> Get the docinfo13 field for the DOP record.</summary>
            <summary> Set the docinfo13 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.GrfFmtFilter">
            <summary> Get the grfFmtFilter field for the DOP record.</summary>
            <summary> Set the grfFmtFilter field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IFolioPages">
            <summary> Get the iFolioPages field for the DOP record.</summary>
            <summary> Set the iFolioPages field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpgText">
            <summary> Get the cpgText field for the DOP record.</summary>
            <summary> Set the cpgText field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Undocumented">
            <summary> Get the undocumented field for the DOP record.</summary>
            <summary> Set the undocumented field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMText">
            <summary> Get the cpMinRMText field for the DOP record.</summary>
            <summary> Set the cpMinRMText field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMFtn">
            <summary> Get the cpMinRMFtn field for the DOP record.</summary>
            <summary> Set the cpMinRMFtn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMHdd">
            <summary> Get the cpMinRMHdd field for the DOP record.</summary>
            <summary> Set the cpMinRMHdd field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMAtn">
            <summary> Get the cpMinRMAtn field for the DOP record.</summary>
            <summary> Set the cpMinRMAtn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMEdn">
            <summary> Get the cpMinRMEdn field for the DOP record.</summary>
            <summary> Set the cpMinRMEdn field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMTxbx">
            <summary> Get the cpMinRMTxbx field for the DOP record.</summary>
            <summary> Set the cpMinRMTxbx field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.CpMinRMHdrTxbx">
            <summary> Get the cpMinRMHdrTxbx field for the DOP record.</summary>
            <summary> Set the cpMinRMHdrTxbx field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.RsidRoot">
            <summary> Get the rsidRoot field for the DOP record.</summary>
            <summary> Set the rsidRoot field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo14">
            <summary> Get the docinfo14 field for the DOP record.</summary>
            <summary> Set the docinfo14 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Docinfo15">
            <summary> Get the docinfo15 field for the DOP record.</summary>
            <summary> Set the docinfo15 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DxaPageLock">
            <summary> Get the dxaPageLock field for the DOP record.</summary>
            <summary> Set the dxaPageLock field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.DyaPageLock">
            <summary> Get the dyaPageLock field for the DOP record.</summary>
            <summary> Set the dyaPageLock field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.PctFontLock">
            <summary> Get the pctFontLock field for the DOP record.</summary>
            <summary> Set the pctFontLock field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Grfitbid">
            <summary> Get the grfitbid field for the DOP record.</summary>
            <summary> Set the grfitbid field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused12">
            <summary> Get the unused12 field for the DOP record.</summary>
            <summary> Set the unused12 field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IlfoMacAtCleanup">
            <summary> Get the ilfoMacAtCleanup field for the DOP record.</summary>
            <summary> Set the ilfoMacAtCleanup field for the DOP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFacingPages">
            <returns>  the fFacingPages field value.
            </returns>
            <summary> Sets the fFacingPages field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWidowControl">
            <returns>  the fWidowControl field value.
            </returns>
            <summary> Sets the fWidowControl field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPMHMainDoc">
            <returns>  the fPMHMainDoc field value.
            </returns>
            <summary> Sets the fPMHMainDoc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.GrfSupression">
            <returns>  the grfSupression field value.
            </returns>
            <summary> Sets the grfSupression field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Fpc">
            <returns>  the fpc field value.
            </returns>
            <summary> Sets the fpc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused1">
            <returns>  the unused1 field value.
            </returns>
            <summary> Sets the unused1 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.RncFtn">
            <returns>  the rncFtn field value.
            </returns>
            <summary> Sets the rncFtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NFtn">
            <returns>  the nFtn field value.
            </returns>
            <summary> Sets the nFtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOnlyMacPics">
            <returns>  the fOnlyMacPics field value.
            </returns>
            <summary> Sets the fOnlyMacPics field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOnlyWinPics">
            <returns>  the fOnlyWinPics field value.
            </returns>
            <summary> Sets the fOnlyWinPics field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLabelDoc">
            <returns>  the fLabelDoc field value.
            </returns>
            <summary> Sets the fLabelDoc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHyphCapitals">
            <returns>  the fHyphCapitals field value.
            </returns>
            <summary> Sets the fHyphCapitals field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAutoHyphen">
            <returns>  the fAutoHyphen field value.
            </returns>
            <summary> Sets the fAutoHyphen field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFormNoFields">
            <returns>  the fFormNoFields field value.
            </returns>
            <summary> Sets the fFormNoFields field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLinkStyles">
            <returns>  the fLinkStyles field value.
            </returns>
            <summary> Sets the fLinkStyles field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRevMarking">
            <returns>  the fRevMarking field value.
            </returns>
            <summary> Sets the fRevMarking field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FBackup">
            <returns>  the fBackup field value.
            </returns>
            <summary> Sets the fBackup field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FExactCWords">
            <returns>  the fExactCWords field value.
            </returns>
            <summary> Sets the fExactCWords field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPagHidden">
            <returns>  the fPagHidden field value.
            </returns>
            <summary> Sets the fPagHidden field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPagResults">
            <returns>  the fPagResults field value.
            </returns>
            <summary> Sets the fPagResults field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLockAtn">
            <returns>  the fLockAtn field value.
            </returns>
            <summary> Sets the fLockAtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMirrorMargins">
            <returns>  the fMirrorMargins field value.
            </returns>
            <summary> Sets the fMirrorMargins field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused3">
            <returns>  the unused3 field value.
            </returns>
            <summary> Sets the unused3 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDfltTrueType">
            <returns>  the fDfltTrueType field value.
            </returns>
            <summary> Sets the fDfltTrueType field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPagSupressTopSpacing">
            <returns>  the fPagSupressTopSpacing field value.
            </returns>
            <summary> Sets the fPagSupressTopSpacing field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FProtEnabled">
            <returns>  the fProtEnabled field value.
            </returns>
            <summary> Sets the fProtEnabled field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDispFormFldSel">
            <returns>  the fDispFormFldSel field value.
            </returns>
            <summary> Sets the fDispFormFldSel field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRMView">
            <returns>  the fRMView field value.
            </returns>
            <summary> Sets the fRMView field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRMPrint">
            <returns>  the fRMPrint field value.
            </returns>
            <summary> Sets the fRMPrint field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused4">
            <returns>  the unused4 field value.
            </returns>
            <summary> Sets the unused4 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLockRev">
            <returns>  the fLockRev field value.
            </returns>
            <summary> Sets the fLockRev field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FEmbedFonts">
            <returns>  the fEmbedFonts field value.
            </returns>
            <summary> Sets the fEmbedFonts field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfNoTabForInd">
            <returns>  the oldfNoTabForInd field value.
            </returns>
            <summary> Sets the oldfNoTabForInd field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfNoSpaceRaiseLower">
            <returns>  the oldfNoSpaceRaiseLower field value.
            </returns>
            <summary> Sets the oldfNoSpaceRaiseLower field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfSuppressSpbfAfterPageBreak">
            <returns>  the oldfSuppressSpbfAfterPageBreak field value.
            </returns>
            <summary> Sets the oldfSuppressSpbfAfterPageBreak field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfWrapTrailSpaces">
            <returns>  the oldfWrapTrailSpaces field value.
            </returns>
            <summary> Sets the oldfWrapTrailSpaces field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfMapPrintTextColor">
            <returns>  the oldfMapPrintTextColor field value.
            </returns>
            <summary> Sets the oldfMapPrintTextColor field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfNoColumnBalance">
            <returns>  the oldfNoColumnBalance field value.
            </returns>
            <summary> Sets the oldfNoColumnBalance field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfConvMailMergeEsc">
            <returns>  the oldfConvMailMergeEsc field value.
            </returns>
            <summary> Sets the oldfConvMailMergeEsc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfSupressTopSpacing">
            <returns>  the oldfSupressTopSpacing field value.
            </returns>
            <summary> Sets the oldfSupressTopSpacing field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfOrigWordTableRules">
            <returns>  the oldfOrigWordTableRules field value.
            </returns>
            <summary> Sets the oldfOrigWordTableRules field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfTransparentMetafiles">
            <returns>  the oldfTransparentMetafiles field value.
            </returns>
            <summary> Sets the oldfTransparentMetafiles field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfShowBreaksInFrames">
            <returns>  the oldfShowBreaksInFrames field value.
            </returns>
            <summary> Sets the oldfShowBreaksInFrames field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.OldfSwapBordersFacingPgs">
            <returns>  the oldfSwapBordersFacingPgs field value.
            </returns>
            <summary> Sets the oldfSwapBordersFacingPgs field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Unused5">
            <returns>  the unused5 field value.
            </returns>
            <summary> Sets the unused5 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.RncEdn">
            <returns>  the rncEdn field value.
            </returns>
            <summary> Sets the rncEdn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NEdn">
            <returns>  the nEdn field value.
            </returns>
            <summary> Sets the nEdn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Epc">
            <returns>  the epc field value.
            </returns>
            <summary> Sets the epc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NfcFtnRef1">
            <returns>  the nfcFtnRef1 field value.
            </returns>
            <summary> Sets the nfcFtnRef1 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.NfcEdnRef1">
            <returns>  the nfcEdnRef1 field value.
            </returns>
            <summary> Sets the nfcEdnRef1 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPrintFormData">
            <returns>  the fPrintFormData field value.
            </returns>
            <summary> Sets the fPrintFormData field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSaveFormData">
            <returns>  the fSaveFormData field value.
            </returns>
            <summary> Sets the fSaveFormData field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FShadeFormData">
            <returns>  the fShadeFormData field value.
            </returns>
            <summary> Sets the fShadeFormData field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWCFtnEdn">
            <returns>  the fWCFtnEdn field value.
            </returns>
            <summary> Sets the fWCFtnEdn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.WvkSaved">
            <returns>  the wvkSaved field value.
            </returns>
            <summary> Sets the wvkSaved field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.WScaleSaved">
            <returns>  the wScaleSaved field value.
            </returns>
            <summary> Sets the wScaleSaved field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.ZkSaved">
            <returns>  the zkSaved field value.
            </returns>
            <summary> Sets the zkSaved field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRotateFontW6">
            <returns>  the fRotateFontW6 field value.
            </returns>
            <summary> Sets the fRotateFontW6 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IGutterPos">
            <returns>  the iGutterPos field value.
            </returns>
            <summary> Sets the iGutterPos field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoTabForInd">
            <returns>  the fNoTabForInd field value.
            </returns>
            <summary> Sets the fNoTabForInd field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoSpaceRaiseLower">
            <returns>  the fNoSpaceRaiseLower field value.
            </returns>
            <summary> Sets the fNoSpaceRaiseLower field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSupressSpdfAfterPageBreak">
            <returns>  the fSupressSpdfAfterPageBreak field value.
            </returns>
            <summary> Sets the fSupressSpdfAfterPageBreak field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWrapTrailSpaces">
            <returns>  the fWrapTrailSpaces field value.
            </returns>
            <summary> Sets the fWrapTrailSpaces field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMapPrintTextColor">
            <returns>  the fMapPrintTextColor field value.
            </returns>
            <summary> Sets the fMapPrintTextColor field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoColumnBalance">
            <returns>  the fNoColumnBalance field value.
            </returns>
            <summary> Sets the fNoColumnBalance field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FConvMailMergeEsc">
            <returns>  the fConvMailMergeEsc field value.
            </returns>
            <summary> Sets the fConvMailMergeEsc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSupressTopSpacing">
            <returns>  the fSupressTopSpacing field value.
            </returns>
            <summary> Sets the fSupressTopSpacing field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOrigWordTableRules">
            <returns>  the fOrigWordTableRules field value.
            </returns>
            <summary> Sets the fOrigWordTableRules field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTransparentMetafiles">
            <returns>  the fTransparentMetafiles field value.
            </returns>
            <summary> Sets the fTransparentMetafiles field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FShowBreaksInFrames">
            <returns>  the fShowBreaksInFrames field value.
            </returns>
            <summary> Sets the fShowBreaksInFrames field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSwapBordersFacingPgs">
            <returns>  the fSwapBordersFacingPgs field value.
            </returns>
            <summary> Sets the fSwapBordersFacingPgs field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSuppressTopSPacingMac5">
            <returns>  the fSuppressTopSPacingMac5 field value.
            </returns>
            <summary> Sets the fSuppressTopSPacingMac5 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTruncDxaExpand">
            <returns>  the fTruncDxaExpand field value.
            </returns>
            <summary> Sets the fTruncDxaExpand field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPrintBodyBeforeHeader">
            <returns>  the fPrintBodyBeforeHdr field value.
            </returns>
            <summary> Sets the fPrintBodyBeforeHdr field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoLeading">
            <returns>  the fNoLeading field value.
            </returns>
            <summary> Sets the fNoLeading field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMWSmallCaps">
            <returns>  the fMWSmallCaps field value.
            </returns>
            <summary> Sets the fMWSmallCaps field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Lvl">
            <returns>  the lvl field value.
            </returns>
            <summary> Sets the lvl field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FGramAllDone">
            <returns>  the fGramAllDone field value.
            </returns>
            <summary> Sets the fGramAllDone field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FGramAllClean">
            <returns>  the fGramAllClean field value.
            </returns>
            <summary> Sets the fGramAllClean field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSubsetFonts">
            <returns>  the fSubsetFonts field value.
            </returns>
            <summary> Sets the fSubsetFonts field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHideLastVersion">
            <returns>  the fHideLastVersion field value.
            </returns>
            <summary> Sets the fHideLastVersion field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHtmlDoc">
            <returns>  the fHtmlDoc field value.
            </returns>
            <summary> Sets the fHtmlDoc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSnapBorder">
            <returns>  the fSnapBorder field value.
            </returns>
            <summary> Sets the fSnapBorder field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FIncludeHeader">
            <returns>  the fIncludeHeader field value.
            </returns>
            <summary> Sets the fIncludeHeader field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FIncludeFooter">
            <returns>  the fIncludeFooter field value.
            </returns>
            <summary> Sets the fIncludeFooter field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FForcePageSizePag">
            <returns>  the fForcePageSizePag field value.
            </returns>
            <summary> Sets the fForcePageSizePag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMinFontSizePag">
            <returns>  the fMinFontSizePag field value.
            </returns>
            <summary> Sets the fMinFontSizePag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHaveVersions">
            <returns>  the fHaveVersions field value.
            </returns>
            <summary> Sets the fHaveVersions field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAutoVersions">
            <returns>  the fAutoVersions field value.
            </returns>
            <summary> Sets the fAutoVersions field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FVirusPrompted">
            <returns>  the fVirusPrompted field value.
            </returns>
            <summary> Sets the fVirusPrompted field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FVirusLoadSafe">
            <returns>  the fVirusLoadSafe field value.
            </returns>
            <summary> Sets the fVirusLoadSafe field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLADAllDone">
            <returns>  the fLADAllDone field value.
            </returns>
            <summary> Sets the fLADAllDone field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FEnvelopeVis">
            <returns>  the fEnvelopeVis field value.
            </returns>
            <summary> Sets the fEnvelopeVis field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMaybeTentativeListInDoc">
            <returns>  the fMaybeTentativeListInDoc field value.
            </returns>
            <summary> Sets the fMaybeTentativeListInDoc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMaybeFitText">
            <returns>  the fMaybeFitText field value.
            </returns>
            <summary> Sets the fMaybeFitText field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRelyOnCSS_WebOpt">
            <returns>  the fRelyOnCSS_WebOpt field value.
            </returns>
            <summary> Sets the fRelyOnCSS_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRelyOnVML_WebOpt">
            <returns>  the fRelyOnVML_WebOpt field value.
            </returns>
            <summary> Sets the fRelyOnVML_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAllowPNG_WebOpt">
            <returns>  the fAllowPNG_WebOpt field value.
            </returns>
            <summary> Sets the fAllowPNG_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.ScreenSize_WebOpt">
            <returns>  the screenSize_WebOpt field value.
            </returns>
            <summary> Sets the screenSize_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOrganizeInFolder_WebOpt">
            <returns>  the fOrganizeInFolder_WebOpt field value.
            </returns>
            <summary> Sets the fOrganizeInFolder_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FUseLongFileName_WebOpt">
            <returns>  the fUseLongFileName_WebOpt field value.
            </returns>
            <summary> Sets the fUseLongFileName_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IPixelsPerInch_WebOpt">
            <returns>  the iPixelsPerInch_WebOpt field value.
            </returns>
            <summary> Sets the iPixelsPerInch_WebOpt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWebOptionsInit">
            <returns>  the fWebOptionsInit field value.
            </returns>
            <summary> Sets the fWebOptionsInit field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMaybeEEL">
            <returns>  the fMaybeEEL field value.
            </returns>
            <summary> Sets the fMaybeEEL field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FCharLineUnits">
            <returns>  the fCharLineUnits field value.
            </returns>
            <summary> Sets the fCharLineUnits field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMaybeRTLTables">
            <returns>  the fMaybeRTLTables field value.
            </returns>
            <summary> Sets the fMaybeRTLTables field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoTabForInd2K">
            <returns>  the fNoTabForInd2K field value.
            </returns>
            <summary> Sets the fNoTabForInd2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoSpaceRaiseLower2K">
            <returns>  the fNoSpaceRaiseLower2K field value.
            </returns>
            <summary> Sets the fNoSpaceRaiseLower2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSuppressSpBfAfterPgBrk2K">
            <returns>  the fSuppressSpBfAfterPgBrk2K field value.
            </returns>
            <summary> Sets the fSuppressSpBfAfterPgBrk2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWrapTrailSpaces2K">
            <returns>  the fWrapTrailSpaces2K field value.
            </returns>
            <summary> Sets the fWrapTrailSpaces2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMapPrintTextColor2K">
            <returns>  the fMapPrintTextColor2K field value.
            </returns>
            <summary> Sets the fMapPrintTextColor2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoColumnBalance2K">
            <returns>  the fNoColumnBalance2K field value.
            </returns>
            <summary> Sets the fNoColumnBalance2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FConvMailMergeEsc2K">
            <returns>  the fConvMailMergeEsc2K field value.
            </returns>
            <summary> Sets the fConvMailMergeEsc2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSuppressTopSpacing2K">
            <returns>  the fSuppressTopSpacing2K field value.
            </returns>
            <summary> Sets the fSuppressTopSpacing2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FOrigWordTableRules2K">
            <returns>  the fOrigWordTableRules2K field value.
            </returns>
            <summary> Sets the fOrigWordTableRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTransparentMetafiles2K">
            <returns>  the fTransparentMetafiles2K field value.
            </returns>
            <summary> Sets the fTransparentMetafiles2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FShowBreaksInFrames2K">
            <returns>  the fShowBreaksInFrames2K field value.
            </returns>
            <summary> Sets the fShowBreaksInFrames2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSwapBordersFacingPgs2K">
            <returns>  the fSwapBordersFacingPgs2K field value.
            </returns>
            <summary> Sets the fSwapBordersFacingPgs2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLeaveBackSlashAlone2K">
            <returns>  the fLeaveBackSlashAlone2K field value.
            </returns>
            <summary> Sets the fLeaveBackSlashAlone2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FExpShRtn2K">
            <returns>  the fExpShRtn2K field value.
            </returns>
            <summary> Sets the fExpShRtn2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDntULTrlSpc2K">
            <returns>  the fDntULTrlSpc2K field value.
            </returns>
            <summary> Sets the fDntULTrlSpc2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDntBlnSbDbWid2K">
            <returns>  the fDntBlnSbDbWid2K field value.
            </returns>
            <summary> Sets the fDntBlnSbDbWid2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSuppressTopSpacingMac52K">
            <returns>  the fSuppressTopSpacingMac52K field value.
            </returns>
            <summary> Sets the fSuppressTopSpacingMac52K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTruncDxaExpand2K">
            <returns>  the fTruncDxaExpand2K field value.
            </returns>
            <summary> Sets the fTruncDxaExpand2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPrintBodyBeforeHeader2K">
            <returns>  the fPrintBodyBeforeHdr2K field value.
            </returns>
            <summary> Sets the fPrintBodyBeforeHdr2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoExtLeading2K">
            <returns>  the fNoExtLeading2K field value.
            </returns>
            <summary> Sets the fNoExtLeading2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMakeSpaceForUL2K">
            <returns>  the fMakeSpaceForUL2K field value.
            </returns>
            <summary> Sets the fMakeSpaceForUL2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FMWSmallCaps2K">
            <returns>  the fMWSmallCaps2K field value.
            </returns>
            <summary> Sets the fMWSmallCaps2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.F2ptExtLeadingOnly2K">
            <returns>  the f2ptExtLeadingOnly2K field value.
            </returns>
            <summary> Sets the f2ptExtLeadingOnly2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTruncFontHeight2K">
            <returns>  the fTruncFontHeight2K field value.
            </returns>
            <summary> Sets the fTruncFontHeight2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSubOnSize2K">
            <returns>  the fSubOnSize2K field value.
            </returns>
            <summary> Sets the fSubOnSize2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLineWrapLikeWord62K">
            <returns>  the fLineWrapLikeWord62K field value.
            </returns>
            <summary> Sets the fLineWrapLikeWord62K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWW6BorderRules2K">
            <returns>  the fWW6BorderRules2K field value.
            </returns>
            <summary> Sets the fWW6BorderRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FExactOnTop2K">
            <returns>  the fExactOnTop2K field value.
            </returns>
            <summary> Sets the fExactOnTop2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FExtraAfter2K">
            <returns>  the fExtraAfter2K field value.
            </returns>
            <summary> Sets the fExtraAfter2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWPSpace2K">
            <returns>  the fWPSpace2K field value.
            </returns>
            <summary> Sets the fWPSpace2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWPJust2K">
            <returns>  the fWPJust2K field value.
            </returns>
            <summary> Sets the fWPJust2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FPrintMet2K">
            <returns>  the fPrintMet2K field value.
            </returns>
            <summary> Sets the fPrintMet2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSpLayoutLikeWW82K">
            <returns>  the fSpLayoutLikeWW82K field value.
            </returns>
            <summary> Sets the fSpLayoutLikeWW82K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFtnLayoutLikeWW82K">
            <returns>  the fFtnLayoutLikeWW82K field value.
            </returns>
            <summary> Sets the fFtnLayoutLikeWW82K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontUseHtmlParagraphAutoSpacing2K">
            <returns>  the fDontUseHtmlParagraphAutoSpacing2K field value.
            </returns>
            <summary> Sets the fDontUseHtmlParagraphAutoSpacing2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontAdjustLineHeightInTable2K">
            <returns>  the fDontAdjustLineHeightInTable2K field value.
            </returns>
            <summary> Sets the fDontAdjustLineHeightInTable2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FForgetLastTabAlign2K">
            <returns>  the fForgetLastTabAlign2K field value.
            </returns>
            <summary> Sets the fForgetLastTabAlign2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FUseAutospaceForFullWidthAlpha2K">
            <returns>  the fUseAutospaceForFullWidthAlpha2K field value.
            </returns>
            <summary> Sets the fUseAutospaceForFullWidthAlpha2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAlignTablesRowByRow2K">
            <returns>  the fAlignTablesRowByRow2K field value.
            </returns>
            <summary> Sets the fAlignTablesRowByRow2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLayoutRawTableWidth2K">
            <returns>  the fLayoutRawTableWidth2K field value.
            </returns>
            <summary> Sets the fLayoutRawTableWidth2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLayoutTableRowsApart2K">
            <returns>  the fLayoutTableRowsApart2K field value.
            </returns>
            <summary> Sets the fLayoutTableRowsApart2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FUseWord97LineBreakingRules2K">
            <returns>  the fUseWord97LineBreakingRules2K field value.
            </returns>
            <summary> Sets the fUseWord97LineBreakingRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontBreakWrappedTables2K">
            <returns>  the fDontBreakWrappedTables2K field value.
            </returns>
            <summary> Sets the fDontBreakWrappedTables2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontSnapToGridInCell2K">
            <returns>  the fDontSnapToGridInCell2K field value.
            </returns>
            <summary> Sets the fDontSnapToGridInCell2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontAllowFieldEndSelect2K">
            <returns>  the fDontAllowFieldEndSelect2K field value.
            </returns>
            <summary> Sets the fDontAllowFieldEndSelect2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FApplyBreakingRules2K">
            <returns>  the fApplyBreakingRules2K field value.
            </returns>
            <summary> Sets the fApplyBreakingRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontWrapTextWithPunct2K">
            <returns>  the fDontWrapTextWithPunct2K field value.
            </returns>
            <summary> Sets the fDontWrapTextWithPunct2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDontUseAsianBreakRules2K">
            <returns>  the fDontUseAsianBreakRules2K field value.
            </returns>
            <summary> Sets the fDontUseAsianBreakRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FUseWord2002TableStyleRules2K">
            <returns>  the fUseWord2002TableStyleRules2K field value.
            </returns>
            <summary> Sets the fUseWord2002TableStyleRules2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FGrowAutoFit2K">
            <returns>  the fGrowAutoFit2K field value.
            </returns>
            <summary> Sets the fGrowAutoFit2K field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.VerCompatPreW10">
            <returns>  the verCompatPreW10 field value.
            </returns>
            <summary> Sets the verCompatPreW10 field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoMargPgvwSaved">
            <returns>  the fNoMargPgvwSaved field value.
            </returns>
            <summary> Sets the fNoMargPgvwSaved field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FNoMargPgvwPag">
            <returns>  the fNoMargPgvwPag field value.
            </returns>
            <summary> Sets the fNoMargPgvwPag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWebViewPag">
            <returns>  the fWebViewPag field value.
            </returns>
            <summary> Sets the fWebViewPag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSeeDrawingsPag">
            <returns>  the fSeeDrawingsPag field value.
            </returns>
            <summary> Sets the fSeeDrawingsPag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FBulletProofed">
            <returns>  the fBulletProofed field value.
            </returns>
            <summary> Sets the fBulletProofed field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FCorrupted">
            <returns>  the fCorrupted field value.
            </returns>
            <summary> Sets the fCorrupted field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSaveUim">
            <returns>  the fSaveUim field value.
            </returns>
            <summary> Sets the fSaveUim field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFilterPrivacy">
            <returns>  the fFilterPrivacy field value.
            </returns>
            <summary> Sets the fFilterPrivacy field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FInFReplaceNoRM">
            <returns>  the fInFReplaceNoRM field value.
            </returns>
            <summary> Sets the fInFReplaceNoRM field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSeenRepairs">
            <returns>  the fSeenRepairs field value.
            </returns>
            <summary> Sets the fSeenRepairs field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHasXML">
            <returns>  the fHasXML field value.
            </returns>
            <summary> Sets the fHasXML field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSeeScriptAnchorsPag">
            <returns>  the fSeeScriptAnchorsPag field value.
            </returns>
            <summary> Sets the fSeeScriptAnchorsPag field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FValidateXML">
            <returns>  the fValidateXML field value.
            </returns>
            <summary> Sets the fValidateXML field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FSaveIfInvalidXML">
            <returns>  the fSaveIfInvalidXML field value.
            </returns>
            <summary> Sets the fSaveIfInvalidXML field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FShowXMLErrors">
            <returns>  the fShowXMLErrors field value.
            </returns>
            <summary> Sets the fShowXMLErrors field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAlwaysMergeEmptyNamespace">
            <returns>  the fAlwaysMergeEmptyNamespace field value.
            </returns>
            <summary> Sets the fAlwaysMergeEmptyNamespace field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDoNotEmbedSystemFont">
            <returns>  the fDoNotEmbedSystemFont field value.
            </returns>
            <summary> Sets the fDoNotEmbedSystemFont field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FWordCompat">
            <returns>  the fWordCompat field value.
            </returns>
            <summary> Sets the fWordCompat field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FLiveRecover">
            <returns>  the fLiveRecover field value.
            </returns>
            <summary> Sets the fLiveRecover field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FEmbedFactoids">
            <returns>  the fEmbedFactoids field value.
            </returns>
            <summary> Sets the fEmbedFactoids field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFactoidXML">
            <returns>  the fFactoidXML field value.
            </returns>
            <summary> Sets the fFactoidXML field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFactoidAllDone">
            <returns>  the fFactoidAllDone field value.
            </returns>
            <summary> Sets the fFactoidAllDone field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFolioPrint">
            <returns>  the fFolioPrint field value.
            </returns>
            <summary> Sets the fFolioPrint field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FReverseFolio">
            <returns>  the fReverseFolio field value.
            </returns>
            <summary> Sets the fReverseFolio field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.ITextLineEnding">
            <returns>  the iTextLineEnding field value.
            </returns>
            <summary> Sets the iTextLineEnding field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FHidFcc">
            <returns>  the fHidFcc field value.
            </returns>
            <summary> Sets the fHidFcc field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAcetateShowMarkup">
            <returns>  the fAcetateShowMarkup field value.
            </returns>
            <summary> Sets the fAcetateShowMarkup field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAcetateShowAtn">
            <returns>  the fAcetateShowAtn field value.
            </returns>
            <summary> Sets the fAcetateShowAtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAcetateShowInsDel">
            <returns>  the fAcetateShowInsDel field value.
            </returns>
            <summary> Sets the fAcetateShowInsDel field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAcetateShowProps">
            <returns>  the fAcetateShowProps field value.
            </returns>
            <summary> Sets the fAcetateShowProps field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IstdTableDflt">
            <returns>  the istdTableDflt field value.
            </returns>
            <summary> Sets the istdTableDflt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.VerCompat">
            <returns>  the verCompat field value.
            </returns>
            <summary> Sets the verCompat field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FTreatLockAtnAsReadOnly">
            <returns>  the fTreatLockAtnAsReadOnly field value.
            </returns>
            <summary> Sets the fTreatLockAtnAsReadOnly field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FStyleLock">
            <returns>  the fStyleLock field value.
            </returns>
            <summary> Sets the fStyleLock field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAutoFmtOverride">
            <returns>  the fAutoFmtOverride field value.
            </returns>
            <summary> Sets the fAutoFmtOverride field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FRemoveWordML">
            <returns>  the fRemoveWordML field value.
            </returns>
            <summary> Sets the fRemoveWordML field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FApplyCustomXForm">
            <returns>  the fApplyCustomXForm field value.
            </returns>
            <summary> Sets the fApplyCustomXForm field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FStyleLockEnforced">
            <returns>  the fStyleLockEnforced field value.
            </returns>
            <summary> Sets the fStyleLockEnforced field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFakeLockAtn">
            <returns>  the fFakeLockAtn field value.
            </returns>
            <summary> Sets the fFakeLockAtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FIgnoreMixedContent">
            <returns>  the fIgnoreMixedContent field value.
            </returns>
            <summary> Sets the fIgnoreMixedContent field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FShowPlaceholderText">
            <returns>  the fShowPlaceholderText field value.
            </returns>
            <summary> Sets the fShowPlaceholderText field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.Grf">
            <returns>  the grf field value.
            </returns>
            <summary> Sets the grf field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FReadingModeInkLockDown">
            <returns>  the fReadingModeInkLockDown field value.
            </returns>
            <summary> Sets the fReadingModeInkLockDown field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FAcetateShowInkAtn">
            <returns>  the fAcetateShowInkAtn field value.
            </returns>
            <summary> Sets the fAcetateShowInkAtn field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FFilterDttm">
            <returns>  the fFilterDttm field value.
            </returns>
            <summary> Sets the fFilterDttm field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FEnforceDocProt">
            <returns>  the fEnforceDocProt field value.
            </returns>
            <summary> Sets the fEnforceDocProt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.IDocCurProt">
            <returns>  the iDocCurProt field value.
            </returns>
            <summary> Sets the iDocCurProt field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.DOPAbstractType.FDispBkSpSaved">
            <returns>  the fDispBkSpSaved field value.
            </returns>
            <summary> Sets the fDispBkSpSaved field value.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DoubleSidedStack`1">
            <summary>
            A stack that allows you to pop elements in both directions. 
            </summary>
            <typeparam name="T">The type of data to be stored in the stack.</typeparam>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1">
            <summary>
            A Linked List that can add another linked list in O(1).
            </summary>
            <remarks>This can be improved so as to implement IList&lt;T&gt;</remarks>
            <typeparam name="T">the type of the elements contained within this list</typeparam>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.Add(`0)">
            <summary>
            Add a new item to the end of the list.
            </summary>
            <param name="item">The new item to be added.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.AddFirst(`0)">
            <summary>
            Adds a new item to the beginning of this list.
            </summary>
            <param name="item">The new item to be added.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.InsertBeforeLast(`0)">
            <summary>
            Inserts a new item before the last item in the list.
            </summary>
            <param name="item">The new item to be added</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.AddAll(SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{`0})">
            <summary>
            Add all the elements from another list to the end of this one.
            </summary>
            <param name="other">Another list to append to this one. </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.ToList">
            <summary>
            Convert this list to a <code>List</code>; convenient for if you want to sort
            </summary>
            <returns>A List representation of this list</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.ToArray">
            <summary>
            Copies all the elements in this list to an array.
            </summary>
            <returns>An array of all the elements in this list</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.Equals(System.Object)">
            <summary>
            Determines if this list has the same objects as another <see cref="!:FastMergeLinkedList"/>
            .
            </summary>
            <remarks>This calls <see cref="M:System.Object.Equals(System.Object)"/> on the contained elements.
            </remarks>
            <param name="obj">Another <c>FastMergeLinkedList</c></param>
            <returns><c>true</c> if this list and the given list have the same objects in the same
            order.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DoubleSidedStack`1.PopFirst">
            <summary>
            Pops the first element off of the stack
            </summary>
            <remarks>This corresponds to <see cref="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.AddFirst(`0)"/></remarks>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DoubleSidedStack`1.PopLast">
            <summary>
            Pops the last element off of the stack
            </summary>
            <remarks>This corresponds to <see cref="M:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1.Add(`0)"/></remarks>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DummyDataSource">
            <summary>HACK: An implementation of a DataSource that does not have an end row and returns a blank string for all columns.
            When a NEXT field is encountered during template processing the original data source is shifted to the next record,
            if the original data source is exhausted the DummyDataSource s/b used, because otherwise for table cell repetitions the output file is corrupt
            (probably due to incorrect character run, cell or paragraph style updates at the end of processing.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DummyDataSource.getDate(System.String)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnName">  case-insensitive name of the column in the
            DataSource
            </param>
            <returns> data object, or null
            </returns>
            <throws>   provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DummyDataSource.getDate(System.Int32)">
            <summary> Retrieves data for the specified column</summary>
            <param name="aColumnIndex"> 0-based column index
            </param>
            <returns> data object, or null
            </returns>
            <throws>  provider-specific exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DumpToXml.DumpNotes(System.String)">
            <summary>
            Returns true if notes were actually printed
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DumpToXml.RemoveInvalidCharacters(System.Text.RegularExpressions.Match)">
            <summary>
            filters control characters but allows only properly-formed surrogate sequences
            </summary>
            <remarks>Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] |
            [#x10000-#x10FFFF]	/* any Unicode character, excluding the surrogate blocks, FFFE, and
            FFFF. */</remarks>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.DumpToXml.DumpSimpleDictionary``2(System.String,System.String,System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Dumps a dictionary where the keys can be converted to xml attributes
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase">
            <summary> This is the internal base class for the DynamicAccessor objects.
            This class lets you return or generate or access objects <b>dynamically</b>
            at runtime, for the DynamicWrapper class.
            This base class contains a dummy getObject method that generates
            strings on the fly: we use it in our test suite.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase.getObject(System.Int32,System.Int32)">
            <summary> Accessor method:</summary>
            <param name="row">row of the simulated ResultSet.
            </param>
            <param name="col">col of the simulated ResultSet.
            </param>
            <returns> object.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.DynamicWrapper">
            <summary> The intention of the DynamicWrapper.* classes was to generate
            objects as they are requested, rather than creating large structures
            in memory.  Unfortunately, most of the classes DataTable needs to work
            are sealed/final (ie. they can't be overridden to dynamically generate the
            data.  So the constructor for this class simply generates
            the appropriate structure in memory and looks like it's doing it as 
            requested.
            
            See NumberDataReader and StringDataReader for dynamically generated data
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.DynamicWrapper.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.String},SoftArtisans.OfficeWriter.Shared.DynamicAccessorBase)">
            <summary> Constructor.</summary>
            <param name="numColumns">how many columns are in the simulated ResultSet.
            </param>
            <param name="numRows">   how many rows are in the simulated ResultSet.
            </param>
            <param name="colNames">  String array of column names: should generally
            match numColumns, but excess columns are allows.
            </param>
            <param name="dynAccessor">accessor to get or create the value at runtime.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.DynamicWrapper.Rewindable">
            <summary>
            This property replaces getType() from ResultSet in java. We seem to only ever use it to see if it's rewindable
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ElementProperties">
            <summary>
            The pairs of start tags and *Pr elements that we handle going in and out of in bookmarks.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ElementProperties.prohibitBookmarks">
            <summary>
            if <c>true</c>, blocks will throw an exception if the reader reaches any bookmarks. This
            is to prevent nested bookmarks.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ElementProperties.CurrentState">
            <summary>
            A snapshot of the current position in the reader. This does not save the outer nested
            tables/paragraphs.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ElementProperties.ElementProperty">
            <summary>
            A specific set of open tag and *Pr elements, such as Paragraph or Table
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EmptyDisposable">
            <summary>
            Used when we return an IDisposable but we have nothing to dispose
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ErrorCodes">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Dec 30, 2003
            Time: 11:32:00 AM
            To change this template use Options | File Templates.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherArrayProperty">
            <summary> Escher array properties are the most wierd construction ever invented
            with all sorts of special cases.  I'm hopeful I've got them all.
            
            </summary>
            <author>  Glen Stampoultzis (glens at superlinksoftware.com)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty">
            <summary> A complex property differs from a simple property in that the data can not fit inside a 32 bit
            integer.  See the specification for more detailed information regarding exactly what is
            stored here.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherProperty">
            <summary> This is the abstract base class for all escher properties.
            
            </summary>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherOptRecord">
            
            </seealso>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperty.#ctor(System.Int16)">
            <summary> The id is distinct from the actual property number.  The id includes the property number the blip id
            flag and an indicator whether the property is complex or not.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperty.#ctor(System.Int16,System.Boolean,System.Boolean)">
            <summary> Constructs a new escher property.  The three parameters are combined to form a property
            id.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperty.serializeSimplePart(System.SByte[],System.Int32)">
            <summary> Escher properties consist of a simple fixed length part and a complex variable length part.
            The fixed length part is serialized first.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperty.serializeComplexPart(System.SByte[],System.Int32)">
            <summary> Escher properties consist of a simple fixed length part and a complex variable length part.
            The fixed length part is serialized first.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherProperty.PropertySize">
            <summary> Most properties are just 6 bytes in length.  Override this if we're
            dealing with complex properties.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.#ctor(System.Int16,System.SByte[])">
            <summary> Create a complex property using the property id and a byte array containing the complex
            data value.
            
            </summary>
            <param name="id">         The id consists of the property number, a flag indicating whether this is a blip id and a flag
            indicating that this is a complex property.
            </param>
            <param name="complexData">The value of this property.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.#ctor(System.Int16,System.Boolean,System.SByte[])">
            <summary> Create a complex property using the property number, a flag to indicate whether this is a
            blip reference and the complex property data.
            
            </summary>
            <param name="propertyNumber">The property number
            </param>
            <param name="isBlipId">      Whether this is a blip id.  Should be false.
            </param>
            <param name="complexData">   The value of this complex property.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.serializeSimplePart(System.SByte[],System.Int32)">
            <summary> Serializes the simple part of this property.  ie the first 6 bytes.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.serializeComplexPart(System.SByte[],System.Int32)">
            <summary> Serializes the complex part of this property
            
            </summary>
            <param name="data">The data array to serialize to
            </param>
            <param name="pos"> The offset within data to start serializing to.
            </param>
            <returns> The number of bytes serialized.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.Equals(System.Object)">
            <summary> Determine whether this property is equal to another property.
            
            </summary>
            <param name="o">The object to compare to.
            </param>
            <returns> True if the objects are equal.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.GetHashCode">
            <summary> Calculates a hashcode for this property.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.ToString">
            <summary> Retrieves the string representation for this property.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.ComplexData">
            <summary> Get the complex data value.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherComplexProperty.PropertySize">
            <summary> Calculates the number of bytes required to serialize this property.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherArrayProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherArrayProperty.setArrayData(System.SByte[],System.Int32)">
            <summary> We have this method because the way in which arrays in escher works
            is screwed for seemly arbitary reasons.  While most properties are
            fairly consistent and have a predictable array size, escher arrays
            have special cases.
            
            </summary>
            <param name="data">     The data array containing the escher array information
            </param>
            <param name="offset">   The offset into the array to start reading from.
            </param>
            <returns>  the number of bytes used by this complex property.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherArrayProperty.getActualSizeOfElements(System.Int16)">
            <summary> Sometimes the element size is stored as a negative number.  We
            negate it and shift it to get the real value.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord">
            <summary> The blip record is used to hold details about large binary objects that occur in escher such
            as JPEG, GIF, PICT and WMF files.  The contents of the stream is usually compressed.  Inflate
            can be used to decompress the data.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="!:java.util.zip.Inflater">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherRecord">
            <summary> The base abstract record from which all escher records are defined.  Subclasses will need
            to define methods for serialization/deserialization and for determining the record size.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.#ctor">
            <summary> Create a new instance</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.fillFields(System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> Delegates to fillFields(byte[], int, EscherRecordFactory)
            
            </summary>
            <seealso cref="!:fillFields(byte[], int, DataEscherRecordFactory)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> The contract of this method is to deserialize an escher record including
            it's children.
            
            </summary>
            <param name="data">     The byte array containing the serialized escher
            records.
            </param>
            <param name="offset">   The offset into the byte array.
            </param>
            <param name="recordFactory">    A factory for creating new escher records.
            </param>
            <returns>          The number of bytes written.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.readHeader(System.SByte[],System.Int32)">
            <summary> Reads the 8 byte header information and populates the <code>options</code>
            and <code>recordId</code> records.
            
            </summary>
            <param name="data">     the byte array to read from
            </param>
            <param name="offset">   the offset to start reading from
            </param>
            <returns>          the number of bytes remaining in this record.  This
            may include the children if this is a container.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.serialize">
            <summary> Serializes to a new byte array.  This is done by delegating to
            serialize(int, byte[]);
            
            </summary>
            <returns>  the serialized record.
            </returns>
            <seealso cref="!:serialize(int, byte[])">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.serialize(System.Int32,System.SByte[])">
            <summary> Serializes to an existing byte array without serialization listener.
            This is done by delegating to serialize(int, byte[], EscherSerializationListener).
            
            </summary>
            <param name="offset">   the offset within the data byte array.
            </param>
            <param name="data">     the data array to serialize to.
            </param>
            <returns>          The number of bytes written.
            
            </returns>
            <seealso cref="!:serialize(int, byte[], DataEscherSerializationListener)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> Serializes the record to an existing byte array.
            
            </summary>
            <param name="offset">   the offset within the byte array
            </param>
            <param name="data">     the data array to serialize to
            </param>
            <param name="listener"> a listener for begin and end serialization events.  This
            is useful because the serialization is
            hierarchical/recursive and sometimes you need to be able
            break into that.
            </param>
            <returns> the number of bytes written.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.Clone">
            <summary> Escher records may need to be clonable in the future.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.cloneHelper(SoftArtisans.OfficeWriter.Shared.EscherRecord)">
            <summary>common clone commands for EscherRecords. Each clone() function should call this
            
            It clones the first 8 bytes which are common to every record</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.getChild(System.Int32)">
            <summary> Returns the indexed child record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.display(System.IO.StreamWriter,System.Int32)">
            <summary> The display methods allows escher variables to print the record names
            according to their hierarchy.
            
            </summary>
            <param name="w">        The print writer to output to.
            </param>
            <param name="indent">   The current indent level.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRecord.getFlatRecordList">
            <summary>This returns an array with all the records listed in the order of a depth first search
            
            It's overridden in EscherContainerRecord to call this function for its children, too</summary>
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.ContainerRecord">
            <summary> Determine whether this is a container record by inspecting the option
            field.
            </summary>
            <returns>  true is this is a container field.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.RecordSize">
            <summary> Subclasses should effeciently return the number of bytes required to
            serialize the record.
            
            </summary>
            <returns>  number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.ChildRecords">
            <returns>  Returns the children of this record.  By default this will
            be an empty list.  EscherCotainerRecord is the only record
            that may contain children.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord">
            </seealso>
            <summary> Sets the child records for this record.  By default this will throw
            an exception as only EscherContainerRecords may have children.
            
            </summary>
            <param name="childRecords"> Not used in base implementation.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.RecordName">
            <summary> Subclasses should return the short name for this escher record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.Instance">
            <summary> Returns the instance part of the option record.
            
            </summary>
            <returns> The instance part of the record
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.Options">
            <summary> The options field for this record.  All records have one.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherRecord.RecordId">
            <summary> The current record id.
            
            </summary>
            <returns>  The 16 bit record id.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherRecord.EscherRecordHeader">
            <summary> This class reads the standard escher header.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.ToString">
            <summary> The string representation of this record.
            
            </summary>
            <returns> A string
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.compress(System.Byte[])">
            <summary>
            Compress the contents of the provided array
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.compress(System.SByte[])">
            <summary> Compress the contents of the provided array
            
            </summary>
            <param name="data">An uncompressed byte array
            </param>
            <seealso cref="!:b)">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.decompress(System.Byte[],System.Int32,System.Int32)">
            <summary> Decompresses a byte array.
            
            </summary>
            <param name="data">  The compressed byte array
            </param>
            <param name="pos">   The starting position into the byte array
            </param>
            <param name="length">The number of compressed bytes to decompress
            </param>
            <returns> An uncompressed byte array
            </returns>
            <seealso cref="!:InflaterInputStream#read">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.decompress(System.SByte[],System.Int32,System.Int32)">
            <summary> Decompresses a byte array.
            
            </summary>
            <param name="data">  The compressed byte array
            </param>
            <param name="pos">   The starting position into the byte array
            </param>
            <param name="length">The number of compressed bytes to decompress
            </param>
            <returns> An uncompressed byte array
            </returns>
            <seealso cref="!:InflaterInputStream#read">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.SecondaryUID">
            <summary> Retrieve the secondary UID</summary>
            <summary> Set the secondary UID</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.CacheOfSize">
            <summary> Retrieve the cache of the metafile size</summary>
            <summary> Set the cache of the metafile size</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.BoundaryTop">
            <summary> Retrieve the top boundary of the metafile drawing commands</summary>
            <summary> Set the top boundary of the metafile drawing commands</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.BoundaryLeft">
            <summary> Retrieve the left boundary of the metafile drawing commands</summary>
            <summary> Set the left boundary of the metafile drawing commands</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.BoundaryWidth">
            <summary> Retrieve the boundary width of the metafile drawing commands</summary>
            <summary> Set the boundary width of the metafile drawing commands</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.BoundaryHeight">
            <summary> Retrieve the boundary height of the metafile drawing commands</summary>
            <summary> Set the boundary height of the metafile drawing commands</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.Width">
            <summary> Retrieve the width of the metafile in EMU's (English Metric Units).</summary>
            <summary> Set the width of the metafile in EMU's (English Metric Units).</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.Height">
            <summary> Retrieve the height of the metafile in EMU's (English Metric Units).</summary>
            <summary> Set the height of the metafile in EMU's (English Metric Units).</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.CacheOfSavedSize">
            <summary> Retrieve the cache of the saved size</summary>
            <summary> Set the cache of the saved size</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.CompressionFlag">
            <summary> Is the contents of the blip compressed?</summary>
            <summary> Set whether the contents of the blip is compressed</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.Filter">
            <summary> Filter should always be 0</summary>
            <summary> Filter should always be 0</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord.Data">
            <summary> The BLIP data</summary>
            <summary> The BLIP data</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherBoolProperty">
            <summary> Represents a boolean property.  The actual utility of this property is in doubt because many
            of the properties marked as boolean seem to actually contain special values.  In other words
            they're not true booleans.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty">
            </seealso>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherProperty">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty">
            <summary> A simple property is of fixed length and as a property number in addition
            to a 32-bit value.  Properties that can't be stored in only 32-bits are
            stored as EscherComplexProperty objects.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.#ctor(System.Int16,System.Int32)">
            <summary> The id is distinct from the actual property number.  The id includes the property number the blip id
            flag and an indicator whether the property is complex or not.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.#ctor(System.Int16,System.Boolean,System.Boolean,System.Int32)">
            <summary> Constructs a new escher property.  The three parameters are combined to form a property
            id.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.serializeSimplePart(System.SByte[],System.Int32)">
            <summary> Serialize the simple part of the escher record.
            
            </summary>
            <returns> the number of bytes serialized.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.serializeComplexPart(System.SByte[],System.Int32)">
            <summary> Escher properties consist of a simple fixed length part and a complex variable length part.
            The fixed length part is serialized first.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.Equals(System.Object)">
            <summary> Returns true if one escher property is equal to another.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.GetHashCode">
            <summary> Returns a hashcode so that this object can be stored in collections that
            require the use of such things.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.ToString">
            <returns> the string representation of this property.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSimpleProperty.PropertyValue">
            <returns>  Return the 32 bit value of this property.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBoolProperty.#ctor(System.Int16,System.Int32)">
            <summary> Create an instance of an escher boolean property.
            
            </summary>
            <param name="propertyNumber">The property number
            </param>
            <param name="value">     The 32 bit value of this bool property
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBoolProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherBSERecord">
            <summary> The BSE record is related closely to the <code>EscherBlipRecord</code> and stores
            extra information about the blip.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherBlipRecord">
            </seealso>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.nestedBSESub">
            <summary>
            This allows us to keep track of whether the BSESub record is nested in this one or 
            created from elswhere
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.ToString">
            <summary> Calculate the string representation of this object</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.getBlipType(System.SByte)">
            <summary> Retrieve the string representation given a blip id.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.BlipTypeWin32">
            <summary> The expected blip type under windows (failure to match this blip type will result in
            Excel converting to this format).
            </summary>
            <summary> Set the expected win32 blip type</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.BlipTypeMacOS">
            <summary> The expected blip type under MacOS (failure to match this blip type will result in
            Excel converting to this format).
            </summary>
            <summary> Set the expected MacOS blip type</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Uid">
            <summary> 16 byte MD4 checksum.</summary>
            <summary> 16 byte MD4 checksum.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Tag">
            <summary> unused</summary>
            <summary> unused</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Size">
            <summary> Blip size in stream.</summary>
            <summary> Blip size in stream.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Ref">
            <summary> The reference count of this blip.</summary>
            <summary> The reference count of this blip.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Offset">
            <summary> File offset in the delay stream.</summary>
            <summary> File offset in the delay stream.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Usage">
            <summary> Defines the way this blip is used.</summary>
            <summary> Defines the way this blip is used.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.Name">
            <summary> The length in characters of the blip name.</summary>
            <summary> The length in characters of the blip name.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherBSERecord.NestedBseSubRecord">
            <summary>
            This allows us to keep track of whether the BSESub record is nested in this one or 
            created from elswhere
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherBStoreContainerRecord">
             <summary>This is an EscherContainerRecord which stores EscherBSERecords that reference some kind of data,
             like an image</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord">
            <summary> Escher container records store other escher records as children.
            The container records themselves never store any information beyond
            the standard header used by all escher records.  This one record is
            used to represent many different types of records.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.findShapeGroupByID(System.Int32)">
            <summary>If this EscherContainerRecord has a shape record with the correct ID, return the EscherContainerRecord 
            otherwise, try looking at the EscherContainerRecords inside this one</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.getFlatRecordList">
            <summary>This function is used for debugging. Other EscherRecords return a list of themselves, while
            EscherContainerRecords return a list of themselves and all their children. (By recursion, this
            includes their children's children too.)  </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.ChildRecords">
            <returns>  Returns the children of this record.  By default this will
            be an empty list.  EscherCotainerRecord is the only record
            that may contain children.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord">
            </seealso>
            <summary> Sets the child records for this record.  By default this will throw
            an exception as only EscherContainerRecords may have children.
            
            </summary>
            <param name="childRecords"> Not used in base implementation.
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.SpRecord">
            <summary>Get EscherSpRecord from inside an EscherContainerRecord</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.OptRecord">
            <summary>Get the EscherOptRecord inside this EscherContainerRecord, if it exists</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.TextboxRecord">
            <summary> Get the EscherTextboxRecord inside this EscherContainerRecord, if it exists</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherContainerRecord.Options">
            <summary>EscherContainerRecords' options are 0xnnnF, where n is the number of child records it
            contains (not including children of child records), and F is the hex number F.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord">
            <summary> The escher child achor record is used to specify the position of a shape under an
            existing group.  The first level of shape records use a EscherClientAnchor record instead.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.ToString">
            <summary> The string representation of this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.Dx1">
            <summary> Retrieves offset within the parent coordinate space for the top left point.</summary>
            <summary> Sets offset within the parent coordinate space for the top left point.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.Dy1">
            <summary> Gets offset within the parent coordinate space for the top left point.</summary>
            <summary> Sets offset within the parent coordinate space for the top left point.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.Dx2">
            <summary> Retrieves offset within the parent coordinate space for the bottom right point.</summary>
            <summary> Sets offset within the parent coordinate space for the bottom right point.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.Dy2">
            <summary> Gets the offset within the parent coordinate space for the bottom right point.</summary>
            <summary> Sets the offset within the parent coordinate space for the bottom right point.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord.RecordId">
            <summary> The record id for the EscherChildAnchorRecord.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord">
            <summary> The escher client anchor specifies which rows and cells the shape is bound to as well as
            the offsets within those cells.  Each cell is 1024 units wide by 256 units long regardless
            of the actual size of the cell.  The EscherClientAnchorRecord only applies to the top-most
            shapes.  Shapes contained in groups are bound using the EscherChildAnchorRecords.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.EscherChildAnchorRecord">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.ToString">
            <summary> Returns the string representation for this record.
            
            </summary>
            <returns> A string
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Flag">
            <summary> 0 = Move and size with Cells, 2 = Move but don't size with cells, 3 = Don't move or size with cells.</summary>
            <summary> 0 = Move and size with Cells, 2 = Move but don't size with cells, 3 = Don't move or size with cells.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Col1">
            <summary> The column number for the top-left position.  0 based.</summary>
            <summary> The column number for the top-left position.  0 based.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Dx1">
            <summary> The x offset within the top-left cell.  Range is from 0 to 1023.</summary>
            <summary> The x offset within the top-left cell.  Range is from 0 to 1023.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Row1">
            <summary> The row number for the top-left corner of the shape.</summary>
            <summary> The row number for the top-left corner of the shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Dy1">
            <summary> The y offset within the top-left corner of the current shape.</summary>
            <summary> The y offset within the top-left corner of the current shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Col2">
            <summary> The column of the bottom right corner of this shape.</summary>
            <summary> The column of the bottom right corner of this shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Dx2">
            <summary> The x offset withing the cell for the bottom-right corner of this shape.</summary>
            <summary> The x offset withing the cell for the bottom-right corner of this shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Row2">
            <summary> The row number for the bottom-right corner of the current shape.</summary>
            <summary> The row number for the bottom-right corner of the current shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.Dy2">
            <summary> The y offset withing the cell for the bottom-right corner of this shape.</summary>
            <summary> The y offset withing the cell for the bottom-right corner of this shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.RemainingData">
            <summary> Any remaining data in the record</summary>
            <summary> Any remaining data in the record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientAnchorRecord.RecordId">
            <summary> The record id for this record.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord">
            <summary> The EscherClientDataRecord is used to store client specific data about the position of a
            shape within a container.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.ToString">
            <summary> Returns the string representation of this record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.RemainingData">
            <summary> Any data recording this record.</summary>
            <summary> Any data recording this record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherClientDataRecord.RecordId">
            <summary> Returns the identifier of this record.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord">
             <summary>The EscherConnectorRuleRecord is used to show how shapes fit together. The documentation
             says "Governs a connector shape."</summary>
            
             <author>George Schneeloch</author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
             <summary>This method deserializes the record from a byte array.</summary>
            
             @param data          The byte array containing the escher record information
             @param offset        The starting offset into <code>data</code>.
             @param recordFactory May be null since this is not a container record.
             @return The number of bytes read from the byte array.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
             <summary>This method serializes this escher record into a byte array.</summary>
            
             @param offset   The offset into <code>data</code> to start writing the record data to.
             @param data     The byte array to serialize to.
             @param listener A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
             @return The number of bytes written.
             @see NullEscherSerializationListener
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.ToString">
            Returns the string representation of this record.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.RecordSize">
             Returns the number of bytes that are required to serialize this record.
            
             @return Number of bytes
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.RecordId">
            Returns the identifier of this record.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherConnectorRuleRecord.RecordName">
            The short name for this record
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherDgContainerRecord">
             <summary>This is an EscherContainerRecord which contains a drawing group. Usually there are two, one
             for the header/footer and one for the main document.</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherDggContainerRecord">
             <summary>This is an EscherContainerRecord which contains information common to all drawing groups, and
             maybe an EscherBStoreContainerRecord</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherDggRecord">
            <summary> This record defines the drawing groups used for a particular sheet.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDggRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDggRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDggRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDggRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDggRecord.ShapeIdMax">
            <summary> The maximum is actually the next available. shape id.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherDgRecord">
            <summary> This record simply holds the number of shapes in the drawing group and the
            last shape id used for this drawing group.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.ToString">
            <summary> Returns the string representation of this record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.NumShapes">
            <summary> The number of shapes in this drawing group.</summary>
            <summary> The number of shapes in this drawing group.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.LastMSOSPID">
            <summary> The last shape id used in this drawing group.</summary>
            <summary> The last shape id used in this drawing group.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherDgRecord.DrawingGroupId">
            <summary> Gets the drawing group id for this record.  This is encoded in the
            instance part of the option record.
            
            </summary>
            <returns>  a drawing group id.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherDump">
            <summary> Used to dump the contents of escher records to a PrintStream.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDump.dump(System.SByte[],System.Int32,System.Int32,System.IO.StreamWriter)">
            <summary> Decodes the escher stream from a byte array and dumps the results to
            a print stream.
            
            </summary>
            <param name="data">     The data array containing the escher records.
            </param>
            <param name="offset">   The starting offset within the data array.
            </param>
            <param name="size">     The number of bytes to read.
            </param>
            <param name="out">      The output stream to write the results to.
            
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDump.propName(System.Int16)">
            <summary> Returns a property name given a property id.  This is used only by the
            old escher dump routine.
            
            </summary>
            <param name="propertyId">   The property number for the name
            </param>
            <returns>  A descriptive name.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDump.getBlipType(System.SByte)">
            <summary> Returns the blip description given a blip id.
            
            </summary>
            <param name="b">  blip id
            </param>
            <returns>  A description.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDump.dec1616(System.Int32)">
            <summary> Straight conversion from OO.  Converts a type of float.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherDump.outHex(System.Int32,System.IO.Stream,System.IO.StreamWriter)">
            <summary> Dumps out a hex value by reading from a input stream.
            
            </summary>
            <param name="bytes">    How many bytes this hex value consists of.
            </param>
            <param name="in">       The stream to read the hex value from.
            </param>
            <param name="out">      The stream to write the nicely formatted hex value to.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherOptRecord">
            <summary> The opt record is used to store property values for a shape.  It is the key to determining
            the attributes of a shape.  Properties can be of two types: simple or complex.  Simple types
            are fixed length.  Complex properties are variable length.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            
            </param>
            <returns> The number of bytes written.
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.ToString">
            <summary> Retrieve the string representation of this record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.getEscherProperty(System.Int32)">
            <summary> The list of properties stored by this record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.getEscherPropertyByID(System.Int32)">
            <summary> Gets a property stored by this record using the id as the key
            
            </summary>
            <param name="id">The id of the property to get
            </param>
            <returns> The EscherProperty that has id.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.addEscherProperty(SoftArtisans.OfficeWriter.Shared.EscherProperty)">
            <summary> Add a property to this record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.sortProperties">
            <summary> Records should be sorted by property number before being stored.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.EscherProperties">
            <summary> The list of properties stored by this record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherOptRecord.Options">
            <summary> Automatically recalculate the correct option</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherProperties">
            <summary> Provides a list of all known escher properties including the description and
            type.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperties.getNameFromProperty(System.Int32)">
            <summary>getNameFromProperty takes a property id and returns the name. This was taken from the 2008
            Microsoft documentation and converted to these case statements with a script.</summary>
             
            @param number  A property ID
            @return  The name of the property
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherProperties.initProps">
            <summary>This function is older than the above function, getNameFromProperty(). One may contain
            properties that the other doesn't, so I'm leaving both in the file just in case.</summary>
            
            Concurrent users tried to initialize the properties HashMap, which caused the ConcurrentModificationException 
            mentioned in JIRA OWD-3114. This matches the java version fix, since synchronized on a static function is the same as lock(this).
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherPropertyFactory">
            <summary> Generates a property given a reference into the byte array storing that property.
            
            </summary>
            <author>  Glen Stampoultzis
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherPropertyFactory.createProperties(System.SByte[],System.Int32,System.Int16)">
            <summary> Create new properties from a byte array.
            
            </summary>
            <param name="data">             The byte array containing the property
            </param>
            <param name="offset">           The starting offset into the byte array
            </param>
            <returns>                  The new properties
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherPropertyMetaData">
            <summary> This class stores the type and description of an escher property.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherPropertyMetaData.#ctor(System.String)">
            <param name="description">The description of the escher property.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherPropertyMetaData.#ctor(System.String,System.SByte)">
            <param name="description">  The description of the escher property.
            </param>
            <param name="type">         The type of the property.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherRGBProperty">
            <summary> A color property.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherRGBProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSecondaryOptRecord">
             <summary>
             Secondary OPT records store different kinds of properties. See page 25 of the Office Drawing Binary
             Format Specification
             </summary>
            
             <author>George Schneeloch</author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSecondaryOptRecord.RecordName">
            <summary>The short name for this record</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSerializationListener">
            <summary> Interface for listening to escher serialization events.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSerializationListener.beforeRecordSerialize(System.Int32,System.Int16,SoftArtisans.OfficeWriter.Shared.EscherRecord)">
            <summary> Fired before a given escher record is serialized.
            
            </summary>
            <param name="offset">   The position in the data array at which the record will be serialized.
            </param>
            <param name="recordId"> The id of the record about to be serialized.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSerializationListener.afterRecordSerialize(System.Int32,System.Int16,System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecord)">
            <summary> Fired after a record has been serialized.
            
            </summary>
            <param name="offset">   The position of the end of the serialized record + 1
            </param>
            <param name="recordId"> The id of the record about to be serialized
            </param>
            <param name="size">     The number of bytes written for this record.  If it is a container
            record then this will include the size of any included records.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherShapePathProperty">
            <summary> Defines the constants for the various possible shape paths.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherShapePathProperty.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSolverContainerRecord">
             <summary>This is an EscherContainerRecord which contains rules which are used to connect one shape to another.</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSpContainerRecord">
             <summary>This EscherContainerRecord contains a shape (an EscherSpRecord and an EscherOptRecord, at least).</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSpgrContainerRecord">
             <summary>This EscherContainerRecord is a shape group, which contains other EscherSpContainerRecords.
             EscherSpgrContainerRecords might be nested</summary>
             
             <author>georges</author>
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord">
            <summary> The spgr record defines information about a shape group.  Groups in escher
            are simply another form of shape that you can't physically see.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.ToString">
            <returns>  the string representation of this record.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RectX1">
            <summary> The starting top-left coordinate of child records.</summary>
            <summary> The starting top-left coordinate of child records.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RectY1">
            <summary> The starting top-left coordinate of child records.</summary>
            <summary> The starting top-left coordinate of child records.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RectX2">
            <summary> The starting bottom-right coordinate of child records.</summary>
            <summary> The starting bottom-right coordinate of child records.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RectY2">
            <summary> The starting bottom-right coordinate of child records.</summary>
            <summary> The starting bottom-right coordinate of child records.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpgrRecord.RecordId">
            <summary> The 16 bit identifier of this shape group record.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord">
            <summary> A list of the most recently used colours for the drawings contained in
            this document.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.ToString">
            <returns>  a string representation of this record.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSplitMenuColorsRecord.RecordId">
            <returns>  the 16 bit identifer for this record.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherSpRecord">
            <summary> Together the the EscherOptRecord this record defines some of the basic
            properties of a shape.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> This method serializes this escher record into a byte array.
            
            </summary>
            <param name="offset">  The offset into <code>data</code> to start writing the record data to.
            </param>
            <param name="data">    The byte array to serialize to.
            </param>
            <param name="listener">A listener to retrieve start and end callbacks.  Use a <code>NullEscherSerailizationListener</code> to ignore these events.
            </param>
            <returns> The number of bytes written.
            
            </returns>
            <seealso cref="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.ToString">
            <returns>  the string representing this shape.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.decodeFlags(System.Int32)">
            <summary> Converts the shape flags into a more descriptive name.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.ShapeId">
            <returns>  A number that identifies this shape
            </returns>
            <summary> Sets a number that identifies this shape.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.Flags">
            <summary> The flags that apply to this shape.
            
            </summary>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_GROUP">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_CHILD">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_PATRIARCH">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_DELETED">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_OLESHAPE">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HAVEMASTER">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_FLIPHORIZ">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_FLIPVERT">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_CONNECTOR">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HAVEANCHOR">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_BACKGROUND">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HASSHAPETYPE">
            </seealso>
            <summary> The flags that apply to this shape.
            
            </summary>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_GROUP">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_CHILD">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_PATRIARCH">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_DELETED">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_OLESHAPE">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HAVEMASTER">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_FLIPHORIZ">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_FLIPVERT">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_CONNECTOR">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HAVEANCHOR">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_BACKGROUND">
            </seealso>
            <seealso cref="F:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.FLAG_HASSHAPETYPE">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherSpRecord.RecordId">
            <returns>  the 16 bit identifier for this record.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherTertiaryOptRecord">
             <summary>
             Tertiary OPT records store different kinds of properties. See page 25 of the Office Drawing Binary
             Format Specification
             </summary>
            
             <author>George Schneeloch</author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherTertiaryOptRecord.RecordName">
            <summary>The short name for this record</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord">
            <summary> Supports text boxes
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.thedata">
            <summary>The data for this record not including the the 8 byte header </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> Writes this record and any contained records to the supplied byte
            array.
            
            </summary>
            <returns>  the number of bytes written.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.Data">
            <summary>This is four bytes (AFAIK), where the 3rd byte is the index into _mainTextboxes, plus 1, 
            in WWDocument.java in WordWriter. All the other bytes are 0.
            
            This may or may not meanif anything in Excelwriter</summary>
             
            @param data
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.EscherTextboxRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FakePlexOfCps">
            <summary> This class is used to act as a placeholder in the PlexStorage. It is just a static blob. This 
            is necessary because Word expects trailing data for some plexes. So it has to be written out 
            after the corresponding Plex. The most efficient way to do this is to store it in the PlexStorage
            and let it be written out as a plex.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PlexOfCps">
            <summary> common data structure in a Word file. Contains an array of 4 byte ints in
            the front that relate to an array of abitrary data structures in the back.
            
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexOfCps.#ctor(System.SByte[],System.Int32,System.Int32,System.Int32)">
            <summary> Constructor
            
            </summary>
            <param name="size">The size in bytes of this PlexOfCps
            </param>
            <param name="sizeOfStruct">The size of the data structure type stored in
            this PlexOfCps.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexOfCps.normalizeCp(System.Int32,SoftArtisans.OfficeWriter.WordWriter.SubDocumentTable)">
            <param name="start">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexOfCps.getStructOffset(System.Int32)">
            <summary> Returns the offset, in bytes, from the beginning if this PlexOfCps to
            the data structure at index.
            
            </summary>
            <param name="index">The index of the data structure.
            
            </param>
            <returns> The offset, in bytes, from the beginning if this PlexOfCps to
            the data structure at index.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PlexOfCps.Length">
            <summary> returns the number of data structures in this PlexOfCps.
            
            </summary>
            <returns> The number of data structures in this PlexOfCps
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter">
            <summary>
            Class for converting FCs to CPs when reading in the file.
            </summary>
            <remarks>
            The old ComplexOffsetConverter had a complicated method for finding the
            beginning of a paragraph start that was contingent on where special
            characters where located. This may be necessary, but I don't think so. If
            problems arise add a method to TextPieceTable, findParagraphStart, and then
            use that start cp instead of the one from the PAPX.
            </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.ranges">
            <summary>
            A list of all the text ranges sorted by FC.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.#ctor(System.Collections.Generic.List{SoftArtisans.OfficeWriter.WordWriter.TextRange})">
            <summary>
            Creates a new converter for converting FCs to CPs.
            </summary>
            <param name="ranges">A list of all the text ranges read in from the file sorted by FC
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.FcToCp(System.Int32)">
            <summary>
            Returns the character position corresponding to the given file position.
            </summary>
            <remarks>
            The end of a text piece is exclusive, so this should only be used
            for inclusive FCs (ie. the end of a format entry should not use this, but
            everything else should)
            </remarks>
            <param name="fc">the file position to convert</param>
            <returns>the CP of the given FC or -1 if the Fc does not point to text</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.FcToCpAtEnd(System.Int32)">
            <summary>
            Returns the character position corresponding to the given end file
            position. 
            </summary>
            <remarks>The end of a text piece is exclusive, this will return
            the end of a text piece if the FC matches, and thus should only be used
            for the end of other exclusive ranges.
            </remarks>
            <param name="fc">the file position of the end of some range</param>
            <returns>the CP corresponding to the given FC or -1 if the FC does not point to 
            valid text</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.FcToCpOrNextValidCp(System.Int32)">
            <summary>
            Returns the character position corresponding to the next valid file
            position.
            </summary>
            <remarks>This is necessary for two situations:
            <ul>
            <li>The first entry in the first FKP saved by Word during a full save
            will have an FC of 0x600 instead of 0x800 where the text starts, thus
            that would be considered an invalid FC. This will return the start CP of
            the first text piece (which would be at FC:0x800), 0. </li>
            <li>The first entry in the first FKP of a complex save (at least by our
            template object) points to the endFC of the last save, which would be
            invalid. This will find the first text piece of that save, and return its
            start CP</li>
            </ul>
            </remarks>
            <param name="fc">the position in the file to search for</param>
            <returns>the CP of the start of the next text piece after the given FC or -1 if there 
            are no text pieces after the given FC</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.fcToCpAtEndOrPreviousValidCp(System.Int32)">
            <summary>
            Returns the character position corresponding to the given file position,
            or the next valid CP. 
            </summary>
            <remarks>This is pertinent to the start of a range where, if
            the fc points to text that is no longer valid, the cp will be bumped up
            to the start of the following text piece. This should be used in
            conjunction with {@link #fcToCpAtEndOrPreviousValidCp(int)} for finding
            the end of the range, and then you should check that this falls before
            the respective end character position, because if the entire range points
            to invalid text, the range is invalid. Note: the end of a text piece is
            exclusive, so this should only be used for inclusive FCs (ie. the end of
            a format entry should not use this, but everything else should)
            </remarks>
            <param name="fc">the file position to convert</param>
            <returns>the CP of the given FC or, if the FC does not point to valid text, the CP of 
            the next FC which does point to valid text, or if there is no valid text after the 
            given FC, -1</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter.toString">
            <summary>
             returns a string useful for debugging purposes. 
            </summary>
            <remarks>Should an actual toString() method be needed, it should create the string in 
            the constructor and cache it.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Ffn">
            <summary> FFN - Font Family Name. FFN is a data structure that stores the names of the Main
            Font and that of Alternate font as an array of characters. It has also a header
            that stores info about the whole structure and the fonts
            
            </summary>
            <author>  Praveen Mathew
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType">
            <summary> File information Block.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  Andrew C. Oliver
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.getNFib">
            <summary> Get the nFib field for the FIB record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.setNFib(System.Int32)">
            <summary> Set the nFib field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.WIdent">
            <summary> Get the wIdent field for the FIB record.</summary>
            <summary> Set the wIdent field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.NProduct">
            <summary> Get the nProduct field for the FIB record.</summary>
            <summary> Set the nProduct field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.Lid">
            <summary> Get the lid field for the FIB record.</summary>
            <summary> Set the lid field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.PnNext">
            <summary> Get the pnNext field for the FIB record.</summary>
            <summary> Set the pnNext field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.Options">
            <summary> Get the options field for the FIB record.</summary>
            <summary> Set the options field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.NFibBack">
            <summary> Get the nFibBack field for the FIB record.</summary>
            <summary> Set the nFibBack field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.LKey">
            <summary> Get the lKey field for the FIB record.</summary>
            <summary> Set the lKey field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.Envr">
            <summary> Get the envr field for the FIB record.</summary>
            <summary> Set the envr field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.History">
            <summary> Get the history field for the FIB record.</summary>
            <summary> Set the history field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.Chs">
            <summary> Get the chs field for the FIB record.</summary>
            <summary> Set the chs field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.ChsTables">
            <summary> Get the chsTables field for the FIB record.</summary>
            <summary> Set the chsTables field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FcMin">
            <summary> Get the fcMin field for the FIB record.</summary>
            <summary> Set the fcMin field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FcMac">
            <summary> Get the fcMac field for the FIB record.</summary>
            <summary> Set the fcMac field for the FIB record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FDot">
            <returns>  the fDot field value.
            </returns>
            <summary> Sets the fDot field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FGlsy">
            <returns>  the fGlsy field value.
            </returns>
            <summary> Sets the fGlsy field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FComplex">
            <returns>  the fComplex field value.
            </returns>
            <summary> Sets the fComplex field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FHasPic">
            <returns>  the fHasPic field value.
            </returns>
            <summary> Sets the fHasPic field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.CQuickSaves">
            <returns>  the cQuickSaves field value.
            </returns>
            <summary> Sets the cQuickSaves field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FEncrypted">
            <returns>  the fEncrypted field value.
            </returns>
            <summary> Sets the fEncrypted field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FWhichTblStm">
            <returns>  the fWhichTblStm field value.
            </returns>
            <summary> Sets the fWhichTblStm field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FReadOnlyRecommended">
            <returns>  the fReadOnlyRecommended field value.
            </returns>
            <summary> Sets the fReadOnlyRecommended field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FWriteReservation">
            <returns>  the fWriteReservation field value.
            </returns>
            <summary> Sets the fWriteReservation field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FExtChar">
            <returns>  the fExtChar field value.
            </returns>
            <summary> Sets the fExtChar field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FLoadOverride">
            <returns>  the fLoadOverride field value.
            </returns>
            <summary> Sets the fLoadOverride field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FFarEast">
            <returns>  the fFarEast field value.
            </returns>
            <summary> Sets the fFarEast field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FCrypto">
            <returns>  the fCrypto field value.
            </returns>
            <summary> Sets the fCrypto field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FMac">
            <returns>  the fMac field value.
            </returns>
            <summary> Sets the fMac field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FEmptySpecial">
            <returns>  the fEmptySpecial field value.
            </returns>
            <summary> Sets the fEmptySpecial field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FLoadOverridePage">
            <returns>  the fLoadOverridePage field value.
            </returns>
            <summary> Sets the fLoadOverridePage field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FFutureSavedUndo">
            <returns>  the fFutureSavedUndo field value.
            </returns>
            <summary> Sets the fFutureSavedUndo field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FWord97Saved">
            <returns>  the fWord97Saved field value.
            </returns>
            <summary> Sets the fWord97Saved field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FIBAbstractType.FSpare0">
            <returns>  the fSpare0 field value.
            </returns>
            <summary> Sets the fSpare0 field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FIBLongHandler.getLong(System.Int32)">
            <summary> Refers to a 32 bit windows "long" same as a Java int</summary>
            <param name="longCode">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Field">
            <Doc>
      <summary>
        <para>This class is a low level representation of a field. This encompasses many objects in Word, such as merge fields, hyperlinks, TOC entries, etc. Fields are the generic form of what are contained in a Element's inline elements.</para>
      </summary>
      <remarks>
        <para>To create a field, call the corresponding "insert" method for what you want to create (hyperlink, TOC entry, etc) on an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> or <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Position"/> object.</para>
        <para>To get an existing field, use the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> method and pass in the http://wiki.softartisans.com/display/WW8/Element.Type#Field parameter to retrieve all fields.</para>
        <para>The following sample demonstrates creating a field at the end of a new document and retrieving the first field of an existing document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Insert a field at the end of a new document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Field fld =
               doc.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans");

          //--- Get the first field of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Field firstField = doc.GetElements(Element.Type.Field)[0];
        </code>
          <br/>
          <code>

          '--- Insert a field at the end of a new document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim fld As Field = _
               doc.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans")

          '--- Get the first field of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim firstField As Field = doc.GetElements(Element.Type.Field)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.Update">
            <Doc>
        <summary>
          <para>Updates the value of the field.</para>
        </summary>
        <example>
          <para>
            <code>
field.Update();</code>
            <br/>
            <code>
field.Update()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Field.Contents">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object that represents the contents of this field.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Field.Code">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> that represents this field's code.</para>
        </summary>
        <example>
          <para>
            <code>

          string fieldCode = fld.Code;
        </code>
            <br/>
            <code>

          Dim fieldCode As String = fld.Code
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Field.Type">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType"/> object that represents this field's type.</para>
        </summary>
        <example>
          <para>
            <code>

          Field.FieldType fldType = fld.Type;
        </code>
            <br/>
            <code>

          Dim fldType As Field.FieldType = fld.Type
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType">
            <Doc>
        <summary>
          <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Field"/> class is a general representation that encompasses many Word objects, including merge fields, hyperlinks, and table of contents items.  A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType"/> value specifies the type of field a specific <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Field"/> object represents.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AddressBlock">
            <Doc>
          <summary>A Mail Merge address block</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Advance">
            <Doc>
          <summary>Advance</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AskCommand">
            <Doc>
          <summary>Ask command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AutoNumArabic">
            <Doc>
          <summary>Insert auto numbering field in Arabic number format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AutoNumLegal">
            <Doc>
          <summary>Insert auto numbering field in legal format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AutoNumOutline">
            <Doc>
          <summary>Insert auto numbering field in outline format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AutoText">
            <Doc>
          <summary>AutoText</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.AutoTextList">
            <Doc>
          <summary>AutoText list</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.BarCode">
            <Doc>
          <summary>Bar code</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.BidiOutline">
            <Doc>
          <summary>Set outline to RTL</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.BookmarkReference">
            <Doc>
          <summary>Bookmark reference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Compare">
            <Doc>
          <summary>Compare two values</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.CreateIndex">
            <Doc>
          <summary>Creates an index, if index entries are defined</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.CreateTableOfAuthorities">
            <Doc>
          <summary>Create table of authorities</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.CreateToc">
            <Doc>
          <summary>Creates a table of contents</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DataCommand">
            <Doc>
          <summary>Data command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DDEAutoRef">
            <Doc>
          <summary>DDE automatic reference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DDEReference">
            <Doc>
          <summary>DDE reference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DocumentProp">
            <Doc>
          <summary>Document property</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DocumentReference">
            <Doc>
          <summary>Document reference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.DocumentVar">
            <Doc>
          <summary>Document variable</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.EmbeddedObject">
            <Doc>
          <summary>Embedded object</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.EvalExpression">
            <Doc>
          <summary>Evaluate expression</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FileSize">
            <Doc>
          <summary>The document's file size</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FillinCommand">
            <Doc>
          <summary>Fill-in command to display prompt (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FootnoteReference">
            <Doc>
          <summary>Footnote</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FormCheckBox">
            <Doc>
          <summary>Form check box</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FormListBox">
            <Doc>
          <summary>Form list box</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.FormTxtBox">
            <Doc>
          <summary>Form text box</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Formula">
            <Doc>
          <summary>Formula definition</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.GlossaryEntry">
            <Doc>
          <summary>Glossary entry</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.GotoButton">
            <Doc>
          <summary>Goto button</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.GreetingLine">
            <Doc>
          <summary>A Mail Merge greeting line</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.HtmlControl">
            <Doc>
          <summary>HTML control</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Hyperlink">
            <Doc>
          <summary>Hyperlink</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.IfCommand">
            <Doc>
          <summary>If command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.IncludeCommand">
            <Doc>
          <summary>Include command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.IncludePicture">
            <Doc>
          <summary>Include picture</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.IncludeText">
            <Doc>
          <summary>Include text</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.IndexEntry">
            <Doc>
          <summary>An index entry</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.InsertDatabase">
            <Doc>
          <summary>Insert database</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.InsertLiteralText">
            <Doc>
          <summary>Insert literal text</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Link">
            <Doc>
          <summary>Link</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.ListElement">
            <Doc>
          <summary>List element</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Macro">
            <Doc>
          <summary>Macro</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.MacroButton">
            <Doc>
          <summary>Macro button</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.MarkTableOfAuthorities">
            <Doc>
          <summary>Mark table of authorities</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.MergeField">
            <Doc>
          <summary>Merge field</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.MergeRecSeqNum">
            <Doc>
          <summary>Merge record sequence number</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.NextCommand">
            <Doc>
          <summary>Next command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.NextIfCommand">
            <Doc>
          <summary>NextIf command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.NoPrintTranslation">
            <Doc>
          <summary>Sends characters to printer without translation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.NoteRef">
            <Doc>
          <summary>Note reference</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.NumPrintMerge">
            <Doc>
          <summary>Inserts number of current Print Merge record</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Ocx">
            <Doc>
          <summary>OCX</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.PageReference">
            <Doc>
          <summary>The number of the current page</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.PluginPrivate">
            <Doc>
          <summary>Plug-in module private</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.PossibleBookmark">
            <Doc>
          <summary>The field syntax matches bookmark name</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Private">
            <Doc>
          <summary>Private</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.PseudoInlineShape">
            <Doc>
          <summary>Pseudo inline shape</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteAuthor">
            <Doc>
          <summary>The name of the document's author as it appears in the Properties dialog's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteComments">
            <Doc>
          <summary>The text entered in the comments field of the document's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteCreationDate">
            <Doc>
          <summary>Date the document was created, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteCurrentDate">
            <Doc>
          <summary>The current date</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteCurrentPage">
            <Doc>
          <summary>The current page in the document</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteCurrentTime">
            <Doc>
          <summary>The current time</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteEditTime">
            <Doc>
          <summary>The document's total editing time, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteFileName">
            <Doc>
          <summary>The document's file name</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteInfo">
            <Doc>
          <summary>Data from the document's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteKeywords">
            <Doc>
          <summary>The keywords listed in the Properties dialog's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteLastRevisedBy">
            <Doc>
          <summary>Name of the person who last revised the document, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteNumChars">
            <Doc>
          <summary>The number of characters in the document</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteNumPages">
            <Doc>
          <summary>The number of pages in the document</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteNumWords">
            <Doc>
          <summary>The number of words in the document</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuotePrintDate">
            <Doc>
          <summary>Date the document was last printed, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteRevisionDate">
            <Doc>
          <summary>Date the document was last revised, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteRevisionNum">
            <Doc>
          <summary>The number of times the document was revised, as it appears in the Properties dialog's Statistics sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteSubject">
            <Doc>
          <summary>The document's subject as it appears in the Properties dialog's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteTemplateName">
            <Doc>
          <summary>The document's template (Normal.dot by default)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.QuoteTitle">
            <Doc>
          <summary>The document's title as it appears in the Properties dialog's Summary sheet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Section">
            <Doc>
          <summary>Section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.SectionPages">
            <Doc>
          <summary>Section pages</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.SequenceMark">
            <Doc>
          <summary>Sequence mark</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.SetCommand">
            <Doc>
          <summary>Set command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.SkipIfCommand">
            <Doc>
          <summary>SkipIf command (for Print Merge)</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.StyleReference">
            <Doc>
          <summary>Style reference field</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Subscriber">
            <Doc>
          <summary>Subscriber</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Symbol">
            <Doc>
          <summary>Symbol</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Tiff">
            <Doc>
          <summary>Reads a TIFF file</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.TocEntry">
            <Doc>
          <summary>Table of contents entry</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Unknown">
            <Doc>
          <summary>Unknown</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.UnknownKeyword">
            <Doc>
          <summary>Unknown keyword</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.UserAddress">
            <Doc>
          <summary>User address</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.UserInitial">
            <Doc>
          <summary>User initial</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.UserName">
            <Doc>
          <summary>User name</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.FieldType&quot;]/Member[@signature=&quot;Field.FieldType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.FieldType&quot;]/Member[@signature=&quot;Field.FieldType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.FieldType&quot;]/Member[@signature=&quot;Field.FieldType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.FieldType&quot;]/Member[@signature=&quot;Field.FieldType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Field.FieldType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Field&quot;]/Member[@signature=&quot;Field.FieldType&quot;]/Member[@signature=&quot;Field.FieldType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType">
            <summary>
            The type of case to be applied to each 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup.#ctor(SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorNode,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorNode,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorNode,SoftArtisans.OfficeWriter.WordWriter.Fields)">
            <param name="fields">
            
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup.MiddleCp">
            <summary>
            The CP of separator character, or if there is no separator character,
            the end character.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorNode">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FieldFactory">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldFactory.readField(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.ElementModel,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup,System.Int32)">
            <summary>
            Given a field group, returns the appropriate field model for the field.
            </summary>
            <param name="document"></param>
            <param name="parent"></param>
            <param name="group"></param>
            <param name="subDocStartCp"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer">
            <summary> Encapsulates syntax of field markers</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.OPTION_ASPECT">
            <summary>This option specified that the image should grow or shrink to fit within the 
            specified bounds but maintain its natural aspect ratio
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.OPTION_LOCK">
            <summary>This option specifies that the image should assume the specified size </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.OPTION_NATURAL">
            <summary>This option specifies that the image should maintain its natural size </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.OPTION_SMALLER">
            <summary>This option specifies that image should shrink to fit withing the specified bounds
            but maintain its natural aspect ratio
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.delimiters">
            <summary>
            A set of one character delimiters
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.chars">
            <summary>
            Source as chars
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.includeDelims">
            <summary>
            Include delimiters in list of tokens
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.currentPos">
            <summary>
            Current index into source string
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.currentToken">
            <summary>
            The current token
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.HasMoreTokens">
            <summary>
            NOTE: this originally came from SupportClass.Tokenizer
            
            Determines if there are more tokens to return from the source string
            </summary>
            <returns>True or false, depending if there are more tokens</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.NextToken(System.String)">
            <summary>
            Returns the next token from the source string, using the provided
            token delimiters
            
            NOTE: this originally came from SupportClass.Tokenizer
            </summary>
            <param name="delims">String containing the delimiters to use</param>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldMarkerTokenizer.nextToken(System.Char[])">
            <summary>
            NOTE: this originally came from SupportClass.Tokenizer
            Returns the nextToken wo delimiters
            </summary>
            <param name="delims"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FieldModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldModel.#ctor(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.ElementModel,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup,System.Int32)">
            <summary>
            Creates a new field model from a word document
            </summary>
            <param name="document">the document containing this field</param>
            <param name="parent">the elemente containing this field</param>
            <param name="group">the field descriptor group describing this field</param>
            <param name="subDocStartCp">the character position of the start of the sub document
            containing this field. Since the character positions for groups are relative
            to the sub document, this is necessary to give the field the correct character
            positions</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FieldModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>This ignores the start, separator and end characters of the field, in addition
            to anything in the children of this field</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FieldModel.CodeInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FieldModel.ContentsInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FieldModel.ResultInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FieldModel.AbsoluteMiddleCp">
            <summary>
            Gets the actual character position of the separator character; <code>_group.MiddleCp()
            </code> just returns it relative to the sub document.
            </summary>
            <returns>the character position of the separator character within the document's text
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataReference">
            <summary>
            Interface for objects which have a reference to a data source and one to a column.
            </summary>
            <remarks>Almost everything implements this instead of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference"/> or 
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference"/>, but there are methods/objects which only need part of
            the interface.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference">
            <summary>
            An interface for those fields which refer to a data source by name or number; e.g. a merge
            field or a formula field.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.OrdinalDataSource">
            <summary>
            Whether this reference is an ordinal (#3) reference (<c>true</c>), or a name (foo)
            reference (<c>false</c>).
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.IsDefaultDataSource">
            <summary>
            Whether this reference is just the default for wherever the field is.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.DataSourceNumber">
            <summary>
            The number (1-indexed) of the data source if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.OrdinalDataSource"/> is 
            <c>true</c>.
            </summary>
            <remarks>Undefined result if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.OrdinalDataSource"/> is <c>false</c>.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.DataSourceName">
            <summary>
            The name of the data source if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.OrdinalDataSource"/> is <c>false</c>. 
            </summary>
            <remarks>Undefined result if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataSourceReference.OrdinalDataSource"/> is <c>true</c>.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference">
            <summary>
            An interface for any object which contains a reference to a column within a data source,
            e.g. a merge field or a formula field.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.OrdinalColumn">
            <summary>
            Whether this reference is an ordinal (#3) reference (<c>true</c>), or a name (foo)
            reference (<c>false</c>).
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.ColumnNumber">
            <summary>
            The number (1-indexed) of the data source if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.OrdinalColumn"/> is 
            <c>true</c>.
            </summary>
            <remarks>Undefined result if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.OrdinalColumn"/> is <c>false</c>.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.ColumnName">
            <summary>
            The name of the data source if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.OrdinalColumn"/> is <c>false</c>. 
            </summary>
            <remarks>Undefined result if <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.OrdinalColumn"/> is <c>true</c>.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference.Optional">
            <summary>
            Whether or not this column is optional.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.modifier">
            <summary>
            Must be wrapped in parentheses, but can be or'ed with other modifiers
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.Optional">
            <summary>
            If <c>true</c> false, an exception should be thrown if a mergefield exists in the
            document that does not have a corresponding data source.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.ColumnName">
            <summary>
            The name of the column
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalColumn"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.ColumnNumber">
            <summary>
            The number of the column
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalColumn"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.DataSourceName">
            <summary>
            The name of the data source
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalDataSource"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.DataSourceNumber">
            <summary>
            The number of the data source
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalDataSource"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalColumn">
            <summary>
            Whether the column is represented by a number or a name in the document.
            </summary>
            <remarks>If this is <c>true</c> <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.ColumnNumber"/> should be used; otherwise 
            <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.ColumnName"/> should be used.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.OrdinalDataSource">
            <summary>
            Whether the data source is represented by a number or a name in the document.
            </summary>
            <remarks>If this is <c>true</c> <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.DataSourceNumber"/> should be used; otherwise 
            <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.DataSourceName"/> should be used.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldNameParser.IsDefaultDataSource">
            <summary>
            This is <c>true</c> if there is no data source specified.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Fields">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldType">
            <summary>
            All the different types of Fields
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FileInformationBlock.#ctor(System.SByte[])">
            <summary>Creates a new instance of FileInformationBlock </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FileInformationBlock.getNFib">
            <summary> In Word 2k and greater the nFib is stored at the end of the fib to
            fool older readers. The nFib stored in the beginning is inaccurate.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FileInformationBlock.CcpChpxCount">
            <summary>
            This must be less than or equal to the number of PlcfBteChpx's in
            the file.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FileInformationBlock.CcpPapxCount">
            <summary>
            This must be less than or equal to the number of PlcfBtePapx's in
            the file.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.FileTextboxStory._ftxbxsunion_part_1">
            The ftxbxUnion is a C-style 8-byte union where if it's reusable, it's iNextReuse and cReusable,
            and if it's not reusable, it's cTxbx and cTxbxEdit
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Font">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> class is used to specify formatting that should be applied to a character run. It also represents the fonts of named styles in the document.</para>
      </summary>
      <remarks>
        <para>There are two ways to obtain an instance of this class.  The <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateFont"/> method creates a new <c>Font</c> object based on the Normal style. Alternately, using <see cref="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Font"/>, you can create a <c>Font</c> object that is a copy of a particular style's font. The <c>Font</c> object that is returned can then be used in conjunction with methods in the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> class to create character runs, paragraphs, etc, with specific fonts.</para>
        <para>The following example demonstrates both ways of getting a font, first by retrieving the Normal style's font from the document, second by retrieving a copy of the Heading1 style's font.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Get Normal font from Document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Font normalFont = doc.CreateFont();

          //--- Get font from Heading1 Style
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Font heading1Font = doc.Styles[NamedStyle.BuiltIn.Heading1].Font;
        </code>
          <br/>
          <code>

          '--- Get Normal font from Document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim normalFont As Font = doc.CreateFont()

          '--- Get font from Heading1 Style
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim heading1Font As Font = doc.Styles(NamedStyle.BuiltIn.Heading1).Font
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Bold">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run is bolded.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Font section &gt; Font style: &gt; Bold (or Bold Italic if Italic = true)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Bold
          bool bold = oFont.Bold;

          //--- Set Bold
          oFont.Bold = true;
        </code>
            <br/>
            <code>

          '--- Return Bold
          Dim bold As Boolean = oFont.Bold

          '--- Set Bold
          oFont.Bold = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Italic">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run is italicized.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Font section &gt; Font style: &gt; Italic (or Bold Italic if Bold = true)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Italic
          bool italic = oFont.Italic;

          //--- Set Italic
          oFont.Italic = true;
        </code>
            <br/>
            <code>

          '--- Return Italic
          Dim italic As Boolean = oFont.Italic

          '--- Set Italic
          oFont.Italic = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Outlined">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the the Outline effect, displaying the inner and outer borders of each character. (This effect is not available for all fonts.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Outline</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Outlined
          bool outlined = oFont.Outlined;

          //--- Set Outlined
          oFont.Outlined = true;
        </code>
            <br/>
            <code>

          '--- Return Outlined
          Dim outlined As Boolean = oFont.Outlined

          '--- Set Outlined
          oFont.Outlined = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.SmallCaps">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Small caps effect, formatting lowercase text as capital letters and reducing their size. Small caps formatting does not affect numbers, punctutation, non-alphabetic chacters, or uppercase letters.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Small caps</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SmallCaps
          bool smallCaps = oFont.SmallCaps;

          //--- Set SmallCaps
          oFont.SmallCaps = true;
        </code>
            <br/>
            <code>

          '--- Return SmallCaps
          Dim smallCaps As Boolean = oFont.SmallCaps

          '--- Set SmallCaps
          oFont.SmallCaps = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Caps">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the All caps effect, formatting lowercase text as capital letters and reducing their size. All caps formatting does not affect numbers, punctutation, non-alphabetic chacters, or uppercase letters.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; All caps</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Caps
          bool caps = oFont.Caps;

          //--- Set Caps
          oFont.Caps = true;
        </code>
            <br/>
            <code>

          '--- Return Caps
          Dim caps As Boolean = oFont.Caps

          '--- Set Caps
          oFont.Caps = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Hidden">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Hidden effect set. If set to true, this font will only be displayed when the display hidden flag is turned on for the containing document.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Hidden</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Hidden
          bool hidden = oFont.Hidden;

          //--- Set Hidden
          oFont.Hidden = true;
        </code>
            <br/>
            <code>

          '--- Return Hidden
          Dim hidden As Boolean = oFont.Hidden

          '--- Set Hidden
          oFont.Hidden = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Shadow">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Shadow effect, displaying a shadow behind, beneath and to the right of each character.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Shadow</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Shadow
          bool shadow = oFont.Shadow;

          //--- Set Shadow
          oFont.Shadow = true;
        </code>
            <br/>
            <code>

          '--- Return Shadow
          Dim shadow As Boolean = oFont.Shadow

          '--- Set Shadow
          oFont.Shadow = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Strike">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Strikethrough effect, displaying a single line through the text.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Strikethrough</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Strike
          bool strike = oFont.Strike;

          //--- Set Shadow
          oFont.Strike = true;
        </code>
            <br/>
            <code>

          '--- Return Strike
          Dim strike As Boolean = oFont.Strike

          '--- Set Strike
          oFont.Strike = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Embossed">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Emboss effect, displaying the text as if it is raised off the page in relief.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Embossed</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Embossed
          bool embossed = oFont.Embossed;

          //--- Set Embossed
          oFont.Embossed = true;
        </code>
            <br/>
            <code>

          '--- Return Embossed
          Dim embossed As Boolean = oFont.Embossed

          '--- Set Embossed
          oFont.Embossed = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Engraved">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Engrave effect, making the text to be imprinted or pressed into the page.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Engrave</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Engraved
          bool engraved = oFont.Engraved;

          //--- Set Engraved
          oFont.Engraved = true;
        </code>
            <br/>
            <code>

          '--- Return Engraved
          Dim engraved As Boolean = oFont.Engraved

          '--- Set Engraved
          oFont.Engraved = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.DoubleStrike">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if a character run has the Double strikethrough effect, displaying a double line through the text.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Double strikethrough</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DoubleStrike
          bool doubleStrike = oFont.DoubleStrike;

          //--- Set Engraved
          oFont.DoubleStrike = true;
        </code>
            <br/>
            <code>

          '--- Return Engraved
          Dim doubleStrike As Boolean = oFont.DoubleStrike

          '--- Set Engraved
          oFont.DoubleStrike = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.NoProofChecking">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will not perform grammar and spell checking on a character run when the document is opened.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: None</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return NoProofChecking
          bool noProofChecking = oFont.NoProofChecking;

          //--- Set NoProofChecking to not perform grammar and spell check
          oFont.NoProofChecking = true;
        </code>
            <br/>
            <code>

          '--- Return NoProofChecking
          Dim noProofChecking As Boolean = oFont.NoProofChecking

          '--- Set NoProofChecking to not perform grammar and spell check
          oFont.NoProofChecking = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.FontSize">
            <Doc>
        <summary>
          <para>Sets or returns an <c>float</c> that represents the font size for a character run. The font size will always be a multiple of 0.5.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Size:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return FontSize
          float fontSize = oFont.FontSize;

          //--- Set FontSize to 16 points
          oFont.FontSize = 16.0;
        </code>
            <br/>
            <code>

          '--- Return FontSize
          Dim fontSize As Float = oFont.FontSize

          '--- Set FontSize to 16 points
          oFont.FontSize = 16.0
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.FontName">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> that represents the name of the font used in this formatting.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Font:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return FontName
          string fontName = oFont.FontName;

          //--- Set Fontname
          oFont.FontName = "Arial";
        </code>
            <br/>
            <code>

          '--- Return FontName
          Dim fontName As String = oFont.FontName

          '--- Set FontName
          oFont.FontName = "Arial"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.CharacterSpacing">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the spacing between characters in a character run in twips. One twip = (1/20 pt) or ( 1/1440 in). This number can be negative (decreased spacing) or positive (increased spacing).</para>
        </summary>
        <remarks>
          <para>The minimum value is -1584 pts and the maximum value is 1584 pts. Values beyond this will be automatically adjusted.</para>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Character spacing tab &gt; Spacing:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return CharacterSpacing
          int charSpacing = oFont.CharacterSpacing;

          //--- Set CharacterSpacing to 2 points
          oFont.CharacterSpacing = 40;
        </code>
            <br/>
            <code>

          '--- Return CharacterSpacing
          Dim charSpacing As Integer = oFont.CharacterSpacing

          '--- Set CharacterSpacing to 2 points
          oFont.CharacterSpacing = 40
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.TextColor">
            <Doc>
        <summary>
          <para>Sets or returns the color of the text in a character run as a <see cref="T:System.Drawing.Color"/> object.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Font color:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TextColor
          Color oColor = oFont.TextColor;

          //--- Set TextColor
          oFont.TextColor = Color.Red;
        </code>
            <br/>
            <code>

          '--- Return TextColor
          Dim oColor As Color = oFont.TextColor

          '--- Set TextColor
          oFont.TextColor = Color.Red
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.CharacterScaling">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the character scaling, stretching or compressing text horizontally as a percentage of its current size. CharacterScaling can be set to a value between 1 and 600 percent. Values beyond these will be automatically adjusted.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Character spacing tab &gt; Scale:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return CharacterScaling
          int charScale = oFont.CharacterScaling;

          //--- Set CharacterScaling
          oFont.CharacterScaling = 100;
        </code>
            <br/>
            <code>

          '--- Return CharacterScaling
          Dim charScale As Integer = oFont.CharacterScaling

          '--- Set CharacterScaling
          oFont.CharacterScaling = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.SuperSubScript">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType"/> object that represents whether the text in this formatting is set to superscript, subscript, or none.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Effects section &gt; Superscript and Subscript</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ScriptType
          Font.ScriptType oSuperSubScript = oFont.SuperSubScript;

          //--- Set SuperSubScript to superscript
          oFont.SuperSubScript = Font.ScriptType.Super;
        </code>
            <br/>
            <code>

          '--- Return SuperSubScript
          Dim oSuperSubScript As Font.ScriptType = oFont.SuperSubScript

          '--- Set SuperSubScript to superscript
          oFont.SuperSubScript = Font.ScriptType.Super
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.VerticalPosition">
            <Doc>
        <summary>
          <para>Sets or returns a <c>double</c> that represents the vertical position for a character run in half points, lowering or raising the text in relation to the baseline. (For example, 2 points would be 4 half points.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Character spacing tab &gt; Position:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return VerticalPosition
          int verticalPosition = oFont.VerticalPosition;

          //--- Set VerticalPosition to 2 points
          oFont.VerticalPosition = 4;
        </code>
            <br/>
            <code>

          '--- Return VerticalPosition
          Dim verticalPosition As Integer = oFont.VerticalPosition

          '--- Set VerticalPosition to 2 points
          oFont.VerticalPosition = 4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Underline">
            <Doc>
        <summary>
          <para>Sets or returns a http://wiki.softartisans.com/display/WW8/Font.UnderlineType+(no+attachments) object that represents the underline type for this formatting.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Underline style:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Underline
          Font.UnderlineType oUnderline = oFont.Underline;

          //--- Set Underline to Double
          oFont.Underline = Font.UnderlineType.Double;
        </code>
            <br/>
            <code>

          '--- Return Underline
          Dim oUnderline As Font.UnderlineType = oFont.Underline

          '--- Set Underline to Double
          oFont.Underline = Font.UnderlineType.Double
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.HyphenationRule">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation"/> object that represents the hyphenation rule for a character run.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: None</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return HyphenationRule
          Font.Hyphenation oHyphenationRule = oFont.HyphenationRule;

          //--- Set HyphenationRule
          oFont.HyphenationRule = Font.Hyphenation.ChangeAfter;
        </code>
            <br/>
            <code>

          '--- Return HyphenationRule
          Dim oHyphenationRule As Font.Hyphenation = oFont.HyphenationRule

          '--- Set HyphenationRule
          oFont.HyphenationRule = Font.Hyphenation.ChangeAfter
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Kerning">
            <Doc>
        <summary>
          <para>Sets or returns a <c>double</c> that represents the kerning threshold for a character run in points.</para>
        </summary>
        <remarks>
          <para>If this is zero, then kerning is disabled for a character run. The maximum value is 1638 points.  Values beyond these will be automatically adjusted.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Kerning
          int kerning = oFont.Kerning;

          //--- Set Kerning to 12 pt
          oFont.Kerning = 24;
        </code>
            <br/>
            <code>

          '--- Return Kerning
          Dim kerning As Integer = oFont.Kerning

          '--- Set Kerning to 12 pt
          oFont.Kerning = 24
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineColor">
            <Doc>
        <summary>
          <para>Sets or returns the underline color for a character run as a <see cref="T:System.Drawing.Color"/> object.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Font tab &gt; Underline color:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return UnderlineTypeColor
          Color oColor = oFont.UnderlineColor;

          //--- Set UnderlineColor
          oFont.UnderlineColor = Color.Blue;
        </code>
            <br/>
            <code>

          '--- Return UnderlineColor
          Dim oColor As Color = oFont.UnderlineColor

          '--- Set UnderlineColor
          oFont.UnderlineColor = Color.Blue
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Shading">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Font.Shading"/> object which on which you can manipulate the shading (fill color and/or pattern) properties of a character run.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Border">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Font.Border"/> object on which you can manipulate the border properties of a character run.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab</para>
        </remarks>
        <example>
          <para>
            <code>

          oFont.Border.LineStyle = Border.LineStyle.Double;
        </code>
            <br/>
            <code>

          oFont.Border.LineStyle = Border.LineStyle.Double
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Animation">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation"/> object that represents the text animation for a character run.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Font... &gt; Text Effects tab &gt; Animations:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TextAnimation
          Font.TextAnimation oTextAnimation = oFont.Animation;

          //--- Set TextAnimation to LasVegasLights
          oFont.Animation = Font.TextAnimation.LasVegasLights;
        </code>
            <br/>
            <code>

          '--- Return TextAnimation
          Dim oTextAnimation As Font.TextAnimation = oFont.Animation

          '--- Set TextAnimation to LasVegasLights
          oFont.Animation = Font.TextAnimation.LasVegasLights
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Highlight">
            <Doc>
        <summary>
          <para>Sets or returns the highlight color for a character run as a <see cref="T:System.Drawing.Color"/> object.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Formatting toolbar &gt; Highlight button</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Highlight
          Color oColor = oFont.Highlight;

          //--- Set Highlight
          oFont.Highlight = Color.Yellow;
        </code>
            <br/>
            <code>

          '--- Return Highlight
          Dim oColor As Color = oFont.Highlight

          '--- Set Highlight
          oFont.Highlight = Color.Yellow
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation">
            <Doc>
        <summary>
          <para>Types of hyphenation rules that can be applied to a character run.</para>
        </summary>
        <remarks>
          <para>
            <b>Note:</b>
            <br/>
            <para>Some hyphenation rules are deprecated and will have no effect.</para>
          </para>
        </remarks>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.AddBefore">
            <Doc>
          <summary>Deprecated</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.ChangeAfter">
            <Doc>
          <summary>Deprecated</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.ChangeBefore">
            <Doc>
          <summary>Deprecated</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.DeleteBefore">
            <Doc>
          <summary>Deprecated</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.DeleteChangeBefore">
            <Doc>
          <summary>Deprecated</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.None">
            <Doc>
          <summary>No automatic hyphenation.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.Normal">
            <Doc>
          <summary>In a character run, a word that contains a hyphen is split at the hyphen and continued on the next line if it does not fit entirely on the current line.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Hyphenation&quot;]/Member[@signature=&quot;Font.Hyphenation.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Hyphenation&quot;]/Member[@signature=&quot;Font.Hyphenation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Hyphenation&quot;]/Member[@signature=&quot;Font.Hyphenation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Hyphenation&quot;]/Member[@signature=&quot;Font.Hyphenation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.Hyphenation.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.Hyphenation&quot;]/Member[@signature=&quot;Font.Hyphenation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType">
            <Doc>
        <summary>
          <para>Values used to represent whether a character run is formatting as superscript, subscript, or neither.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.None">
            <Doc>
          <summary>Character run is at default line height.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.Sub">
            <Doc>
          <summary>Character run is in subscript.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.Super">
            <Doc>
          <summary>Character run is in superscript.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.ScriptType&quot;]/Member[@signature=&quot;Font.ScriptType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.ScriptType&quot;]/Member[@signature=&quot;Font.ScriptType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.ScriptType&quot;]/Member[@signature=&quot;Font.ScriptType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.ScriptType&quot;]/Member[@signature=&quot;Font.ScriptType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.ScriptType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.ScriptType&quot;]/Member[@signature=&quot;Font.ScriptType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation">
            <Doc>
        <summary>
          <para>Types of text animation that can be set on a character run.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.BackgroundBlink">
            <Doc>
          <summary>The Word text animation named Blinking Background. The colors of both the text and background alternate between their originally assigned values and their opposite colors.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.LasVegasLights">
            <Doc>
          <summary>The Word text animation named Las Vegas Lights. The text is circumscribed by a rotating series of differently colored and differently shaped dots.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.MarchingAnts">
            <Doc>
          <summary>The Word text animation named Marching Black Ants. The text is circumscribed by a series of black dashes that move clockwise around the text.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.None">
            <Doc>
          <summary>No text animation.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.RedMarchingAnts">
            <Doc>
          <summary>The Word text animation named Marching Red Ants. The text is circumscribed by a series of red dashes that move clockwise around the text.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.Shimmer">
            <Doc>
          <summary>The Word text animation named Shimmer. The text alternates between its normal state and a slightly blurred one.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.SparkleText">
            <Doc>
          <summary>The Word text animation named Sparkle Text. A pattern of small, differently shaped dots of alternating colors appears in front of the text.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.TextAnimation&quot;]/Member[@signature=&quot;Font.TextAnimation.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.TextAnimation&quot;]/Member[@signature=&quot;Font.TextAnimation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.TextAnimation&quot;]/Member[@signature=&quot;Font.TextAnimation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.TextAnimation&quot;]/Member[@signature=&quot;Font.TextAnimation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.TextAnimation.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.TextAnimation&quot;]/Member[@signature=&quot;Font.TextAnimation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType">
            <Doc>
        <summary>
          <para>Types of underlines that can be applied to a character run.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.ByWord">
            <Doc>
          <summary>Word underline type By Word.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Dash">
            <Doc>
          <summary>Word underline type Dash.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DashedHeavy">
            <Doc>
          <summary>Word underline type Dashed Heavy.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DashLong">
            <Doc>
          <summary>Word underline type Dash Long.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DashLongHeavy">
            <Doc>
          <summary>Word underline type Dash Long Heavy.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Dot">
            <Doc>
          <summary>Word underline type Dot.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DotDash">
            <Doc>
          <summary>Word underline type Dot Dash.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DotDashHeavy">
            <Doc>
          <summary>Word underline type Dot Dash Heavy.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DotDashHeavy2">
            <Doc>
          <summary>Word underline type Dot Dash Heavy 2.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DotDotDash">
            <Doc>
          <summary>Word underline type Dot Dot Dash.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Dotted">
            <Doc>
          <summary>Word underline type Dotted.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.DottedHeavy">
            <Doc>
          <summary>Word underline type Dotted Heavy.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Double">
            <Doc>
          <summary>Word underline type Double.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.None">
            <Doc>
          <summary>Word underline type none.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Single">
            <Doc>
          <summary>Word underline type Single.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Thick">
            <Doc>
          <summary>Word underline type Thick.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Wave">
            <Doc>
          <summary>Word underline type Wave.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.WaveDouble">
            <Doc>
          <summary>Word underline type Wave Double.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.WaveHeavy">
            <Doc>
          <summary>Word underline type Wave Heavy.<br/><para>To see what this looks like, go to our online documentation:</para><para>http://wiki.softartisans.com/display/WW8/Font.UnderlineType</para></summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineType&quot;]/Member[@signature=&quot;Font.UnderlineType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineType&quot;]/Member[@signature=&quot;Font.UnderlineType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineType&quot;]/Member[@signature=&quot;Font.UnderlineType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineType&quot;]/Member[@signature=&quot;Font.UnderlineType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Font.UnderlineType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Font&quot;]/Member[@signature=&quot;Font.UnderlineType&quot;]/Member[@signature=&quot;Font.UnderlineType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.Ico24">
            <summary> Get the ico24 field for the CHP record.
            
            </summary>
            <method.excluded>  </method.excluded>
            <summary> Set the ico24 field for the CHP record.
            
            </summary>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.DeletedTime">
            <method>  property=true returnType=System.DateTime </method>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.ModifiedTime">
            <method>  property=true returnType=System.DateTime </method>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.PropertiesChangedTime">
            <method>  property=true returnType=System.DateTime </method>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.FontNameInternal">
            <method.excluded>  </method.excluded>
            <summary> 
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.TextColor">
            <summary> Set the ico24 field for the CHP record.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.FontModelImpl.FontName">
            <summary> 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.FontTable">
            <summary> FontTable or in MS terminology sttbfffn is a common data structure written in all
            Word files. The sttbfffn is an sttbf where each string is an FFN structure instead
            of pascal-style strings. An sttbf is a string Table stored in file. Thus sttbffn
            is like an Sttbf with an array of FFN structures that stores the font name strings
            
            </summary>
            <author>  Praveen Mathew
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FormulaFieldNameParser">
            <summary>
            Parses Merge Fields that start with '=' which means that they are formulas. 
            </summary>
            <remarks>We will like support a variety of formulas.
            The basic syntax is "=formula(datasource.column)" where "datasource.column" could be 
            replaced by any of the supported merge field syntaxes. </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream">
            <summary>
            A memorystream like NonContiguousMemoryStream, except the chunks of data
            aren't all necessarily the same size. This is optimized for lots of insertions and deletions
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.currentChunkIndex">
            <summary>
            The current position is in this index to chunks. This may be past the end, at chunks.Count
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.currentChunkPosition">
            <summary>
            The current position starts at this position in the chunk specified by currentChunkIndex.
            This position is absolute, not relative to chunk.Start
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.totalPosition">
            <summary>
            The value that would be returned to Position
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.totalLength">
            <summary>
            The value that would be returned to Length
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.isClosed">
            <summary>
            Is the stream closed?
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.DecrementPosition(System.Int64)">
            <summary>
            Should be equivalent to Position -= offset, except more efficient
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.FragmentedMemoryStream.IncrementPosition(System.Int64)">
            <summary>
            Should be equivalent to Position += offset, except more efficient
            </summary>
            <param name="offset"></param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatingAdvancer.footerFormulas">
            <summary>
            footer formulas are set to have an empty set before actually doing anything. 
            Thus their set index will always be one greater than the others. This allows easier handling 
            later on. Basically when a group or repeat block gets to the end of its set, it advances 
            all the formulas to the next set, since the footer has this blank set at the beginning 
            it will then be on the 'first' set. For example, the sets might look like this at the 
            end of preiterating:
            header inside footer
            3       3       0
            7       7       3
            5       5       7
                            5
            
            Now during processing you will start out with:
            Header=3; Inside=3; Footer=0;
            And header will be written out, then inside n times then next will return false for the 
            advancer and it will advance all 3 resulting in
            Header=7; Inside=7; Footer=3;
            Footer will be written out with the correct value of 3 the outer advancer will finish 
            and go back to the start, at which point Header and insides will be written out until 
            next returns false, and then all three are advanced resulting in 
            Header=5; Inside=5; Footer=7;
            Repeat, then all three are advanced again so you have
            Header=null; Inside=null; Footer=5;
            and the correct value is written out again.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatingAdvancer.UpdateFormulas">
            <summary>
            This should be called every time PreIterateNext is called successfully, to add the new 
            values to the formulas.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatingAdvancer.AdvanceFormulaSet">
            <summary>
            Advances the formula to the next set of grouping, should be called whenever 
            yield breaking from PreIterateRow
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer.Remove(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IBindingAdvancer)">
            <summary>
            Removes the given child advancer from the list of children
            </summary>
            <param name="bindingAdvancer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer.MatchGroupBlockAdvancer(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference,System.Action{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.GroupBlockAdvancer})">
            <summary>
            Called from the creation of the field, so that if the field is inside a group (but not a
            header or footer), and it has the same column as a containing group, it will only be
            written out for the first value of each grouping.
            </summary>
            <param name="reference"></param>
            <param name="setGroupBlockAdvancer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer.NestedMatchGroupBlockAdvancer(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference,System.Action{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.GroupBlockAdvancer})">
            <summary>
            The counterpart to <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer.MatchGroupBlockAdvancer(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IDataColumnReference,System.Action{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.GroupBlockAdvancer})"/> that is used when a group
            wants to find the matching group.
            </summary>
            <param name="reference"></param>
            <param name="setGroupBlockAdvancer"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer.PreIteratingBinding">
            <summary>
            Do not call <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.Next"/> on this binding
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.GroupBlockAdvancer.numberOfRepetitionsInGrouping">
            <summary>
            Because you can't access the last item inserted in a queue, the first element in this 
            list corresponds to the length of the first group (number of repetitions).
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseReader">
            <summary> This <CODE>LicenseReader</CODE> allows the developer
            to hard code the license key into the program.
            
            </summary>
            <author>  Pok-Ching Lee
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseReader.#ctor(System.String)">
            <summary> Creates a hard coded license reader.</summary>
            <param name="keyString">the hard coded license key string.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseTable">
            <summary> Hardcoded license description file.</summary>
            <author>  geoffk
            Jul 10, 2003 2:36:06 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HardCodedLicenseTable.findProducts(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.ILicenseTable.findProducts(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.HDFType">
            <author>   andy
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockConstants_Fields">
            <summary> Constants used in reading/writing the Header block
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader">
            <summary> The block containing the archive header
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.#ctor(System.IO.Stream)">
            <summary> create a new HeaderBlockReader from an InputStream
            
            </summary>
            <param name="stream">the source InputStream
            
            </param>
            <exception cref="T:System.IO.IOException"> on errors or bad data
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.PropertyStart">
            <summary> get start of Property Table
            
            </summary>
            <returns> the index of the first block of the Property Table
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.SBATStart">
            <returns> start of small block allocation table
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.BATCount">
            <returns> number of BAT blocks
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.BATArray">
            <returns> BAT array
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.XBATCount">
            <returns> XBAT count
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockReader.XBATIndex">
            <returns> XBAT index
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter">
            <summary> The block containing the archive header
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.#ctor">
            <summary> Create a single instance initialized with default values</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.setBATBlocks(System.Int32,System.Int32)">
            <summary> Set BAT block parameters. Assumes that all BAT blocks are
            contiguous. Will construct XBAT blocks if necessary and return
            the array of newly constructed XBAT blocks.
            
            </summary>
            <param name="blockCount">count of BAT blocks
            </param>
            <param name="startBlock">index of first BAT block
            
            </param>
            <returns> array of XBAT blocks; may be zero length, will not be
            null
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.calculateXBATStorageRequirements(System.Int32)">
            <summary> For a given number of BAT blocks, calculate how many XBAT
            blocks will be needed
            
            </summary>
            <param name="blockCount">number of BAT blocks
            
            </param>
            <returns> number of XBAT blocks needed
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.PropertyStart">
            <summary> Set start of Property Table
            
            </summary>
            <param name="startBlock">the index of the first block of the Property
            Table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.SBATStart">
            <summary> Set start of small block allocation table
            
            </summary>
            <param name="startBlock">the index of the first big block of the small
            block allocation table
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.HeaderBlockWriter.SBATBlockCount">
            <summary> Set count of SBAT blocks
            
            </summary>
            <param name="count">the number of SBAT blocks
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.HeaderFooterTable">
            <summary> Stores the cp offsets of the headers and footers for each section. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.HeaderFooterTable.getHeaderFooter(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.SEPX,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="doc"></param>
            <param name="sepx"></param>
            <param name="type"></param>
            <param name="createEmptyParagraph">If this is <c>true</c> you must call insertBefore
            with real content on the header or footer</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.HeaderFooterTable.GetHeadersAndFooters(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.SEPX)">
            <summary>
            Returns a list of the headers and footers that actually exist in the section.
            </summary>
            <param name="doc">the containing document</param>
            <param name="sepx">the containing section</param>
            <returns>all the headers and footers that already exist in the section</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.HeaderFooterTable.CopyHeadersAndFooters(System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument,System.Collections.Generic.List{SoftArtisans.OfficeWriter.WordWriter.HeaderFooter},System.Boolean,System.Boolean)">
            <summary>
            Copies the headers and footers in headersAndFooters into this at
            the specified 'destination index.
            </summary>
            <param name="destinationIndex"></param>
            <param name="document">
            Document must be the WWDocument this table corresponds to (I think)</param>
            <param name="headersAndFooters"></param>
            <param name="cannotInheritHeader"> OWD-3078
            If this is true, then the HeaderFooter list from the section we're
            copying from must contain atleast one header. If the added section
            doesn't contain a header and this is true, then we add an empty
            header as we copy the headerFooter list over. The purpose of this
            is to prevent inheritance of any headers from any section before
            this added section.</param>
            <param name="cannotInheritFooter">This is the same as
            cannotInheritHeader but for the footer.</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HexDump">
            <summary> dump data in hexadecimal format; derived from a HexDump utility I
            wrote in June 2001.
            
            </summary>
            <author>  Marc Johnson
            </author>
            <author>  Glen Stampoultzis  (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.IO.Stream,System.Int32,System.Int32)">
            <summary> dump an array of bytes to an OutputStream
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="stream">the OutputStream to which the data is to be
            written
            </param>
            <param name="index">initial index into the byte array
            </param>
            <param name="length">number of characters to output
            
            </param>
            <exception cref="T:System.IO.IOException"> is thrown if anything goes wrong writing
            the data to stream
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <exception cref="!:IllegalArgumentException"> if the output stream is
            null
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.IO.Stream,System.Int32)">
            <summary> dump an array of bytes to an OutputStream
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="stream">the OutputStream to which the data is to be
            written
            </param>
            <param name="index">initial index into the byte array
            
            </param>
            <exception cref="T:System.IO.IOException"> is thrown if anything goes wrong writing
            the data to stream
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <exception cref="!:IllegalArgumentException"> if the output stream is
            null
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.SByte[],System.Int64,System.Int32)">
            <summary> dump an array of bytes to a String
            
            </summary>
            <param name="data">the byte array to be dumped
            </param>
            <param name="offset">its offset, whatever that might mean
            </param>
            <param name="index">initial index into the byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the index is
            outside the data array's bounds
            </exception>
            <returns> output string
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte[])">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          A String representing the array of bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte[],System.Int32)">
            <summary> <p>Converts the parameter to a hex value breaking the results into
            lines.</p>
            
            </summary>
            <param name="bytes">       The value to convert
            </param>
            <param name="bytesPerLine">The maximum number of bytes per line. The next byte
            will be written to a new line
            </param>
            <returns>             A String representing the array of bytes
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int16)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.SByte)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int32)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.toHex(System.Int64)">
            <summary> Converts the parameter to a hex value.
            
            </summary>
            <param name="value">    The value to convert
            </param>
            <returns>          The result right padded with 0
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexDump.dump(System.IO.Stream,System.IO.StreamWriter,System.Int32,System.Int32)">
            <summary> Dumps <code>bytesToDump</code> bytes to an output stream.
            
            </summary>
            <param name="in">         The stream to read from
            </param>
            <param name="out">        The output stream
            </param>
            <param name="start">      The index to use as the starting position for the left hand side label
            </param>
            <param name="bytesToDump">The number of bytes to output.  Use -1 to read until the end of file.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.HexRead">
            <summary> Utilities to read hex from files.
            
            </summary>
            <author>  Marc Johnson
            </author>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexRead.readData(System.String)">
            <summary> This method reads hex data from a filename and returns a byte array.
            The file may contain line comments that are preceeded with a # symbol.
            
            </summary>
            <param name="filename"> The filename to read
            </param>
            <returns> The bytes read from the file.
            </returns>
            <throws>  IOException If there was a problem while reading the file. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.HexRead.readData(System.String,System.String)">
            <summary> Same as readData(String) except that this method allows you to specify sections within
            a file.  Sections are referenced using section headers in the form:
            <pre>
            [sectioname]
            </pre>
            
            </summary>
            <seealso cref="!:#readData(String)">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Hyperlink">
            <Doc>
      <summary>
        <para>This class represents a hyperlink field in a document.</para>
      </summary>
      <remarks>
        <para>To create a hyperlink, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertHyperlinkBefore(System.String,System.String)"/>.  To get the hyperlinks in a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/>, use the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> method with a http://wiki.softartisans.com/display/WW8/Element.Type#Hyperlink parameter.</para>
        <para>The following sample demonstrates creating a hyperlink at the end of a new document and retrieving the first hyperlink of an existing document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Add a hyperlink to a document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Hyperlink link =
               doc.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans");

          //--- Get the first hyperlink from a document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Hyperlink firstLink =
               doc.GetElements(Element.Type.Hyperlink)[0];
        </code>
          <br/>
          <code>

          '--- Add a hyperlink to a document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim link As Hyperlink = _
               doc.InsertHyperlinkAfter("http://www.softartisans.com", "SoftArtisans")

          '--- Get the first hyperlink from a document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim link As Hyperlink = _
               doc.GetElements(Element.Type.Hyperlink)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Hyperlink.GetUrlString">
            <Doc>
        <summary>
          <para>Returns the URL that the hyperlink points to.</para>
        </summary>
        <example>
          <para>
            <code>
string url = link.GetUrlString();</code>
            <br/>
            <code>
Dim url As String = link.GetUrlString()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Hyperlink.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Hyperlink&quot;]/Member[@signature=&quot;Hyperlink.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Hyperlink.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Hyperlink&quot;]/Member[@signature=&quot;Hyperlink.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.HyperlinkModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.HyperlinkModel.#ctor(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.ElementModel,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup,System.Int32)">
            <summary>
            Creates a new hyperlink model from a word document
            </summary>
            <param name="document">the document containing this hyperlink</param>
            <param name="parent">the elemente containing this hyperlink</param>
            <param name="group">the field descriptor group describing this hyperlink</param>
            <param name="subDocStartCp">the character position of the start of the sub document
            containing this hyperlink. Since the character positions for groups are relative
            to the sub document, this is necessary to give the hyperlink the correct character
            positions</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.HyperlinkModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>This ignores the start, separator, additional '\u0001' spearator character 
            and end characters of the field, in addition to anything in the children of this 
            field</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.HyperlinkModel.CodeInternal">
            <summary>
            Returns the code of the hyperlink field
            </summary>
            <remarks>Since the hyperlink separator is actually a '\u0001\u0014' the '\u0001' has
            to be removed so that it won't get interpreted as an image</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.HyperlinkModel.Children">
            <summary>
            Returns the children of this hyperlink, including the code and the results
            </summary>
            <remarks>Since the hyperlink separator is actually a '\u0001\u0014' the '\u0001' has
            to be removed so that it won't get interpreted as an image</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.HyperlinkStorage">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IDataAccess">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 23, 2003 5:34:28 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.open(System.String)">
            <summary> Open a connection to a database.</summary>
            <param name="aConnString">the connection string to use.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.close">
            <summary> Close an already open connection.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.execute(System.String)">
            <summary> Executes a query with a forward-only cursor and read-only result.</summary>
            <param name="aQuery">
            </param>
            <returns> A ResultSet, DataSet, or DataReader depending on the ResultSetType.
            </returns>
            <throws>  SQLException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataAccess.execute(System.String,System.Int32)">
            <summary> Execute a query.</summary>
            <returns> A ResultSet, DataSet, or DataReader depending on the ResultSetType.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper">
            <summary>
            This wraps an IDataReader which provides non-rewindable data
            
            Much of this file was taken from ArrayWrapper
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.#ctor(System.Data.IDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.Rewindable">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.#ctor(SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker,System.Int32,System.Int32,System.String)">
                             * <summary>Grabs an <code>IfFieldEntity</code> from a given String. This
                             * does not include any processing, such as limiting it to the
                             * characters between the non-printable characters that mark the
                             * start and end of the if field entities.</summary>
                             * 
                             * @param start
                             *            the first character position of this entity
                             * @param endt
                             *            the last character position of this entity
                             * @param text
                             *            the raw text of this entity
                             * @throws SAException
                			 *             if there is a problem adding format entries to
            			     *             mCharacterFormatEntries or getting the original
                			 *             format entries
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.GetParagraphFormatEntries(System.Boolean)">
            Returns a list of all the paragraph format entries for this
            entity so that they can be set as the if field's paragraph format
            entries
            
            @return a list of all the paragraph format entries for this
                    entity
            @throws SAException
                        if there is a problem getting the original character
                        format entries or adding the new ones
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.skipToSeparator(System.String,System.Int32)">
            <summary>
             Returns the index of the separator associated with the current begin character
            </summary>
            <param name="sb"></param>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.setFormatEntries(System.Boolean)">
            <summary>Sets the formatting entry variables (character format entries and
            paragraph format entries). Note that this is only necessary for
            the value entity, the merge fields will take care of their own
            formatting updates, all that needs to be done is copy them for
            the value entity.</summary>
            
            @throws SAException
                        if there is a problem adding format entries to
                        mCharacterFormatEntries or getting the original
                        format entries
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.getParagraphFormatEntries(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the Paragraph formatting entries for this entity.</summary>
            
            @param aStartCharacterIndex
                       the first character to grab entries from
            @param aEndCharacterIndex
                       the last character to look at entries from
            @param aDelta
                       the change in character positions (this will be
                       something to the effect of the change in length of all
                       the markers before this index)
            @param aParagraphFormatEntryIndex
                       the index within the original format entries that is
                       being examined, so as not to repeat format entries
            
            @return the updated aParagraphFormatEntryIndex that points to the
                    last entry index looked at the entry at this index was
                    not added
            @throws SAException
                        If there was a problem adding the format entries to
                        mParagraphFormatEntries
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.getCharacterFormatEntries(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Gets the format entries between two character positions and adds
            them to {@link #mCharacterFormatEntries}</summary>
            
            @param aStartCp
                       the starting character position to look for format
                       entries
            @param aEndCp
                       the last character position to look for format entries
            @param aDelta
                       the correction to be added to the format entries so
                       that they line up with the new text
            @param aCurrentCharacterFormatIndex
                       the current index of format entries being looked at,
                       so as not to check every index over and over again.
                       The entry at this index was not added
            @return the updated aCurrentCharacterFormatIndex to based on what
                    was found within the given range
            @throws SAException
                        if something breaks adding the format entries to
                        mCharacterFormatEntries
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.addFieldMarker(SoftArtisans.OfficeWriter.WordWriter.MarkerBase)">
            <summary>Add a field marker to the list of markers that are contained
            within this entity. NOTE: these should be sorted with increasing
            character position</summary>
            
            @param marker
                       the marker of a field contained within this entity
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.StartCp">
            <summary>Returns the starting character position of this entity</summary>
            
            @return the character position of this entity within the document
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.EndCp">
            <summary>Returns the ending character position of this entity</summary>
            
            @return the last character position of this entity within the
                    document
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.Text">
            <summary>Returns the text for this entity; if there are if fields, it will
            grab their data. This should not be called before setData has
            been called on the contained fields.</summary>
            
            @return the text for this entity
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldEntity.CpStart">
            <summary>Returns a list of all the character format entries for this
            entity so that they can be set as the if field's format entries</summary>
            
            @return a list of all the character format entries for this
                    entity
            @throws SAException
                        if there is a problem getting the original character
                        format entries, or adding the new ones
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker" -->
        <!-- Badly formed XML comment ignored for member "F:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.copyParagraphFormatEntryBeforeEntity" -->
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.mValueEntity">
            This is the index of the separator between the IF field entities and the
            cached text. If this is -1, there is no separator
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.#ctor(System.Collections.Generic.ICollection{SoftArtisans.OfficeWriter.WordWriter.MarkerBase},System.Int32,System.Int32,System.String,SoftArtisans.OfficeWriter.WordWriter.TemplateDocument,SoftArtisans.OfficeWriter.WordWriter.PieceTableLookup,SoftArtisans.OfficeWriter.WordWriter.BuildableWordRecordFLD,System.Int32)">
                     * <summary>Creates a new If field marker to replace the cached text with updated
                     * cached text.</summary>
                     * 
                     * @param subMarkers
                     *            A sorted list of all the fields contained within this merge
                     *            field. NOTE: these must be sorted by character position
                     * @param startCP
                     *            the starting character position of the if field
                     * @param startFC
                     *            the starting file position of the if field
                     * @param unparsedMarker
                     *            the string for the if field, completely unparsed
                     * @param aDoc
                     *            the document containing this if field
                     * @param aPieceTableLookup
                     *            the piece table lookup for this if field
                     * @param fieldRecord
            	     *            The field record that contains the references for this if
            	     *            field. If this if field does not have a separator, but does
            	     *            after updating, it will update this field record
            	     * @param endFieldDescriptorIndex
            	     *            the index of the end field descriptor within the field record
                     * @throws SAException
                     *             if something goes wrong
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.setData(SoftArtisans.OfficeWriter.Shared.DataSource,System.String,SoftArtisans.OfficeWriter.WordWriter.DataSourceStorage,SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag)">
            <summary>Sets the cached text in the IF field to be the actual one based one the
            evaluation of the operator and expressions.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.equalExpressions(System.String,System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.parseIfField(System.String)">
            <summary>
            Parse the given text into the different parts of the If field.
            </summary>
            <param name="text">the unparsed text of the if field</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.OriginalCP">
            <summary>Override MarkerBase's <code>setOriginalCP</code> so that it can update
            internal variables.</summary>
            
            @param originalCP
                       the updated original CP for this If Field
            @see MarkerBase#setOriginalCP(int)
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.CharacterFormatEntries">
            <summary>Returns the character formatting information for this if field.
            
            Note: for the returned FormatEntries getFC() will return a position relative to
            m_ToReplaceCp</summary>
            
            @return an ArrayList of FormatEntries that should be applied to the new
                    text
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.ParagraphFormatEntries">
            <summary>
            Returns the formatting information for this if field. Right now this just returns an
            empty list, so any formatting will be lost.
            
            If there is a paragraph start at the start of the original if field, we want to copy
            the paragraph formatting from the start of the if field, as the start of the entity,
            otherwise we don't want to copy the paragraph entity.
            <code>
            {if 3 = 4 "true
                                         centered" "false" \* MERGEFORMAT }_there
            </code>
            becomes:
            <code>
                                                    false_there
            </code>
            But:
            <code>
            Hello_{if 3 = 4 "true
                                         centered" "false" \* MERGEFORMAT }_there
            </code>
            Becomes:
            <code>Hello_false_there</code>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.Expr1">
            <summary>Class to represent any of the four entities contained within an if
            field. These could include the first expression, the second, the true
            or the false text.</summary>
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.#ctor(SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker,SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser)">
                         * <summary>Uses the given parser to extract all the portions of the if field
                         * into a new instance of this class</summary>
                         * 
                         * @param parser
                         *            the Parser executed on the if field marker
                         * @throws SAException
                		 *             if there is a problem adding format entries to
                		 *             mCharacterFormatEntries or getting the original format
                		 *             entries
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getExpr1">
            <summary>Retrieves the entity for the first part of the conditional expression
            from the unparsed text</summary>
            
            @return the first operand of the conditional of the if field
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getExpr2">
            <summary>Retrieves the entity for the second part of the conditional
            expression from the unparsed text</summary>
            
            @return the second operand of the conditional of the if field
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getTrueText">
            <summary>Retrieves the entity for the true text from the unparsed text</summary>
            
            @return the text that will be displayed if the conditional is true.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getFalseText">
            <summary>Retrieves the entity for the false text from the unparsed text</summary>
            
            @return the text that will be displayed if the conditional is false.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getOperator">
            <summary>Returns the operator properly parsed into an {@link Operator}</summary>
            
            @see #evalOperator(Parser)
            @return the operator of this if field
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.evalOperator(SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser)" -->
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.addFieldMarker(SoftArtisans.OfficeWriter.WordWriter.MarkerBase)">
            <summary>Add a new field marker to the appropriate component of the if field.</summary>
            
            @param marker
                       a marker contained within this if field
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.IfField.getText">
            <summary>Returns the final text of the entire contents of the if field. This
            does not include the cached text, but is updated for any changes to
            merge fields within the if field. All terms within will automatically
            wrapped in quotes.</summary>
            
            @return the If field codes with any merge fields filled in as
                    appropriate.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.#ctor(SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker,System.String)">
            <summary>Creates a new parser to be applied to the given text</summary>
            
            @param text
                       the string that will be parsed when {@link #parse()} is
                       called
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.parse">
            <summary>Parse the text into its entities</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getEntityBySpace(System.Int32)">
            <summary>Get the entity starting at startIndex and ending with whitespace</summary>
            
            @param startIndex
                       the starting index of the entity
            @return the last index of the entity
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getEntityByQuote(System.Int32)">
            <summary>Get the entity starting at startIndex and ending with a quote mark</summary>
            
            @param startIndex
                       the starting index of the entity
            @return the last index of the entity
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getOperator(System.Int32)">
            <summary>Get the operator starting at startIndex</summary>
            
            @param startIndex
                       the starting index of the operator
            @return the last index of the operator
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getStart(System.Int32)">
            <summary>Returns the start index of the given entity within the text</summary>
            
            @param the
                       entity index to get (0 = Expression1 and they go up from
                       there)
            @return the index of the start of the given entity within the text
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getEnd(System.Int32)">
            <summary>Returns the end index of the given entity within the text</summary>
            
            @param the
                       entity index to get (0 = Expression1 and they go up from
                       there)
            @return the index of the end given entity within the text
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getString(System.Int32)">
            <summary>Returns the actual text of the given entity</summary>
            
            @param the
                       entity index to get (0 = Expression1 and they go up from
                       there)
            @return the text of the given entity within the text
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.IfFieldMarker.Parser.getContainedInQuotes(System.Int32)">
            <summary>Returns whether or not the given entity was contained in quotes.</summary>
            
            @param the
                       entity index to get (0 = Expression1 and they go up from
                       there)
            @return <code>true</code> if the given entity was quoted,
                    <code>false</code> if it was not
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IField">
            <summary>
            A simple interface for field methods shared between <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField"/> and 
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField"/> that are not part of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock"/>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IField.CreateMergeFieldMarker(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter)">
            <summary>
            Sets the binding for this field; if <paramref name="rows"/> is <c>null</c> or this is
            not a merge field; returns <c>null</c>, otherwise returns the  
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldMarker"/> associated with this field.
            </summary>
            <param name="data">All the data so that the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataSourceBinding"/> can be set
            if it's linked to a different data source than the one used by the containing repeat
            block.</param>
            <returns>The merge field marker associated with this field, if there is one.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IField.Skip">
            <summary>
            Changes the state of this field, so that it will be skipped instead of actually writing 
            out information.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IField.FieldType">
            <summary>
            The type of field
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2">
            <summary>
            A set of methods used by OutputRowsHandler; specifically the differences in functionality 
            between Word and Excel.
            </summary>
            <typeparam name="TB">The type of Binding used for this product (either Excel or Word)
            </typeparam>
            <typeparam name="TM">The type of Marker used for this product, for Excel this would be a 
            cell with marker syntax, for Word, it would be a Field</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.GetDataBinding(`1)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.AdvanceBindings">
            <summary>
            Advances all the bindings associated with this marker set.
            </summary>
            <returns><c>true</c> if the bindings were successfully advanced, <c>false</c> if there
            are no more bindings for the fields.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ResetState">
            <summary>
            Resets any of the internal variables that are dependent on the current bindings
            </summary>
            <remarks>This should be called any time the iteration is restarted (between 
            <see cref="!:RewindableOutputRowsHandler&lt;TB,TM,TH&gt;.CountOutputRows"/> and 
            <see cref="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateOutputRows(SoftArtisans.OfficeWriter.Shared.ICountable{`1})"/>, or multiple iterations of
            CreateOutputRows</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ApplyModifiers(`1,`0,SoftArtisans.OfficeWriter.Shared.MarkerData@)">
            <summary>
            Applies modifiers creating the resulting data
            </summary>
            <param name="marker">The marker</param>
            <param name="binding">The binding holding the data for the marker</param>
            <param name="data">The data that is created if modifiers are applied, e.g. a marker data
            containing the feild name if the marker has the field name modifier.</param>
            <returns><c>true</c> if the marker had modifiers, and new data was created because of
            this.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.StringCellData(`1,System.String)">
            <summary>
            Returns the cell data for the given marker, when set to the given string
            </summary>
            <remarks>In Excel this would just be an entry to the string table, after 
            Upper/Lowercase updates, In word this is either an index to a custom string table 
            or the string itself</remarks>
            <param name="marker">The marker from the template</param>
            <param name="content">The content to-be for this marker</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.DateCellData(`1,System.Nullable{System.DateTime})">
            <summary>
            Returns the cell data for the given marker, when set to the given date
            </summary>
            <remarks>Excel converts dates into doubles, Word leaves them be</remarks>
            <param name="marker">The marker from the template</param>
            <param name="date">The content to-be for this marker, must be called with the type of 
            the binding is a date</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ByteData(`1,System.Nullable{System.Int16})">
            <summary>
            Returns the byte Data ready for serialization.
            </summary>
            <remarks>ExcelTemplate does some funky stuff with TinyInts (bytes), word was just
            converting to Integer whatever it got, short should be sufficient for both.</remarks>
            <param name="marker">The marker from the template</param>
            <param name="value">The content to-be for this marker</param>
            <returns>A MarkerData ready for encoding</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.BinaryCellData(`1,System.Byte[],System.Data.OleDb.OleDbType)">
            <summary>
            Returns the cell data for the given marker, when set to the given binary data (image)
            </summary>
            <remarks>Word can handle images, Excel just outputs the data type as a string 
            (or something like that)</remarks>
            <param name="marker">The marker from the template</param>
            <param name="bytes">The content to-be for this marker, must be called with the type of 
            the binding is binary data</param>
            <returns>The output data associated with the marker</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.RowCountHandler(SoftArtisans.OfficeWriter.Shared.MarkerData[],System.Boolean)">
            <summary>
            Updates various counts after each row, such as group sizes/offsets
            </summary>
            <remarks>Word may just ignore the given row, and grab the data source, for each of  the
            appropriate formulas or grouping, since group counts aren't actually linked to  markers
            like they are in Excel</remarks>
            <param name="row">The list of all the markers in the data source. If this is <c>null</c>
            , that signifies that the last row passed in was the last row for this set of markers.
            </param>
            <param name="computeGrouping">If true (and in ExcelWriter) do the grouping computation
            else this function just does a max row check</param>
            <returns>false, if the max number of rows have been reached</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.UpdateUniqueBindings">
            <summary>
            Called after creating all the rows.
            </summary>
            <remarks>Excel uses this to update the use count and reset per marker count</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.RewindBindings">
            <summary>
            Rewind the bindings to start from the beginning again. Used with RewindableOutputRowsHandler
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IHelpOutputRowsHandler`2.ZeroRows">
            <summary>
            Returns <c>true</c>, if there are no rows to write out; only accessed before accessing
            the first row.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ImageData">
            <summary> This class represents an image in the Word data stream.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mHash">
            <summary>an MD4 hash of mImgData. In some cases this won't be an accurate 
            hash because the image gets converted.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mHeight">
            <summary>The image height in twips</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mImgData">
            <summary>Represents an image file in memory.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mIndex">
            <summary>This images index in the image store.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mOffset">
            <summary>This images offset in the data stream.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mSize">
            <summary>This images size in bytes in the data stream.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mType">
            <summary>The image blip type. Look in EscherBSERecord for constants.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageData.mWidth">
            <summary>The image width in twips</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageData.#ctor(SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor,System.SByte[],System.SByte[],System.Int32,System.Int32)">
            <summary> One and only constructor
            
            </summary>
            <param name="aBasePic">The PictureDescriptor this image should be based on. 
            This is usually some kind of placeholder image
            </param>
            <param name="aImgData">The raw image data.
            </param>
            <param name="aHash">The hash of the raw image data.
            </param>
            <param name="aCurrentOffset">The current offset in the data stream.
            </param>
            <param name="aIndex">The index of this image in the image storage.
            </param>
            <throws>  SAException If aImgData is an unsupported image type. </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageData.serialize(System.SByte[],System.Int32)">
            <summary> Writes this objects data to a byte array
            
            </summary>
            <param name="data">The byte array to write to
            </param>
            <param name="offset">The offset to begin writing to .
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageData.setIndex">
            <summary> Internal function used to set the index variables in the various data structures
            before it is written out.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageData.setImgData">
            <summary> Internal function used to set the image's width, height, type, and other
            misc options before it is written out.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ImageData.Offset">
            <summary> Gets this image's offset in the data stream.</summary>
            <returns> The image's offset in the data stream.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ImageData.NextOffset">
            <summary> Gets the next image's offset in the data stream.</summary>
            <returns> The next image's offset in the data stream.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ImageData.Size">
            <summary> Gets this image's size in bytes. This size is the total size for all data
            structures plus the actual image data. 
            </summary>
            <returns> This image's size in bytes
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ImageHashKey">
            <summary> This class is used as key of an ImageData object in the hash table. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageHashKey.#ctor(System.SByte[],SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor)">
            <summary> The constructor
            
            </summary>
            <param name="aHash">The md4 hash of the image file stored in the ImageData 
            object this object is a key for.   * 
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageHashKey.Equals(System.Object)">
            <summary> Compares two ImageHashKeys for equality. Will return true only if 
            both ImageHashKeys have the same md4 hash.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageHashKey.GetHashCode">
            <summary> Used by java.util.Hashtable to determine where to put this object.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageProperties">
            <summary>
            Simple struct for maintaining the properties that various methods need for inserting
            images into XML template.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageProperties.PngImage">
            <summary>
            A png version of the bitmap given.
            </summary>
            <remarks>Word does not support bmp files, so if the image provided was a bmp file, this
            contains the image as a png, otherwise its <c>null</c></remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageProperties.TypeExtensions">
            <summary>
            Note: Bitmaps are not spported by word and must be converted to png (or at least I
            couldn't get an actual bitmap to work in the file.
            </summary>
            <remarks>These must correspond to the associated values in <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value"/></remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling">
            <summary>
            Utility class for scaling images from a data source to the dimensions specified in the
            template.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.EmusPerCentimeter">
            <summary>
            Microsoft decided to make up a unit for images; EMU
            </summary>
            <remarks>This can be found in 5.1.12.16 ST_Coordinate (Coordinate) of the Office Open XML
            Part4 - Markup Language Reference - December 2006</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.EmusPerInch">
            <summary>
            Microsoft decided to make up a unit for images; EMU
            </summary>
            <remarks>This can be found in 5.1.12.16 ST_Coordinate (Coordinate) of the Office Open XML
            Part4 - Markup Language Reference - December 2006</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.EmusPerPoint">
            <summary>
            Conversion factor for converting provided points into emus.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.EmusPerTwip">
            <summary>
            Conversion factor for converting provided twips into emus.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.TwipsPerInch">
            <summary>
            The number of Twips in an inch. 
            </summary>
            <remarks>For the binary format you provide Twips for the desired units, so, if no unit is
            provided, this is what is used.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.ScaleImage(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageProperties,System.UInt32@,System.UInt32@,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type)">
            <summary>
            Calculates resulting dimensions for scaling to a specified type.
            </summary>
            <param name="imageProperties"></param>
            <param name="width">The desired width of the image (in EMUs). This will be set to the actual
            resulting width (in EMUs) when <paramref name="type"/> is applied.</param>
            <param name="height">The desired height of the image (in EMUs). This will be set to the actual
            resulting height (in EMUs) when <paramref name="type"/> is applied.</param>
            <param name="type">The type of scaling to be applied to the image.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.ToEmus(System.Double,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Unit)">
            <summary>
            Converts the given dimension to EMUs based on the provided type of units.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type">
            <summary>
            All the different ways an image can be set to be scaled when inserting a file.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type.DontScale">
            <summary>
            The Image size will not be changed all
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type.IgnoreOriginalAspectRatio">
            <summary>
            The image will be set to the size specified regardless of the original aspect ratio.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type.Resize">
            <summary>
            The image will be enlarged or shrunk to fit the specified size, but will maintain its
            original aspect ratio.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Type.ShrinkOnly">
            <summary>
            The image will be shrunk to fit in the specified size, maintaining its original aspect
            ratio.
            </summary>
            <remarks>The image will not be enlarged.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageScaling.Unit">
            <summary>
             The units that we are given
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ImageStorage">
            <summary> This class represents a list of images in a Word document.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mAbsoluteOffset">
            <summary>The beginning of the image storage in the data stream.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mImgList">
            <summary>The list of ImageData objects.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mImgMap">
            <summary>The HashMap of ImageData objects. The keys are of type ImageHashKey</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mBuffer">
            <summary>This is used for maintaining the current writing state. It is a Buffer
            of the current image being written out. 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mCurrentIndex">
            <summary>This is used for maintaining the current writing state. It is the index
            of the image that is being written out.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.mCurrentOffset">
            <summary>This is used for maintaining the current writing state. It is the current 
            offset in mBuffer. 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.#ctor(System.Int32)">
            <summary> Constructor
            
            </summary>
            <param name="aAbsoluteOffset">This is the absolute offset of where the ImageStorage 
            should start in the data stream.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.write(System.SByte[],System.Int32,System.Int32,System.IO.Stream)">
            <summary> Used to write this object out to the data stream. One thing that is important to 
            note about this method is that it will be called multiple times to completely
            write out this object so we have to maintain the current writing state.
            
            </summary>
            <param name="aBuffer">The buffer to write to
            </param>
            <param name="off">The offset in buffer to start writing. 
            </param>
            <param name="aSize">The number of bytes to write. 
            </param>
            <param name="aInput">The underlying OLE stream this record belongs to. Never used in this record because 
            it is always apppended to the end of the "Data" stream.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImageStorage.addImage(System.SByte[],SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor)">
            <summary> Adds an image to be stored in the Word document.
            
            </summary>
            <param name="aImgData">The raw image data.
            </param>
            <param name="aBasePic">The base PictureDescriptor extracted from some kind of 
            placeholder image.
            </param>
            <returns> The absolute offset that this image will have in the data stream.
            </returns>
            <throws>  SAException If the image is an unsupported image type. </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IMarker">
            <summary>
            Extended by MarkerCell and XmlMergeFieldProcessor? or MergeFieldNameParser?
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.UseFieldName">
            <summary>
            Whether to display the field/column name instead of the value from the data source.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn">
            <summary>
            Whether the field/column is given as a number (<c>true</c>) or the column name (
            <c>false</c>)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.Optional">
            <summary>
            If <c>true</c>, and the field does not actually exist, an exception will not be thrown
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.ColumnNumber">
            <summary>
            The Column number associated with the marker; only valid if <see cref="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn"/>is
            <c>true</c>.
            </summary>
            <remarks>Although, it is written in as a one based index, this property returns a
            0-based index</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.ColumnName">
            <summary>
            The Column name associated with the marker; If <see cref="P:SoftArtisans.OfficeWriter.Shared.IMarker.OrdinalColumn"/>
            is <c>false</c>, this should be the text denoting the column (e.g. "#3").
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.IMarker.OriginalText">
            <summary>
            The original text of the marker, useful for throwing exceptions.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ImgFieldMarker.#ctor(SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor,SoftArtisans.OfficeWriter.WordWriter.ImageStorage,SoftArtisans.OfficeWriter.WordWriter.FormatEntry,SoftArtisans.OfficeWriter.WordWriter.TemplateDocument,SoftArtisans.OfficeWriter.WordWriter.PieceTableLookup,System.Int32,System.Int32,System.String,System.Char,System.Boolean)">
            <param name="aOriginalCP">
            </param>
            <param name="aOriginalFC">
            </param>
            <param name="aUnparsedMarker">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.InfoProperty.getBuiltInIdFromName(System.String,System.Boolean)">
            <param name="name">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.InfoProperty.getDefaultValueForBuiltIn(System.Int32,System.Boolean)">
            <param name="id">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage">
            <Doc>
      <summary>
        <para>This class is used to represent an inline image in a Word document. The types of images that Word supports are jpg, png, bmp, and gif.  Inline images are part of the <i>InlineElement</i> objects of an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/>.</para>
      </summary>
      <remarks>
        <para>To create a new inline image, use the insert methods for inline images from the <c>Element</c> or <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Position"/> class.</para>
      </remarks>
      <example>
        <para>The following sample demonstrates creating a inline image at the end of a new document and retrieving the first inline image of an existing document.<br/><code>

          //--- Insert a inline image at the end of a new document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          InlineImage image = doc.InsertImageAfter(@"C:\sample.jpg");

          //--- Get the first inline image of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          InlineImage firstImage =
               (InlineImage)doc.GetElements(Element.Type.InlineImage)[0];
        </code><br/><code>

          '--- Insert an inline image at the end of a new document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim image As InlineImage = doc.InsertImageAfter("C:\sample.jpg")

          '--- Get the first inline image of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim firstImage As InlineImage = _
               doc.GetElements(Element.Type.InlineImage)(0)
        </code></para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.GetImage(SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format)">
            <Doc>
        <summary>
          <para>Returns the image in the given format.</para>
        </summary>
        <param name="format">
          <para>An <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> of the type you wish to return.</para>
        </param>
        <returns>
          <para>A <see cref="T:System.IO.Stream"/> object that represents the image that was inserted.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
System.IO.Stream image = firstImage.GetImage(InlineImage.Bmp);</code>
            <br/>
            <code>
Dim image As System.IO.Stream = firstImage.GetImage(InlineImage.Bmp)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.InlineImage.ImageFormat">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format"/> object that represents the format that the image is stored as in Word. (Jpg, Png, Bmp, Gif)</para>
        </summary>
        <example>
          <para>
            <code>

          InlineImage.Format oImageFormat = oInlineImage.ImageFormat;
        </code>
            <br/>
            <code>

          Dim oImageFormat As InlineImage.Format = oInlineImage.ImageFormat
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Height">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the image's height in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Height
          int height = oInlineImage.Height;

          //--- Set Height to 2 inches
          oInlineImage.Height = 2880;
        </code>
            <br/>
            <code>

          '--- Return Height
          Dim height As Integer = oInlineImage.Height

          '--- Set Height to 2 inches
          oInlineImage.Height = 2880
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Width">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the image's width in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Width
          int width = oInlineImage.Width;

          //-- Set Width to 3 inches
          oInlineImage.Width = 4320;
        </code>
            <br/>
            <code>

          '--- Return Width
          Dim width As Integer = oInlineImage.Width

          '--- Set Width to 3 inches
          oInlineImage.Width = 4320
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Image">
            <Doc>
        <summary>
          <para>Sets or returns the image in its default format.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Image
          Stream oStream = oInlineImage.Image;

          //--- Set Image
          oInlineImage.Image = oStream;
        </code>
            <br/>
            <code>

          '--- Return Image
          Dim oStream As Stream = oInlineImage.Image

          '--- Set Image
          oInlineImage.Image = oStream
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format">
            <Doc>
        <summary>
          <para>Image formats for an inline image.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Bmp">
            <Doc>
          <summary>Bitmap image format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Emf">
            <Doc>
          <summary>Microsoft enhanced metafile format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Gif">
            <Doc>
          <summary>Graphics interchange format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Jpg">
            <Doc>
          <summary>Joint Photographic Experts Group (jpeg) format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Pict">
            <Doc>
          <summary>PICT graphic file format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Png">
            <Doc>
          <summary>Portable Network Graphics format</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Unknown">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Wmf">
            <Doc>
          <summary>Microsoft Windows metafile format</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Format&quot;]/Member[@signature=&quot;InlineImage.Format.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Format&quot;]/Member[@signature=&quot;InlineImage.Format.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Format&quot;]/Member[@signature=&quot;InlineImage.Format.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Format&quot;]/Member[@signature=&quot;InlineImage.Format.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.InlineImage.Format.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;InlineImage&quot;]/Member[@signature=&quot;InlineImage.Format&quot;]/Member[@signature=&quot;InlineImage.Format.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.InlineImageModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImageModel.setImage(System.IO.Stream)">
            <method>  property=true paramType0=System.IO.Stream </method>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImageModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>This ignores the \u0001 character denoting this inline image, in addition
            to anything in the children of this field</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImageModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up character runs if
            they span special characters like end of table cell markers or end of paragraph markers
            </remarks>
            <param name="startIndex">The index in the document of the first character to include</param>
            <param name="endIndex">The index in the document of the first character not to include</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.InlineImageStorage">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImageStorage._cachedDescriptors">
            <summary>Maps chpx.fcPic to PictureDescriptors</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImageStorage._chpxMap">
            <summary>Maps pictures to chpxs. Need to be able to update chpx.fcPic as these are written to the data stream </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.InlineImageStorage._currentOffset">
            <summary>Used to create a unique key for each added picture.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.InlineImageStorage.createImage(SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel,SoftArtisans.OfficeWriter.WordWriter.ElementModel,System.SByte[])">
            <summary> Doesn't cache identical pictures. It wouldn't be too hard to implement. I am just in a hurry.
            come back to this. 
            </summary>
            <param name="chpx">
            </param>
            <param name="props">
            </param>
            <param name="parent">
            </param>
            <param name="imgData">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionBlock">
            <summary>
            When there is another block inside an instruction this holds the other block.
            </summary>
            <remarks>This is most pertinent when you have a mergefield inside an if field</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionPiece.WriteOutput(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Writes out the resulting text.
            </summary>
            <remarks>When writing out, this will start inside a &lt;w:r&gt; and end inside a
            &lt;w:r&gt; (which may be a different one). This will be at the same depth, so it won't go
            from a run outside a table to a run inside a table, or anything like that, but it may go
            from a run in one paragraph to a run in the next paragraph. </remarks>
            <param name="writer"></param>
            <param name="type"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionPiece.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the instruction itself.
            </summary>
            <param name="data">The data for populating any fields/bookmarks</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionPiece.Rewrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Re writes the instructions.
            </summary>
            <param name="writer">the destination xml</param>
            <param name="type">The case option being applied</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionDrawing">
            <summary>
            This class represents the image placeholder used for inserting images within a merge
            field.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionString">
            <summary>
            Instruction Container for pure text. 
            </summary>
            <remarks>This text is grabbed from either a &lt;w:instrText&gt; node or a &lt;w:instr&gt;
            attribute</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionString.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out this piece of instructions to the writer.
            </summary>
            <param name="data">The data for populating any fields/bookmarks</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText">
            <summary>
            Basic data structure for holding a token of field instruction.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken">
            <summary>
            A simple interface for that text which describes a piece of instructions.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.instructions">
            <summary>
            The list of instruction pieces that make up this token
            </summary>
            <remarks>HasContents is dependent on this variable, so if HasContents is <c>false</c>,
            stuff should only be added to this if content is actually being added</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.Append(System.String)">
            <summary>
            Adds instructions taken directly from a <c>&lt;w:instrText&gt;</c> element or a 
            <c>&lt;w:instr&gt;</c> attribute.
            </summary>
            <param name="instructionPiece">A string of text that forms part of the instructions.
            </param>
            <returns>The remaining text after the end of this token or <c>null</c> if this token does
            not end within the piece.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.AppendBlock(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            Appends a block to these instructions if it should still be part of this token.
            </summary>
            <param name="block">A block to append to these instructions</param>
            <returns><c>true</c> if the block was successfully added to this token, or <c>false</c>
            if the given block denoted the end of this token.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.StorelessAppendXml(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Much like <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.AppendXml(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)"/>, only it does not actually store the xml
            </summary>
            <remarks>This does not advance the reader.</remarks>
            <param name="reader">A reader processing a word document</param>
            <returns><c>true</c> if the xml was successfully added to this token, returns 
            <c>false</c> if the xml denoted the end of this token, in which case, the xml was not
            added to this token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.GetString">
            <summary>
            Finalizes the token and returns the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the instructions to a writer.
            </summary>
            <remarks>This assumes that it is part of a complex field. Before calling this a run
            should have been started and the begining field character should have been printed.
            </remarks>
            <param name="writer">The destination xml</param>
            <param name="data">The data for populating any fields/bookmarks</param>
            <param name="defaultDataSource">The default data source</param>
            <param name="defaultDataSourceName">The default data default data source name</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.AppendString(System.String,System.String)">
            <summary>
            Appends a string to the current list of instructions.
            </summary>
            <param name="escapedText">The new text to be added</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Returns whether the given xml would denote the end of this token
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the current xml node denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Returns whether the given xml would denote the end of this token
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the current xml node denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            Returns whether the given block would denote the end of this token
            </summary>
            <param name="block">a block to potentially add to this token</param>
            <returns><c>true</c> if the given block denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.HasContents">
            <summary>
            Whether anything has been successfully added to this token (<c>true</c>)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionToken.IsSwitch">
            <summary>
            Whether or not this token represents a switch such as \b or \*
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText">
            <summary>
            A piece of instruction text that does not need to be altered
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Writes out this text to the given writer
            </summary>
            <remarks><para>When writing out, this will start inside a &lt;w:r&gt; and end inside a
            &lt;w:r&gt; (which may be a different run). This will be at the same depth, so it won't
            go from a run outside a table to a run inside a table, or anything like that, but it may
            go from a run in one paragraph to a run in the next paragraph. </para><para>All text will
            be outputted in &lt;w:t&gt; elements</para></remarks>
            <param name="writer">The writer to which this text will be written</param>
            <param name="caseType">The type of case to be applied to the text. If the case type is 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.FirstCap"/>, and this outputs some text, it will
            be changed to <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.None"/>.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText.Rewrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Rewrite the contents of this text
            </summary>
            <param name="writer">The destination xml</param>
            <param name="caseType">The type of case to be applied to the text. If the case type is 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.FirstCap"/>, and this outputs some text, it will
            be changed to <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.None"/>.</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText.ComparableText">
            <summary>
            The text for comparing this instruction text with another.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText.VisibleText">
            <summary>
            The text as visible without any formatting.
            </summary>
            <remarks>This is invalid after there has been whitespace xml</remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyInstructionText.ComparableText"/>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.quoteCharacters">
            <summary>The character class for all quote characters</summary>
            <remarks>The following were in the old version, but these are control characters
            "\u0093|\u0094"; <br/></remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.switchRegex">
            <summary>
            An or combination of regex's  to denote the strings which would end a text denoted by
            white space.
            </summary>
            <remarks>All fields can have <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.universalFormattingSwitches"/>, while others have field
            specific switches. This will also, always include the \s</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldType,System.Globalization.CultureInfo)">
            <summary>
            Creates a new instruction token for use in a field of a specific type.
            </summary>
            <remarks>This should not be used until you know what type of field it is. In other words,
            the type should never be unset; if it is, it will be treated the same as ignore.</remarks>
            <param name="type">The type of the field</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Writes out this text to the given writer
            </summary>
            <remarks><para>When writing out, this will start inside a &lt;w:r&gt; and end inside a
            &lt;w:r&gt; (which may be a different run). This will be at the same depth, so it won't
            go from a run outside a table to a run inside a table, or anything like that, but it may
            go from a run in one paragraph to a run in the next paragraph. </para><para>All text will
            be outputted in &lt;w:t&gt; elements</para></remarks>
            <todo>Handle something that starts or ends with an image (perhaps force images to have
            there awn fragment)</todo>
            <param name="writer">The writer to which this text will be written</param>
            <param name="caseType">The type of case to be applied to the text. If the case type is 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.FirstCap"/>, and this outputs some text, it will
            be changed to <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.None"/>.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.Rewrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Rewrite the contents of this text
            </summary>
            <param name="writer">The destination xml</param>
            <param name="caseType">The type of case to be applied to the text. If the case type is 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.FirstCap"/>, and this outputs some text, it will
            be changed to <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.None"/>.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.AppendBlock(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            </summary>
            <param name="block"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.Append(System.String)">
            <summary>
            Adds instructions taken directly from a <c>&lt;w:instrText&gt;</c> element or a 
            <c>&lt;w:instr&gt;</c> attribute.
            </summary>
            <param name="instructionPiece">A string of text that forms part of the instructions.
            </param>
            <returns>The remaining text after the end of this token or <c>null</c> if the new piece
            of text is entirely encompassed by this token. If the token ends at the end of the given
            instruction piece, the empty string will be returned</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Returns whether the given xml would denote the end of this token
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the current xml node denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Returns whether the given xml would denote the end of this token
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the current xml node denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.EndOfToken(System.String)">
            <summary>
            Returns the index, within a string of the index of the end of the current token.
            </summary>
            <param name="piece">the next piece of text</param>
            <returns>the index of the end of the current token within the given text, or -1 if the
            token encompasses the given string</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.UnescapeMatchEvaluator(System.Text.RegularExpressions.Match)">
            <summary>
            Used with <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.unescapeRegex"/>; replaces one "\" with none and two with one.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.Unescape(System.String)">
            <summary>
            Removes all the backslashes inserted in the instructions
            </summary>
            <param name="text">a bit of instruction text</param>
            <returns>what the given text should actually appear as</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.CompareTo(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText)">
            <summary>
            Compares this instruction to another
            </summary>
            <todo>Enable wildcards and number comparison</todo>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.VisibleText">
            <summary>
            The text as visible without any formatting.
            </summary>
            <todo>Perhaps this should be replaced with a list of the visible text pieces</todo>
            <remarks>This is invalid after there has been whitespace xml</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionText.ComparableText">
            <summary>
            The text for comparing this instruction text with another.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace">
            <summary>
            Holds the whitespace between text in instructions.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace.Append(System.String)">
            <summary>
            Adds instructions taken directly from a <c>&lt;w:instrText&gt;</c> element or a 
            <c>&lt;w:instr&gt;</c> attribute.
            </summary>
            <param name="instructionPiece">A string of text that forms part of the instructions.
            </param>
            <returns>The remaining text after the end of the whitespace or <c>null</c> if the new piece
            of text is entirely encompassed by this token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Returns false, because no xml node can be the end of whitespace.
            </summary>
            <remarks>Although you may think that they should be counted as text, the following are
            replaced by a # when a field is updated:
            <list type="bullet">
            <item>image</item>
            <item>chart</item>
            </list></remarks>
            <todo>Confirm that there isn't anything that can cause problems; check Run Content in the
            docs</todo>
            <param name="reader">a reader parsing a document</param>
            <returns><c>false</c> </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace.EndOfToken(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Returns whether the given xml would denote the end of this token
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the current xml node denotes the end of this token, <c>false</c>
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace.StripLeft(System.String)">
            <summary>
            Removes all the white space from the left of the piece
            </summary>
            <remarks>Only use this for preprocessing, during actual processing, you need to keep the
            whitespace so it can be written out</remarks>
            <param name="piece">A piece of text</param>
            <returns>The actual text after leading whitespace has been removed</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionWhitespace.Rewrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Rewrite the contents of this text
            </summary>
            <param name="writer">The destination xml</param>
            <param name="caseType">The type of case to be applied to the text. If the case type is 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.FirstCap"/>, and this outputs some text, it will
            be changed to <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType.None"/>.</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml">
            <summary>
            Instruction Container for any type of xml.
            </summary>
            <remarks>instruction nodes and fldchar nodes should not be placed in here. Neither should
            any nested blocks.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml.GetString">
            <summary>
            Finalizes the xml and returns the string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml.ToString">
            <summary>
            Use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml.GetString"/> if done writing; this may not be valid xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml.WriteOutput(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            <todo>This needs to properly update case, e.g. if it's a paragraph break</todo>
            </summary>
            <param name="writer"></param>
            <param name="data"></param>
            <param name="type"></param>
            <param name="caseTypeSource"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.InstructionXml.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the instruction itself.
            </summary>
            <param name="data">The data for populating any fields/bookmarks</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IntegerField">
            <summary> representation of an integer (32-bit) field at a fixed location
            within a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32)">
            <summary> construct the IntegerField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.Int32)">
            <summary> construct the IntegerField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the IntegerField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.#ctor(System.Int32,System.Int32,System.SByte[])">
            <summary> construct the IntegerField with its offset into its containing
            byte array, initialize its value, and write the value to a byte
            array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is
            negative or too large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is too
            large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="T:System.IO.IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is too
            large
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IntegerField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.IntPair" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.IOUtils.readFully(System.IO.Stream,System.SByte[])">
            <summary> Helper method, just calls <tt>readFully(in, b, 0, b.length)</tt></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.IOUtils.readFully(System.IO.Stream,System.SByte[],System.Int32,System.Int32)" -->
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions">
            <summary>
            Interface representing instructions that have already been read in completely
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.GetSwitch(System.String)">
            <summary>
            Returns the text corresponding to a given switch
            </summary>
            <param name="switchString">The text that represents the switch; e.g. "\@" or "\f"</param>
            <returns>The contents of the switch or null if the switch is not there or has no value.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.GetText(System.Int32)">
            <summary>
            Gets the ith text element.
            </summary>
            <param name="index">The index of the text. Note that this does not include whitespace, so
            the 0th element of "  mergefield name" would be "mergefield", and name would be the 1st.
            </param>
            <returns>the text node at the given index, or <c>null</c></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.GetCaseType">
            <summary>
            Get the case type of these instructions.
            </summary>
            <returns>The type of case to use for this field</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the instructions to a writer.
            </summary>
            <remarks>This assumes that it is part of a complex field. Before calling this a run
            should have been started and the begining field character should have been printed.
            </remarks>
            <param name="writer">The destination xml</param>
            <param name="data">The data for populating any fields/bookmarks</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.TokenCount">
            <summary>
            The number of tokens completely processed in the field.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IReadOnlyXmlFieldInstructions.Image">
            <summary>
            Returns the last image that is not part of a switch
            </summary>
            <remarks>This only applies for merge fields; <c>null</c>, if this is not a merge field or
            there is no image unattached to a switch.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.IRowSpan">
            <summary>
            A span of rows (optionally one) that may or may not be repeated; used during 
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable"/> preprocessing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.IRowSpan.Repeat(System.UInt32,System.UInt32,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.BookmarkInformation)">
            <summary>
            Sets this span, or a subset of this span, to be repeated, based on the given
            information.
            </summary>
            <remarks>If this span is already set to repeat, this span's info will be updated and a
            new row span will be created with the other info, and all of this row spans children. 
            The only child of this row span will be the new row span.<br/>
            
            This span will get the info with the first startColumn, or if startColumns are equal,
            the first lastColumn, or if those are equal, it will maintain its original info.
            </remarks>
            <param name="startRow">The index of the first row of the bookmark</param>
            <param name="endRow">The index of the last row of the bookmark</param>
            <param name="start">The repeat information</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.IRowSpan.Finalize">
            <summary>
            Returns the actual blocks that are in this span (recursively finalizing child spans).
            </summary>
            <remarks>If this span has info (it is being repeated) then it will be the only one
            returned.</remarks>
            <returns>The block structure between the start path and end path of this row span.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml">
            <summary>
            Interface for storing images from data sources to be added to an open xml document.
            </summary>
            <remarks>In order for this to work, the relationships will have to be retrieved
            beforehand, so that adding an image will get a unique relationship id. </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.AddImage(System.Byte[],System.String)">
            <summary>
            Adds a new image to this storage.
            </summary>
            <param name="image">the Image to be added to the storage</param>
            <param name="extension">The appropriate file extension for the given image. 
            Include the '.' (e.g. ".jpg" or ".bmp"). <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ImageProperties"/></param>
            <returns>The string of the reference id to be used for referencing the inserted image.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.AddExternalDoc(System.Byte[],SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ExternalDocumentType)">
            <summary>
            Adds a new external document to this storage
            </summary>
            <param name="rtf">The document to be added to the storage</param>
            <param name="documentName">The name (sans extension) to use for the document.
            Unlike images, external docs are freeform in their naming.</param>
            <returns>The string of the reference id to be used for referencing the inserted document.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.AddHeader(System.String)">
            <summary>
            Adds a new header to this storage
            </summary>
            <param name="name">The name of the header file</param>
            <returns>The string of the reference id to be used for referencing the inserted header.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.GetIdFromName(System.String)">
            <summary>
            Retrieves a reference Id attached to the given name
            </summary>
            <param name="name">The item to find</param>
            <returns>The string of the reference id to be used for referencing the item.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.GetNameFromId(System.String)">
            <summary>
            Retrieves a name attached to the given reference id
            </summary>
            <param name="name">The item to find</param>
            <returns>The string of the name to be used for referencing the item.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.Write(ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Writes all the images from this document part to the zip file and the relationships file.
            </summary>
            <param name="zipOutput">The output file.</param>
            <param name="documentPart">The part of the document that is being written (e.g. document
            or header2)</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.AddFooter(System.String)">
            <summary>
            Adds a new footer to this storage
            </summary>
            <param name="name">The name of the footer file</param>
            <returns>The string of the reference id to be used for referencing the inserted footer.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.SetName(System.String)">
            <summary>
            Sets the name of the rels file that is output
            </summary>
            <param name="name">The name of the rels file</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml.CopyMinusBlobs">
            <summary>
            Clones this BinaryDataSource without the external blobs
            </summary>
            <returns>The new BinaryDataSource</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.GetStartTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement@)">
            <summary>
            Returns the last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>
            </summary>
            <param name="endClump"></param>
            <param name="endPath"></param>
            <returns>The last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>, or <c>null</c> if there isn't a start/end tag pair.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.MoveToParagraphStartTag">
            <summary>
            If one of the start tags needs to be moved to it's parent, all of the remaining ones do
            also.
            </summary>
            <remarks>If start tags can be moved to the parent, then there is no content in the
            paragraph before the bookmark tags, implying that the end tags in this clump were also
            moved to the paragraph tag, thus we do not have to worry about the end tags overlapping
            with the start tags.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.Ignore">
            <summary>
            Whether to add this as a child to any bookmarks. If this is <c>false</c> this class must
            extend <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock"/>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.PointsToActualTags">
            <summary>
            <c>true</c> if this block points to bookmark tags, <c>false</c> if there are no actual
            bookmark tags at <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.StartPath"/>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.StartCount">
            <summary>
            The number of start tags
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.EndCount">
            <summary>
            The number of end tags
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.StartPath">
            <summary>
            The path to the first bookmark in this TagClump. If there are no bookmarks found for 
            this tag clump, then this will point to the first tag after the one that the reader was
            on when the constructor was called.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump.EndTagsInParagraph">
            <summary>
            We move EndTags to the paragraph open tag if there is no content, this lets you know
            if the end tags are in a paragarph
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.IteratorStream">
            <summary>
            An IteratorStream takes an IEnumerator of streams, concatenates them, and outputs data such that
            it came from one big stream. This is used for cases where it's not possible to store everything in memory at once.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IteratorStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Since the whole point of this class is to make a stream which doesn't store everything in memory at once,
            we can't seek through it.
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.IteratorStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fill buffer with bytes from the streams pointed to by ienumerator
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="bytesToRead"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IXmlRepeatBlock.SetGroupData(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.DataParameter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.IRepeatingAdvancer@)">
            <summary>
            Sets the repeat blocks grouping data if this repeat block is for grouping, returns 
            <c>false</c> otherwise.
            </summary>
            <returns><c>true</c> if this repeat block is for grouping, <c>false</c> if it's an old
            fashioned repeat block over a data source.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IXmlRepeatBlock.SetAsIgnored">
            <summary>
            Sets this bookmark as an ignored bookmark, meaning that it's process methods will not be 
            called, only that of it's children.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IXmlRepeatBlock.DataSource">
            <summary>
            The data source associated with this repeat block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IXmlRepeatBlock.Name">
            <summary>
            The name of the data source
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.JaggedArray2D">
            <summary> Array wrapping object for an array of arrays.
            
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:31:27 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.getObject(System.Int32,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.Array2D.getObject(System.Int32,System.Int32)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.MaxCols">
            <seealso cref="!:Array2D.getMaxCols()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.JaggedArray2D.MaxRows">
            <seealso cref="!:Array2D.getMaxRows()">
            </seealso>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1">
            <summary>
            A simple class to emulate Iterators in Java, because sometimes 
            we want to be able to check if there is another element in our
            enumeration without advancing it.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.mEnumerator">
            <summary>
            The underlying enumerator, this is where we get the actual objects
            from, and how we detremine if there are more elements
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.mCalledMoveNext">
            <summary>
            Whether or not we have called MoveNext but not Current
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.mHasNext">
            <summary>
            Whether or not there is a next element, since hasNext() should be
            callable multiple times in a row without advancing the enumerator
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new Iterator from a given <code>IEnumerator</code>
            </summary>
            <param name="enumerator">the enumerator that will be used 
            for getting values and advancing</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.HasNext">
            <summary>
            Checks whether there are any elements left in the enumeration
            </summary>
            <returns>true if there are any elements, false if all the 
            elements have been returned</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaGenericIterator`1.Next">
            <summary>
            Advances the iterator to the next position and returns the object 
            at that position. <code>HasNext()</code> should be called before 
            this.
            </summary>
            <returns>the object at the next position in the enumeration</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.JavaIterator`1">
            <summary>
            A simple class to emulate Iterators in Java, because sometimes 
            we want to be able to check if there is another element in our
            enumeration without advancing it.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mEnumerator">
            <summary>
            The underlying enumerator, this is where we get the actual objects
            from, and how we detremine if there are more elements
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mCalledMoveNext">
            <summary>
            Whether or not we have called MoveNext but not Current
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.mHasNext">
            <summary>
            Whether or not there is a next element, since hasNext() should be
            callable multiple times in a row without advancing the enumerator
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.#ctor(System.Collections.Generic.IEnumerator{`0})">
            <summary>
            Creates a new Iterator from a given <code>IEnumerator</code>
            </summary>
            <param name="enumerator">the enumerator that will be used 
            for getting values and advancing</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.HasNext">
            <summary>
            Checks whether there are any elements left in the enumeration
            </summary>
            <returns>true if there are any elements, false if all the 
            elements have been returned</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.JavaIterator`1.Next">
            <summary>
            Advances the iterator to the next position and returns the object 
            at that position. <code>HasNext()</code> should be called before 
            this.
            </summary>
            <returns>the object at the next position in the enumeration</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey">
            <summary>
              The abstract base class for LicenseKey1 and LicenseKey2
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey">
            <summary>
            </summary>
            <author>  geoffk
              Sep 22, 2003 4:07:15 PM
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey._inUse">
            <summary>
            A locking variable to denote that either ExcelWriter or WordWriter is running
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.#ctor(SoftArtisans.OfficeWriter.Shared.LicenseKey.Format)">
            <summary>
            This method is *protected* but it takes an internal parameter, so it has to be internal
            </summary>
            <param name="licenseFormat"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.CharValue(System.Char)">
            <summary>
              Gets the given character's value in base32.
            </summary>
            <param name = "c">the given character.
            </param>
            <returns> the character value in base32, or -1 if not a valid character.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Decode(System.String)">
            <summary>
              Decodes a license key. License key should be in format
              XXXXXX-XXXX-XXXX-XXXXXX. The decoder will validate the license key by
              checking its crc sum. If the crc sum is invalid, it will throw an
              exception.
            </summary>
            <param name="keyString">the given license key
            </param>
            <returns> a license key decodeded from the string.
            </returns>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
              if the keyString givin is not in valid format or the key's
              crc sum is not valid.
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.GetProductPlatform(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product)">
            <summary>
              The platform associated with the given product id
            </summary>
            <param name="productId">the product id</param>
            <returns>either <see cref="!:Java"/> 
              if <code>productId</code> is one of the constant product
              ids on the java platform; <see cref="!:Windows"/>
              otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.GetLicenseKeyName(SoftArtisans.OfficeWriter.Shared.LicenseKey.Product)">
            <summary>
            Used by ConfigurationLicenseManager to determine where the license key is in the config
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Unlock">
            <summary>
            Unlocks the ExcelWriter or WordWriter so that another instance can run.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Lock(SoftArtisans.OfficeWriter.Shared.LicenseKey)">
            <summary>
            Sets a lock for ExcelWriter or WordWriter, if the given license key only supports one thread
            NOTE: this does not lock on the object itself since those can be changed by passing in the
            license key to the appropriate property
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.GetProductShortName">
            <summary>
            TODO: This should be removed, but I think there's another project,
            that's not part of the OW that uses Licensing, that may or may not use this
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Encode">
            <summary>
              Return the encoded key.
            </summary>
            <remarks>
              This method calculate and include a checksum
            </remarks>
            <returns> the encoded license key.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.ToString">
            <summary>
              Return the encoded key.  If you have a <CODE>LicenseKey</CODE> named
              key, the key.toString() is the same as LicenseKey.encode(key)
            </summary>
            <returns> the encoded license key.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.NumberOfProductEditions">
            <summary>
              This is the number of different product editions that there are
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.GetProductEditionName(SoftArtisans.OfficeWriter.Shared.LicenseKey.Edition)"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.LicenseFormat">
            <summary>
              Get the license format for this license key.
            </summary>
            <returns> the license format
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.LicenseAuthorityName">
            <summary>
              Returns the string representation for any of the constants
              in this class for license authorities
            </summary>
            <remarks>
              If a subclass has additional authorities, this should be 
              overriden. If the authority is unknow "Unknown Authority" will be returned.
            </remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.ClientInfoReq">
            <summary>
              The client requirement info for this key.
            </summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">if set to something that is not a requirement</exception>
            <seealso cref="!:InstallationKeyMustMatch">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.ComputerNameHash">
            <summary>
              Gets the computer nmame has for this license key.
            </summary>
            <returns> the computer name hash
            </returns>
            <seealso cref="!:setComputerNameHash(int)">
            </seealso>
            <summary>
              Set the computer name has for this license key.  The hash should
              can be any 16-bit <CODE>short</CODE>.
            </summary>
            <param name="hash">the computer name hash.
            </param>
            <throws>  LicenseKeyException if <CODE>(hash &lt; 0 || hash &gt; 65535)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.CreatedDay">
            <summary>
              Gets the day this key was created.
            </summary>
            <returns> the day this key was created.
            </returns>
            <seealso cref="!:setCreatedDay(int)">
            </seealso>
            <summary>
              Set the day this key was created.  It can be any number within
              the range [1-31].
            </summary>
            <param name="day">the day the license key was created.
            </param>
            <throws>  LicenseKeyException if <CODE>(day &lt; 1 || day &gt; 31)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.CreatedMonth">
            <summary>
              Get the month this key was created.
            </summary>
            <returns> the month this key was created.
            </returns>
            <seealso cref="!:setCreatedMonth(int)">
            </seealso>
            <summary>
              Set the month this key was created.  It can be any number within
              the range [1-12];
            </summary>
            <param name="month">the month this key was created.
            </param>
            <throws>  LicenseKeyException if </throws>
            <summary>
              <CODE>(month &lt; 1 || month &gt; 12)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.CreatedYear">
            <summary>
              Gets the year this key was created.
            </summary>
            <returns> the year this key was created.
            </returns>
            <seealso cref="!:setCreatedYear(int)">
            </seealso>
            <summary>
              Set the year this key was created.  Valid years are any between the
              values [2003-2010].
            </summary>
            <param name="year">the year this key was created.
            </param>
            <throws>  LicenseKeyException if <CODE>(year &lt; 2003 || year &gt; 2010)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.ExpirePeriod">
            <summary>
              Get the expire period code for this license key.
            </summary>
            <returns> the expire code for this key
            </returns>
            <seealso cref="!:setExpirePeriod(int)">
            </seealso>
            <summary>
              Set the expire period for this license key.  This field should be
              ignore if the product is not an evaluation product.
            </summary>
            <param name="expireCode">the expire period code.
            </param>
            <seealso cref="!:In30Days">
            </seealso>
            <seealso cref="!:In60Days">
            </seealso>
            <seealso cref="!:In90Days">
            </seealso>
            <seealso cref="!:In120Days">
            </seealso>
            <throws>  LicenseKeyException if <CODE>expireCode</CODE> is invalid. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.KeyType">
            <summary>
              Gets the key type for this license key.
            </summary>
            <returns> the key type.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey.LicenseAuthority" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.MajorVersion">
            <summary>
              The major version of the product for this license key.
            </summary>
            <returns> the major version of the product.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.MaxCpuCount">
            <summary>
              Gets the max cpu count for this license key.
            </summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary>
              Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
              should be any <CODE>int</CODE> for [1-63].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 63)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.ProductId">
            <summary>
              The product id for this license key.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey.SerialNumber" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey.SupportsEditions">
            <summary>
              Returns true if this type of license keys supports editions
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey.Format.Layout1">
            <summary>
              The original C++ license format
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey.Format.Layout2">
            <summary>
              The second revision, came with OW 1.1
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey.Format.Layout3">
            <summary>
              The third revision, came with OW 8, so that we could have version 8
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Authority">
            <summary>
              Different Resellers get their own keys
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.ClientRequirement">
            <summary>
              Additional requirements for this key to be valid, beyond the checksum, and product ID/Version
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Edition">
            <summary>
              Different editions denote what part of the product is available, and allow for various
              limitations on how you can use it.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Expiration">
            <summary>
              The number of days after this key was created that it will expire.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Evaluation">
            <summary>
              Whether or not this is an evaluation key or a permanent key
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Product">
            <summary>
              etermines the product AND platform which this key unlocks. 
              Note that some keys, such as OfficeWriter, unlock multiple products.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey.Product.FileUpWindows">
            <summary>
              There was a comment saying this includes FileUpEE, but that didn't have the
              other enum for FileUpEE, so I'm not sure how valid that is,
              either way FileUp doesn't use license keys
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey.Platform">
            <summary>
              The platform that this is good for. Any new keys should be windows
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.createShort(System.SByte,System.SByte)">
            <summary>
              Creates a short with the given bytes.
            </summary>
            <param name = "lsb">the least significant byte
            </param>
            <param name = "msb">the most significant byte.
            </param>
            <returns> the short created from the two bytes.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.getHashValue(System.String)">
            <summary>
              Gets a 13-bit hash value from the given string. Use mainly to calculate
              the hash value of a computer name.
            </summary>
            <param name="string_Renamed">the given string.
            </param>
            <returns> a 13-bit unsigned value of the hash.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.set_ComputerNameHash(System.Int32)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.get_ComputerNameHash">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.printBinaryDump">
            <summary>
              Prints the binary dump for this license key, mainly a debug method.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.ToString">
            <summary>
              Return the encoded key. If you have a <CODE>LicenseKey</CODE> named
              key, the key.toString() is the same as LicenseKey.encode(key)
            </summary>
            <returns> the encoded license key.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.ComputerNameHash">
            <summary>
              Gets the computer nmame has for this license key.
            </summary>
            <returns> the computer name hash
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.set_ComputerNameHash(System.Int32)">
            </seealso>
            <summary>
              Set the computer name has for this license key. The hash should can be
              any 16-bit <CODE>short</CODE>.
            </summary>
            <param name="value">the computer name hash.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>
              if <CODE>(hash &lt; 0 || hash &gt; 65535)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.Crc">
            <summary>
              Gets the CRC for this license key. Note that there is no setCrc method,
              because the CRC is automaticly calculated and set when the LicenseKey
              gets encoded.
            </summary>
            <returns> the crc value
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Decode(System.String)">
            </seealso>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LicenseKey.Encode">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.CreatedDay">
            <summary>
              Gets the day this key was created.
            </summary>
            <returns> the day this key was created.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.set_CreatedDay(System.Int32)">
            </seealso>
            <summary>
              Set the day this key was created. It can be any number within the range
              [1-31].
            </summary>
            <param name="value">the day the license key was created.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>
              if <CODE>(day &lt; 1 || day &gt; 31)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.CreatedMonth">
            <summary>
              Get the month this key was created.
            </summary>
            <returns> the month this key was created.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.set_CreatedMonth(System.Int32)">
            </seealso>
            <summary>
              Set the month this key was created. It can be any number within the
              range [1-12];
            </summary>
            <param name="value">the month this key was created.
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>
              if <CODE>(month &lt; 1 || month &gt; 12)</CODE>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.CreatedYear">
            <summary>
              The year this key was created.
            </summary>
            <remarks>
              If setting Major Version or ProductId, those should be changed first, as 
              the way this is set changes depending on those values
            </remarks>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
              if <CODE>(year &lt; MinYear || year &gt; MaxYear)</CODE>
            </exception>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MinYear"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.CreatedYearFourthBit">
            <summary>
              The most significant bit of the created year in the 4th bit position.
            </summary>
            <remarks>
              If setting Major Version or ProductId, those should be changed first, as 
              the way this is set changes depending on those values.
            
              For OW-4.x licenses this is grabbed from the key, for earlier versions, it is 0.
            </remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MinYear"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MinYear">
            <summary>
              The Lowest year that a license could have been created on.
            </summary>
            <remarks>
              For OW-4.x licenses this is 2008-2023, for older stuff it's 2003-2010
            </remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MaxYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MaxYear">
            <summary>
              The Highest year that a license could have been created on.
            </summary>
            <remarks>
              For OW-4.x licenses this is 2008-2023, for older stuff it's 2003-2010
            </remarks>
            <seealso cref="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MinYear"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.Data">
            <summary>
              Gets the array of data in this key.
            </summary>
            <returns> the data array.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.ExpirePeriod">
            <summary>
              The expire period code for this license key. This field should be ignore
              if the product is not an evaluation product.
            </summary>
            <seealso cref="!:EXPIRES_IN_30_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_60_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_90_DAYS">
            </seealso>
            <seealso cref="!:EXPIRES_IN_120_DAYS">
            </seealso>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">if set to an invalid period</exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.KeyType">
            <summary>
              Gets the key type for this license key.
            </summary>
            <returns> the key type.
            </returns>
            <seealso cref="!:set_KeyType(int)">
            </seealso>
            <summary>
              Set a new key type for this license key. The <CODE>type</CODE> shoud
              be either 0 or 1.
            </summary>
            <param name="value">the new type.
            </param>
            <seealso cref="!:KEYTYPE_EVAL">
            </seealso>
            <seealso cref="!:KEYTYPE_PERM">
            </seealso>
            <throws>  LicenseKeyException </throws>
            <summary>
              if <CODE>type</CODE> is not 0 or 1.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.MajorVersion">
            <summary>
              Gets the major version of the product for this license key.
            </summary>
            <returns> the major version of the product.
            </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.set_MajorVersion(System.Int32)">
            </seealso>
            <summary>
              Set the major version of the product for this license key. The <CODE>
                                                                               version</CODE> should be an <CODE>int</CODE> from [0-7].
            </summary>
            <param name="value">the version number
            </param>
            <throws>  LicenseKeyException </throws>
            <summary>
              if <CODE>(version &lt; 0 || version &gt; 7)</CODE>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SoftArtisans.OfficeWriter.Shared.LicenseKey1" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey1.#ctor">
            <summary> Creates a blank license key.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey1.#ctor(System.Int16[])">
            <summary> Creates a License key with an array of data.  Note, this does
            not validate the CRC.  Use the static decode() method instead.
            </summary>
            <param name="buffer">the memory byte buffer.
            </param>
            <throws>  LicenseKeyException if <CODE>data.length</CODE> != 6 </throws>
            <seealso cref="!:LicenseKey.decode(String)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ProductId">
            <summary> Get the product id for this license key.</summary>
            <returns> the product id.
            </returns>
            <seealso cref="!:setProductId(int)">
            </seealso>
            <summary> Set a new product for this license key.  The id should be any
            <CODE>int</CODE> from [0-15].  Only the <CODE>int</CODE>s
            1,2,3,5,6,7,8,9 are used.  The rest are reserved for future products.
            
            Note: Setting id to a reserved <CODE>int</CODE> does not throw any
            exceptions or errors!
            
            </summary>
            <param name="id">the new product id, see the constants.
            </param>
            <seealso cref="!:PRODUCT_EXCELWRITER_COM_DEPRICATED">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_REPORTSVC_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUP_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUPEE_WIN">
            </seealso>
            <throws>  LicenseKeyException if <CODE>(id &lt; 0 || id &gt; 15)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.MaxCpuCount">
            <summary> Gets the max cpu count for this license key.</summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary> Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
            should be any <CODE>int</CODE> for [1-63].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 63)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ClientInfoReq">
            <summary> Gets the client requirement info for this key.</summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <summary> Set the clientInfoReq for this license key.
            
            </summary>
            <param name="requirement">the client requirment.
            </param>
            <seealso cref="!:CLIENTREQ_EVAL_KEY_MUST_MATCH">
            </seealso>
            <seealso cref="!:CLIENTREQ_NAME_HASH_MUST_MATCH">
            </seealso>
            <throws>  LicenseKeyException if <CODE>requirement</CODE> is not one </throws>
            <summary> of the valid fields.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.LicenseAuthority" -->
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.SerialNumber" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey1.ProductEdition">
            <summary> UNIMPLEMENTED IN V1</summary>
            <summary> UNIMPLEMENTED IN V1</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey2">
             <summary> This class represents a LicenseKey, version 2.
             
             Changes from Version 1:
             - Added edition
             - Added OfficeWriter.NET product key
             - Removed 4 high bits from Serial Number
             - Removed 1 high bit from CPU count
             - Removed 2 high bits from License Authority
             - Removed 1 high bit from ClientReq
             - Added edition in high bits from Serial number
             - added remaining 4 bits to Product (scattered)
             
             </summary>
             <author>  geoffk
             Sep 22, 2003 9:51:46 AM
             </author>
            
            
            
             ************************************************************************************************
             ************************ DO NOT CHANGE THIS CODE UNLESS ABSOLUTELY NECESSARY *******************
             ************************************************************************************************
             This code represents our parsing of keys in the wild, and if we change the way that we parse it
             we may let a wild key validate something it wasn't supposed to
             e.g. someone's 4x key now supports OW 8
             ************************************************************************************************
             ************************ DO NOT CHANGE THIS CODE UNLESS ABSOLUTELY NECESSARY *******************
             ************************************************************************************************
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey2.#ctor">
            <summary> Creates a blank license key.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey2.#ctor(System.Int16[])">
            <summary> Creates a License key with an array of data.  Note, this does
            not validate the CRC.  Use the static decode() method instead.
            </summary>
            <param name="aData">the memory byte buffer.
            </param>
            <throws>  LicenseKeyException if <CODE>data.length</CODE> != 6 </throws>
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.LegacyLicenseKey.Decode(System.String)">
            </seealso>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.LicenseAuthority" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.MaxCpuCount">
            <summary> Gets the max cpu count for this license key.</summary>
            <returns> the max cpu count
            </returns>
            <seealso cref="!:setMaxCpuCount(int)">
            </seealso>
            <summary> Set the max cpu count for this license key.  The <CODE>maxCpu</CODE>
            should be any <CODE>int</CODE> for [1-32].
            </summary>
            <param name="maxCpu">the max cpu setting.
            </param>
            <throws>  LicenseKeyException if <CODE>(maxCpu &lt; 1 || maxCpu &gt; 32)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ClientInfoReq">
            <summary> Gets the client requirement info for this key.</summary>
            <returns> the client requirement info
            </returns>
            <seealso cref="!:setClientInfoReq(int)">
            </seealso>
            <summary> Set the clientInfoReq for this license key.
            
            </summary>
            <param name="requirement">the client requirment.
            </param>
            <seealso cref="!:CLIENTREQ_EVAL_KEY_MUST_MATCH">
            </seealso>
            <seealso cref="!:CLIENTREQ_NAME_HASH_MUST_MATCH">
            </seealso>
            <throws>  LicenseKeyException if <CODE>requirement</CODE> is not one </throws>
            <summary> of the valid fields.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.SerialNumber" -->
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ProductId">
            <summary> Get the product id for this license key.</summary>
            <returns> the product id.
            </returns>
            <seealso cref="!:setProductId(int)">
            </seealso>
            <summary> Set a new product for this license key.  The id should be any
            <CODE>int</CODE> from [0-255].  Only the <CODE>int</CODE>s
            [1-11] inclusive are used.  The rest are reserved for future products.
            Note that 0 is not used!
            
            Note: Setting id to a reserved <CODE>int</CODE> does not throw any
            exceptions or errors!
            
            </summary>
            <param name="id">the new product id, see the constants.
            </param>
            <seealso cref="!:PRODUCT_EXCELWRITER_COM_DEPRICATED">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_EXCELWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_WORDWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUP_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_FILEUPEE_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_OFFICEWRITER_JAVA">
            </seealso>
            <seealso cref="!:PRODUCT_OFFICEWRITER_WIN">
            </seealso>
            <seealso cref="!:PRODUCT_REPORTSVC_WIN">
            </seealso>
            <throws>  LicenseKeyException if <CODE>(id &lt; 1 || id &gt; 255)</CODE> </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.LicenseKey2.ProductEdition">
            <summary> Get the edition for this license key.</summary>
            <returns> the product edition.
            </returns>
            <seealso cref="!:setProductEdition(int)">
            </seealso>
            <summary> Sets a new edition for this license key.  This value must be between
            [0-15], and should use the static final values defined in LicenseKey2.
            
            </summary>
            <param name="aEdition">the new edition constant for this key.
            </param>
            <seealso cref="!:EDITION_SE;">
            </seealso>
            <seealso cref="!:EDITION_EE;">
            </seealso>
            <seealso cref="!:EDITION_SE_DEV;">
            </seealso>
            <seealso cref="!:EDITION_LE;">
            </seealso>
            <seealso cref="!:EDITION_DESKTOP_DEV;">
            </seealso>
            <seealso cref="!:EDITION_DESKTOP_RUNTIME;">
            </seealso>
            <seealso cref="!:EDITION_FREE;">
            </seealso>
            <seealso cref="!:EDITION_RS;">
            </seealso>
            <seealso cref="!:EDITION_RS_DEV;">
            </seealso>
            <throws>  LicenseKeyException if aEdition is out of the acceptable range. </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKey3">
            <summary>
              This class is used for managing License Keys with a Bit Layout of Version 3.
            </summary>
            <remarks>
              See <see cref="!:https://intranet.int.softartisans.com/confluence/display/DEV/License+Key+Bit+Layout+-+Version+3"/>
              for more information on the layout of the keys
              ************************************************************************************************
              ************************ DO NOT CHANGE THIS CODE UNLESS ABSOLUTELY NECESSARY *******************
              ************************************************************************************************
              This code represents our parsing of keys in the wild, and if we change the way that we parse it
              we may let a wild key validate something it wasn't supposed to
              e.g. someone's 4x key now supports OW 8
              ************************************************************************************************
              ************************ DO NOT CHANGE THIS CODE UNLESS ABSOLUTELY NECESSARY *******************
              ************************************************************************************************
            </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey3.BitsOfActualData">
            <summary>
              The number of bits of data in the license key (i.e. not including the Checksum)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.LicenseKey3.BytesOfActualData">
            <summary>
              The number of bytes to use when calculating the hash
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKey3.GetInt(System.Collections.BitArray,System.Int32,System.Int32)">
            <summary>
              Returns the number construct from length bits in the bit array
            </summary>
            <param name = "bitArray">the source of the data</param>
            <param name = "startIndex">the index to start copying</param>
            <param name = "length">the number of bits to extract</param>
            <returns>the bits extracted</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException">
            <summary> An exception thrown when trying to use
            an invalid or inappropriate license key.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyExpiredException">
            <summary> An exception thrown when trying to use a key that has expired, or has not been created yet.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator">
            <summary>
              Validates a License key against a product id and version
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.Validate(System.String,SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32)">
            <summary>
              Validates a single key for a product and version using the ITable interface.
            
              This is designed to be called by a product, checking to make sure that the key it has found
              will work with the product.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.HasExpired(SoftArtisans.OfficeWriter.Shared.LicenseKey)">
            <summary>
              Checks whether the given key has expired.
            
              UTC time must be used to avoid time zone issues, even though we only compare dates.
            </summary>
            <param name = "key">the license key
            </param>
            <returns> true if the key has expired.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LicenseKeyValidator.ValidatePackage(System.String,SoftArtisans.OfficeWriter.Shared.LicenseKey.Product,System.Int32,SoftArtisans.OfficeWriter.Shared.ILicenseTable)">
            <summary> Checks to see if the key aKey has a product that is provided by aProduct.aVersion.
            
            This is designed to work with the installer, and checks to see if the key matches any of the products
            that this installer can provide.
            
            </summary>
            <param name="key">a key to validate.
            </param>
            <param name="product">The product that should contain the product provided by aKey.
            </param>
            <param name="version">The version of the product that should contain the product provided by aKey.
            </param>
            <param name="table">A table to look up the products in.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.LineSpacingDescriptor">
            <summary> This class is used to determine line spacing for a paragraph.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.List">
            <Doc>
      <summary>
        <para>This class is used to represent a list in a Word document. Lists are part of the <i>BlockElement</i> objects of an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/>. Using this class, Lists can be read and written. Lists contain list entries, which are basically paragraphs with additional features.</para>
      </summary>
      <remarks>
        <para>To create a new list, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertListBefore(System.Boolean)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertListAfter(System.Boolean)"/>.  To get an existing list, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/>.</para>
      </remarks>
      <example>
        <para>The following sample demonstrates how to create a new list at the end of a document as well as how to get the first list of a document.<br/><code>

          //--- Insert a numbered list at the end of a new document with one entry
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          List lst = doc.InsertListAfter(true);
          lst.AddEntry(0);
          lst.InsertTextAfter("First list entry.", false);

          //--- Get the first list of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          List lst = doc.GetElements(Element.Type.List)[0];
        </code><br/><code>

          '--- Insert a numbered list at the end of a new document with one entry
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim lst As List = doc.InsertListAfter(True)
          lst.AddEntry(0)
          lst.InsertTextAfter("First list entry.", False)

          '--- Get the first list of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim lst As List = doc.GetElements(Element.Type.List)(0)
        </code></para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.GetEntry(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListEntry"/> object representing the entry at a specified index. The index of list entries starts at 0.</para>
        </summary>
        <param name="index">
          <para>An <c>int</c> representing the level to get the list entry at.</para>
        </param>
        <returns>
          <para>A <c>ListEntry</c> object representing the entry at a specified index.</para>
        </returns>
        <example>
          <para>
            <code>

          ListEntry entry = lst.getEntry(0);
        </code>
            <br/>
            <code>

          Dim entry As ListEntry = lst.getEntry(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.GetLevel(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListLevel"/> object representing a particular level for this lst. The levels start at 0 and end at 8 (9 levels total).</para>
        </summary>
        <param name="level">
          <para>An <c>int</c> representing the level to get the list level at.</para>
        </param>
        <returns>
          <para>A <c>ListLevel</c> object representing a particular level for this lst.</para>
        </returns>
        <example>
          <para>
            <code>

          ListLevel level = lst.GetLevel(0);
        </code>
            <br/>
            <code>

          Dim level As ListLevel = lst.GetLevel(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.InsertEntry(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListEntry"/> object representing an empty list entry that is inserted at the given index, which is indented to the level specified. http://wiki.softartisans.com/display/WW8/#param-index and http://wiki.softartisans.com/display/WW8/#param-level start at 0. The maximum level is 8 (9 levels total).</para>
        </summary>
        <param name="index">
          <para>An <c>int</c> representing the index at which to insert the new entry.</para>
        </param>
        <param name="level">
          <para>An <c>int</c> representing the level to assign to the new entry.</para>
        </param>
        <returns>
          <para>A <c>ListEntry</c> object representing the newly inserted entry.</para>
        </returns>
        <example>
          <para>
            <code>

          ListEntry entry = lst.InsertEntry(0, 0);
        </code>
            <br/>
            <code>

          Dim entry As ListEntry = lst.InsertEntry(0, 0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.AddEntry(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListEntry"/> object representing an empty list entry added to the end of the list, which is indented to the level specified. http://wiki.softartisans.com/display/WW8/#level can be between 0 and 8 (9 levels total).</para>
        </summary>
        <param name="level">
          <para>An <c>int</c> representing the level to assign to the new entry.</para>
        </param>
        <returns>
          <para>A <c>ListEntry</c> object representing the newly added entry.</para>
        </returns>
        <example>
          <para>
            <code>

          ListEntry entry = lst.AddEntry(0);
        </code>
            <br/>
            <code>

          Dim entry As ListEntry = lst.AddEntry(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;List&quot;]/Member[@signature=&quot;List.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.List.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;List&quot;]/Member[@signature=&quot;List.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.List.NumEntries">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of contiguous entries in this lst.</para>
        </summary>
        <example>
          <para>
            <code>

          int numEntries = lst.NumEntries;
        </code>
            <br/>
            <code>

          Dim numEntries As Integer = lst.NumEntries
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListData.getLevel(System.Int32)">
            <summary> Gets the level associated to a particular List at a particular index.
            
            </summary>
            <param name="index">1-based index
            </param>
            <returns> a list level
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ListEntry">
            <Doc>
      <summary>
        <para>This class is used to represent an entry in a List inside a Word document. A list entry in Word is basically a numbered paragraph.</para>
      </summary>
      <remarks>
        <para>The following sample gets the first <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListEntry"/> object of a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/>.</para>
        <para>To create a new list entry, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.List.AddEntry(System.Int32)"/>.  To get an existing list entry, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> to get all elements of type <c>ListEntry</c>.</para>
      </remarks>
      <example>
        <para>The following sample demonstrates how to create a new list entry at the end of a list as well as how to get the first list entry of an existing list.<br/><code>

          //--- Create a new list with a new list entry
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          List lst = doc.InsertListAfter(true);
          lst.AddEntry(0);
          lst.InsertTextAfter("First list entry.", false);

          //--- Get the first list entry of an existing list
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          ListEntry entry =
               (ListEntry)doc.GetElements(Element.Type.ListEntry)[0];
        </code><br/><code>

          '--- Create a new list with a new list entry
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim lst As List = doc.InsertListAfter(True)
          lst.AddEntry(0)
          lst.InsertTextAfter("First list entry.", False)

          '--- Get the first list entry of an existing list
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim entry As ListEntry = _
               doc.GetElements(Element.Type.ListEntry)(0)
        </code></para>
      </example>
    </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph">
            <Doc>
      <summary>
        <para>Represents a paragraph in the Word document. Technically, a paragraph is a block of text that ends with a carriage return.</para>
      </summary>
      <remarks>
        <para>To create a new paragraph, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphBefore(SoftArtisans.OfficeWriter.WordWriter.NamedStyle)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertParagraphAfter(SoftArtisans.OfficeWriter.WordWriter.NamedStyle)"/>. Each of these methods take a single argument of type <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/>. This argument can be null. If it is null, the Normal style is used. This method can be called from the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> object because <c>Document</c> inherits from the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> class.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Insert a paragraph at the end of a new document and add some sample text
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Paragraph paragraph = doc.InsertParagraphAfter(null);
          paragraph.InsertTextAfter("This is a new paragraph.");

          //--- Get the first paragraph of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Paragraph firstParagraph = doc.Elements(Element.Type.Paragraph)[0];
        </code>
          <br/>
          <code>

          '--- Insert a paragraph at the end of a new document and add some sample text
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim parargraph As Paragraph = doc.InsertParagraphAfter(Nothing)
          paragraph.InsertTextAfter("This is a new paragraph.")

          '--- Get the first paragraph of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim blocks() As BlockElements = doc.BlockElements
          Dim firstParagraph As Paragraph = doc.Elements(Element.Type.Paragraph)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Paragraph.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Paragraph&quot;]/Member[@signature=&quot;Paragraph.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Paragraph.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Paragraph&quot;]/Member[@signature=&quot;Paragraph.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Paragraph.Style">
            <Doc>
        <summary>
          <para>Returns or sets an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the Style of this paragraph.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return NamedStyle
          NamedStyle oNamedStyle = oParagraph.Style;

          //--- Set NamedStyle
          oParagraph.Style = oDocument.Styles[NamedStyle.BuiltIn.Heading1];
        </code>
            <br/>
            <code>

          '--- Return NamedStyle
          Dim oNamedStyle As NamedStyle = oParagraph.Style

          '--- Set NamedStyle
          oParagraph.Style = oDocument.Styles(NamedStyle.BuilIn.Heading1)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Paragraph.Formatting">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> object that represents the formatting for this paragraph (positioning, line spacing, etc).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return ParagraphFormatting
          ParagraphFormatting formatting = oParagraph.ParagraphFormatting;

          //--- Set ParagraphFormatting
          oParagraph.ParagraphFormatting = oParagraphFormatting;
        </code>
            <br/>
            <code>

          '--- Return ParagraphFormatting
          Dim formatting As ParagraphFormatting = oParagraph.ParagraphFormatting

          '--- Set ParagraphFormatting
          oParagraph.ParagraphFormatting = oParagraphFormatting
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListEntry.RestartNumbering">
            <Doc>
        <summary>
          <para>Sets the number of this list entry to "1" and renumbers all subsequent entries in the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/>.  This method splits the current ListEntry and all subsequent list entries into a new <c>List</c>.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListEntry.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ListEntry&quot;]/Member[@signature=&quot;ListEntry.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListEntry.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ListEntry&quot;]/Member[@signature=&quot;ListEntry.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListEntry.LevelNum">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> representing the indent level for this list entry.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return LevelNum
          int levelNum = entry.LevelNum;

          //--- Set LevelNum to 4th level
          entry.LevelNum = 3;
        </code>
            <br/>
            <code>

          '--- Return LevelNum
          Dim levelNum As Integer = entry.LevelNum

          '--- Set LevelNum to 4th level
          entry.LevelNum = 3
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListEntry.BulletText">
            <Doc>
        <summary>
          <para>Sets or returns a <c>String</c> representing the bullet text of this entry as it would show up if it was opened in Word.</para>
        </summary>
        <example>
          <para>
            <code>

          string bulletText = entry.BulletText;
        </code>
            <br/>
            <code>

          Dim bulletText As String = entry.BulletText
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up
            character runs if they span special characters like end of table cell markers or end of
            paragraph markers. This method skips the end of paragraph character marker.
            </remarks>
            <param name="startIndex">The index in the document of the first character to include
            </param>
            <param name="endIndex">The index in the document of the first character not to include
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.pushbackText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.adjustForParagraphInsert(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.adjustForSectionInsert(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.type">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.isTableRowEnd">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.getLeftIndentInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.setTableRowEnd(SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl,System.Boolean)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.setTableRowEnd(System.SByte,System.Boolean)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.addSprmsFromParagraphStyle(SoftArtisans.OfficeWriter.WordWriter.StyleSheet,SoftArtisans.OfficeWriter.WordWriter.StyleSheet,System.Int16)">
            <summary>
            This function find the difference between fromStyle and toStyle. Whatever is in fromStyle which isn't in toStyle
            is applied to _papx as sprms
            
            </summary>
            <param name="toStyle"></param>
            <param name="fromStyle"></param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.StyleIndex">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.InTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.TableLevel">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.EmbeddedCellMark">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.SideBySide">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.RightIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.LeftIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.FirstLineIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.Vertical">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.Backward">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.TopBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.LeftBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.BottomBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.RightBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.BarBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.FrameTextFlow">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphModel.BetweenBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListEntryModel.calculateLevelNum(System.Int32)">
            <param name="startAt">
            </param>
            <returns>
            
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListEntryModel.ListID">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ListLevel">
            <Doc>
      <summary>
        <para>This class is used to manipulate settings for a particular indent level. Things such as number and bullet text and indent change with each indent level in Word.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ListLevel"/> object using the <c>new</c> keyword. To get an instance of the <c>ListLevel</c> class, use the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.List.GetLevel(System.Int32)"/> method of the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/> class, passing it the index of the level you want to retrieve.</para>
        <para>To get an existing list entry, use the <c>getEntry()</c> method of the <c>List</c> class. <c>getEntry</c> accepts a parameter that represents the index of the entry to retrieve.</para>
        <para>The following sample demonstrates how to get a <c>ListLevel</c> object for level 2 of a list.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Get the second level settings of a list
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          List lst = doc.Lists[0];
          ListEntry entry = lst.GetLevel(2);
        </code>
          <br/>
          <code>

          '--- Get the second level settings of a list
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim lst As List = doc.Lists(0)
          Dim level As ListLevel = lst.GetLevel(2)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevel.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ListLevel&quot;]/Member[@signature=&quot;ListLevel.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevel.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ListLevel&quot;]/Member[@signature=&quot;ListLevel.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevel.BulletText">
            <Doc>
        <summary>
          <para>Sets the bullet text that will be displayed at the current list level. It uses a pattern. If the text is ASCII codes 0-8, this represents the position of the list entry number for a particular level. A list is at a maximum nine levels deep. For example, in an outline you will have numbering that changes with the level such as 1.1, 1.1.2, and so on.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Set the 3rd list level to 1.2
          level.BulletText = "\u0000.\u0001.\u0002";
        </code>
            <br/>
            <code>

          '--- Set the 3rd list level to 1.2
          level.BulletText = "\u0000.\u0001.\u0002"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevel.NumberFormat">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat"/> object that represents the format for list numbers for this list level.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return NumberFormat
          WordNumberFormat numberFormat = level.NumberFormat;

          //--- Set NumberFormat
          level.NumberFormat = WordNumberFormat.Ordinal;
        </code>
            <br/>
            <code>

          '--- Return NumberFormat
          Dim numberFormat As WordNumberFormat = level.NumberFormat

          '--- Set NumberFormat
          level.NumberFormat = WordNumberFormat.Ordinal
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevel.NumberIndent">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the indent for the first line of the entry in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return NumberIndent
          int numberIndent = level.NumberIndent;

          //--- Set NumberIndent to 1/2 inch
          level.NumberIndent = 720;
        </code>
            <br/>
            <code>

          '--- Return NumberIndent
          Dim numberIndent As Integer = level.NumberIndent

          '--- Set NumberIndent to 1/2 inch
          level.NumberIndent = 720
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevel.Indent">
            <Doc>
        <summary>Sets or returns an <c>int</c> that represents the indentation for the body of the entry, in twips. </summary>
        <remarks>
          <para>One twip = 1/20 pt = 1/1440 in. <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ListLevel.Indent"/> is equivalent to Microsoft Word's "Text position" setting.  WordWriter's default <c>Indent</c> value for the first list level is 0. By default, WordWriter increments the indentation of lower levels by 0.5''.</para>
          <para>To change Word's "Text Position" setting:</para>
          <list type="number">
            <item>
              <description>Highlight your list.</description>
            </item>
            <item>
              <description>Open the Format menu and select Bullets and Numbering.</description>
            </item>
            <item>
              <description>Select a list style and click Customize.</description>
            </item>
          </list>
          <para>Indent is a read / write property.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Indent
          int indent = level.Indent;

          //--- Set Indent to 1 inch
          level.Indent = 1440;
        </code>
            <br/>
            <code>

          '--- Return Indent
          Dim indent As Integer = level.Indent

          '--- Set Indent to 1 inch
          level.Indent = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.getBulletText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.Equals(System.Object)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.toByteArray">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.setNumberFormatInternal(SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat)">
            <param name="nfc">
            </param>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.getNumberFormatInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.StartAt">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.NumberFormatCode">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.Alignment">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.NumberProperties">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.LevelProperties">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.SizeInBytes">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.IndentInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ListLevelOnFile.Interface">
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ListManagedBlock">
            <summary> An interface for blocks managed by a list that works with a
            BlockAllocationTable to keep block sequences straight
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ListManagedBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="!:IOException"> if there is no data
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListModel.insertEntryInternal(System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ListTables">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ListTables.addList(SoftArtisans.OfficeWriter.WordWriter.ListData,SoftArtisans.OfficeWriter.WordWriter.ListFormatOverride)">
            <param name="lst">
            </param>
            <param name="override">
            </param>
            <returns> The override index.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndian">
            <summary>  a utility class for handling little-endian numbers, which the 80x86 world is
            replete with. The methods are all static, and input/output is from/to byte
            arrays, or from InputStreams.
            
            </summary>
            <author>      Marc Johnson (mjohnson at apache dot org)
            </author>
            <author>      Andrew Oliver (acoliver at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.#ctor">
            <summary>  Constructor for the LittleEndian object</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShort(System.SByte[],System.Int32)">
            <summary>  get a short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the short (16-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.GetShort(System.SByte[],System.Int32@)">
            <summary>
            Gets a short from the data at the given offset and updates the offset to be the next
            byte.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.SByte[],System.Int32)">
            <summary>  get an unsigned short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned short (16-bit) value in an integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.Byte[],System.Int32)">
            <summary>  get an unsigned short value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned short (16-bit) value in an integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getSimpleShortArray(System.SByte[],System.Int32,System.Int32)">
            <summary>  get a short array from a byte array.
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The simpleShortArray value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShortArray(System.SByte[],System.Int32)">
            <summary>  get a short array from a byte array. The short array is assumed to start
            with a word describing the length of the array.
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <returns>         The shortArray value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getShort(System.SByte[])">
            <summary>  get a short value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the short (16-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUShort(System.SByte[])">
            <summary>  get an unsigned short value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the unsigned short (16-bit) value in an int
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getInt(System.SByte[],System.Int32)">
            <summary>  get an int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the int (32-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.GetInt(System.SByte[],System.Int32@)">
            <summary>
            Gets an integer from the data at the given offset and updates the offset to be the next
            byte.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getInt(System.SByte[])">
            <summary>  get an int value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the int (32-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUInt(System.SByte[],System.Int32)">
            <summary>  get an unsigned int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the unsigned int (32-bit) value in a long
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUInt(System.SByte[])">
            <summary>  get an unsigned int value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <returns>         the unsigned int (32-bit) value in a long
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getLong(System.SByte[],System.Int32)">
            <summary>  get a long value from a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the long (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getLong(System.SByte[])">
            <summary>  get a long value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the long (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getDouble(System.SByte[],System.Int32)">
            <summary>  get a double value from a byte array, reads it in little endian format
            then converts the resulting revolting IEEE 754 (curse them) floating
            point number to a happy java double
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <returns>         the double (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getDouble(System.SByte[])">
            <summary>  get a double value from the beginning of a byte array
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the double (64-bit) value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.SByte[],System.Int32,System.Int16)">
            <summary>  put a short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int32,System.Int16)">
            <summary>  put a short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int32,System.UInt16)">
            <summary>  put an unsigned short value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShortArray(System.SByte[],System.Int32,System.Int16[])">
            <summary>  put a array of shorts into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the short array
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putUShort(System.SByte[],System.Int32,System.Int32)">
            <summary> put an unsigned short value into a byte array
            
            </summary>
            <param name="data">the byte array
            </param>
            <param name="offset">a starting offset into the byte array
            </param>
            <param name="value">the short (16-bit) value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> may be thrown
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putUShort(System.Byte[],System.Int32,System.Int32)">
            <summary> put an unsigned short value into a byte array
            
            </summary>
            <param name="data">the byte array
            </param>
            <param name="offset">a starting offset into the byte array
            </param>
            <param name="value">the short (16-bit) value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> may be thrown
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.SByte[],System.Int16)">
            <summary>  put a short value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putShort(System.Byte[],System.Int16)">
            <summary>  put a short value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the short (16-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.SByte[],System.Int32,System.Int32)">
            <summary>  put an int value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.Byte[],System.Int32,System.Int32)">
            <summary>  put an int value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.SByte[],System.Int32)">
            <summary>  put an int value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putInt(System.Byte[],System.Int32)">
            <summary>  put an int value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the int (32-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putLong(System.SByte[],System.Int32,System.Int64)">
            <summary>  put a long value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the long (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putLong(System.SByte[],System.Int64)">
            <summary>  put a long value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the long (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putDouble(System.SByte[],System.Int32,System.Double)">
            <summary>  put a double value into a byte array
            
            </summary>
            <param name="data">   the byte array
            </param>
            <param name="offset"> a starting offset into the byte array
            </param>
            <param name="value">  the double (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putDouble(System.SByte[],System.Double)">
            <summary>  put a double value into beginning of a byte array
            
            </summary>
            <param name="data">  the byte array
            </param>
            <param name="value"> the double (64-bit) value
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readShort(System.IO.Stream)">
            <summary>  get a short value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the short
            is to be read
            </param>
            <returns>                              the short (16-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readInt(System.IO.Stream)">
            <summary>  get an int value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the int is
            to be read
            </param>
            <returns>                              the int (32-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readLong(System.IO.Stream)">
            <summary>  get a long value from an InputStream
            
            </summary>
            <param name="stream">                      the InputStream from which the long
            is to be read
            </param>
            <returns>                              the long (64-bit) value
            </returns>
            <exception cref="!:"> IOException              will be propagated back to the caller
            </exception>
            <exception cref="!:"> BufferUnderrunException  if the stream cannot provide enough
            bytes
            </exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.LittleEndian.readFromStream(System.IO.Stream,System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getNumber(System.SByte[],System.Int32,System.Int32)">
            <summary>  Gets the number attribute of the LittleEndian class
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The number value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>  Gets the number attribute of the LittleEndian class
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
            <returns>         The number value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putNumber(System.SByte[],System.Int32,System.Int64,System.Int32)">
            <summary>  Description of the Method
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="value">  Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.putNumber(System.Byte[],System.Int32,System.Int64,System.Int32)">
            <summary>  Description of the Method
            
            </summary>
            <param name="data">   Description of the Parameter
            </param>
            <param name="offset"> Description of the Parameter
            </param>
            <param name="value">  Description of the Parameter
            </param>
            <param name="size">   Description of the Parameter
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.ubyteToInt(System.SByte)">
            <summary>  Convert an 'unsigned' byte to an integer. ie, don't carry across the
            sign.
            
            </summary>
            <param name="b"> Description of the Parameter
            </param>
            <returns>    Description of the Return Value
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUnsignedByte(System.SByte[],System.Int32)">
            <summary>  get the unsigned value of a byte.
            
            </summary>
            <param name="data">   the byte array.
            </param>
            <param name="offset"> a starting offset into the byte array.
            </param>
            <returns>         the unsigned value of the byte as a 32 bit integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getUnsignedByte(System.SByte[])">
            <summary>  get the unsigned value of a byte.
            
            </summary>
            <param name="data"> the byte array
            </param>
            <returns>       the unsigned value of the byte as a 32 bit integer
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.getByteArray(System.SByte[],System.Int32,System.Int32)">
            <summary>  Copy a portion of a byte array
            
            </summary>
            <param name="data">                       the original byte array
            </param>
            <param name="offset">                     Where to start copying from.
            </param>
            <param name="size">                       Number of bytes to copy.
            </param>
            <returns>                             The byteArray value
            </returns>
            <throws>   IndexOutOfBoundsException  - if copying would cause access of </throws>
            <summary>      data outside array bounds.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndian.BufferUnderrunException">
            <summary>  Exception to handle buffer underruns
            
            </summary>
            <author>      Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndian.BufferUnderrunException.#ctor">
            <summary>  simple constructor</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper">
            <summary> <p>Title: LittleEndianHelper.java</p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Geoff Krapf
            </author>
            <version>  1.0, Oct 1, 2002
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShort(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit short integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShort(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit short integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readChar(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit character from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readChar(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit character from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readInt(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readInt(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readLong(System.SByte[],System.Int32)">
            <summary> Read a little endian 64-bit long integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readLong(System.Byte[],System.Int32)">
            <summary> Read a little endian 64-bit long integer from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFloat(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFloat(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readDouble(System.SByte[],System.Int32)">
            <summary> Read a little endian 64-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readDouble(System.Byte[],System.Int32)">
            <summary> Read a little endian 64-bit floating point variable from a byte array.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readByteU(System.SByte[],System.Int32)">
            <summary> Read a little endian 8-bit unsigned byte from a byte array and return it as a Java short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readByteU(System.Byte[],System.Int32)">
            <summary> Read a little endian 8-bit unsigned byte from a byte array and return it as a Java short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShortU(System.SByte[],System.Int32)">
            <summary> Read a little endian 16-bit unsigned short from a byte array and return it as a Java int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readShortU(System.Byte[],System.Int32)">
            <summary> Read a little endian 16-bit unsigned short from a byte array and return it as a Java int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readIntU(System.SByte[],System.Int32)">
            <summary> Read a little endian 32-bit unsigned integer from a byte array and return it as a Java long..</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readIntU(System.Byte[],System.Int32)">
            <summary> Read a little endian 32-bit unsigned integer from a byte array and return it as a Java long..</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32(System.SByte[],System.Int32)">
            <summary> Read a signed, 32bit fixed point number (high word is integer, low word
            is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32(System.Byte[],System.Int32)">
            <summary> Read a signed, 32bit fixed point number (high word is integer, low word
            is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32U(System.SByte[],System.Int32)">
            <summary> Read an unsigned, 32bit fixed point number (high word is integer, low 
            word is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.readFixed32U(System.Byte[],System.Int32)">
            <summary> Read an unsigned, 32bit fixed point number (high word is integer, low 
            word is fraction)
            </summary>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <returns>
            </returns>
            <throws>  ArrayIndexOutOfBoundsException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShort(System.Int16,System.SByte[],System.Int32)">
            <summary> Write a big endian 16-bit short to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShort(System.Int16,System.Byte[],System.Int32)">
            <summary> Write a big endian 16-bit short to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeInt(System.Int32,System.SByte[],System.Int32)">
            <summary> Write a big endian 32-bit int to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeInt(System.Int32,System.Byte[],System.Int32)">
            <summary> Write a big endian 32-bit int to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeLong(System.Int64,System.SByte[],System.Int32)">
            <summary> Write a big endian 64-bit long to a byte array as a little endian 64-bit long.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeLong(System.Int64,System.Byte[],System.Int32)">
            <summary> Write a big endian 64-bit long to a byte array as a little endian 64-bit long.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFloat(System.Single,System.SByte[],System.Int32)">
            <summary> Write a big endian 32-bit float to a byte array as a little endian 32-bit float.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFloat(System.Single,System.Byte[],System.Int32)">
            <summary> Write a big endian 32-bit float to a byte array as a little endian 32-bit float.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeDouble(System.Double,System.SByte[],System.Int32)">
            <summary> Write a big endian 64-bit double to a byte array as a little endian 64-bit double.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeDouble(System.Double,System.Byte[],System.Int32)">
            <summary> Write a big endian 64-bit double to a byte array as a little endian 64-bit double.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeByteU(System.Int16,System.SByte[],System.Int32)">
            <summary> Writes a short with a max value of (Byte.MAX_VALUE*2 + 1) to a byte array as a little endian 8-bit byte.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeByteU(System.Int16,System.Byte[],System.Int32)">
            <summary> Writes a short with a max value of (Byte.MAX_VALUE*2 + 1) to a byte array as a little endian 8-bit byte.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShortU(System.Int32,System.SByte[],System.Int32)">
            <summary> Writes an int with a max value of (Short.MAX_VALUE*2 + 1) to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeShortU(System.Int32,System.Byte[],System.Int32)">
            <summary> Writes an int with a max value of (Short.MAX_VALUE*2 + 1) to a byte array as a little endian 16-bit short.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeIntU(System.Int64,System.SByte[],System.Int32)">
            <summary> Writes a long with a max value of (Integer.MAX_VALUE*2 + 1) to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeIntU(System.Int64,System.Byte[],System.Int32)">
            <summary> Writes a long with a max value of (Integer.MAX_VALUE*2 + 1) to a byte array as a little endian 32-bit int.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32(System.Double,System.SByte[],System.Int32)">
            <summary> Write a signed fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32(System.Double,System.Byte[],System.Int32)">
            <summary> Write a signed fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32U(System.Double,System.SByte[],System.Int32)">
            <summary> Write an unsigned fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LittleEndianHelper.writeFixed32U(System.Double,System.Byte[],System.Int32)">
            <summary> Write an unsigned fixed-point 32 bit number (high word is int, 
            low word is fraction)
            </summary>
            <param name="aVal">
            </param>
            <param name="aBuff">
            </param>
            <param name="aOff">
            </param>
            <throws>  ArrayIndexOutOfBoundsException </throws>
            <throws>  IOException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.LongField">
            <summary> representation of a long (16-bit) field at a fixed location within
            a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32)">
            <summary> construct the LongField with its offset into its containing
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.Int64)">
            <summary> construct the LongField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the LongField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.#ctor(System.Int32,System.Int64,System.SByte[])">
            <summary> construct the LongField with its offset into its containing
            byte array, initialize its value, and write the value to a byte
            array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="T:System.IO.IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.LongField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MarkerData">
            <summary>
            Contains the output cell value. Style information is not included here because
            when it is needed it's just taken from the marker cell style
            
            This class should be as lightweight as possible
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.MarkerData.Value">
            <summary>
            This is null if and only if Type is None
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.MarkerWritingData.GetColumnName">
            <summary>
            This will only be called if we have the fieldName modifier, in which case, we set the
            value of the <see cref="T:SoftArtisans.OfficeWriter.Shared.MarkerData"/> to be the fieldname, so we can just call 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.MarkerWritingData.GetString"/> here.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.MaxBinding">
            <summary>
            A Binding to the DataRows for getting the max value over a repeat block
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxDrawingId">
            <summary>
            A simple class for maintaining the max image id and then maintaining it while writing out
            new images.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId.#ctor(System.Collections.IEnumerable,System.Text.RegularExpressions.Regex)">
            <summary>
            Looks through the zip file and get the max id for the given target regular expression.
            </summary>
            <param name="zipEntries">A list of all the zip entries in the docx file.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId.#ctor(System.Xml.XmlDocument)">
            <summary>
            Creates a new max id for representing the relationship ids.
            </summary>
            <param name="relationships"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId.ImageMaxId(System.Collections.IEnumerable)">
            <summary>
            Max id for zip entries matching word/media/image{id}.*
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId.ExternDocMaxId(System.Collections.IEnumerable)">
            <summary>
            Max id for zip entries matching word/altChunk{id}.rtf
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId.Increment">
            <summary>
            Increments the max image Id.
            </summary>
            <returns>A handle to this so that incrementing can just be embedded in other statements.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MD5">
            <summary>
            TODO: figure out how to use the built-in MD5 class
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.MergeField">
            <Doc>
      <summary>
        <para>This class represents a merge field in a document. Merge fields are used in WordWriter templates as data placeholders.</para>
      </summary>
      <remarks>
        <para>To create a merge field, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertMergeFieldBefore(System.String,System.String)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertMergeFieldAfter(System.String,System.String)"/>.</para>
        <para>The following sample demonstrates creating a merge field at the end of a new document and retrieving the first merge field of an existing document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Insert a merge field at the end of a new document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          MergeField mfield = doc.InsertMergeFieldAfter("FieldName", "FieldName");

          //--- Get the first merge field of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          MergeField firstMergeField = doc.GetElements(Element.Type.MergeField)[0];
        </code>
          <br/>
          <code>

          '--- Insert a merge field at the end of a new document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim mfield As Field = doc.InsertMergeFieldAfter("FieldName", "FieldName")

          '--- Get the first merge field of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim firstMergeField As MergeField = doc.GetElements(Element.Type.MergeField)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MergeField.GetFieldName">
            <Doc>
        <summary>
          <para>Returns the merge field's name.</para>
        </summary>
        <returns>
          <para>The name assigned to the merge field.</para>
        </returns>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MergeField.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;MergeField&quot;]/Member[@signature=&quot;MergeField.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MergeField.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;MergeField&quot;]/Member[@signature=&quot;MergeField.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.MergeFieldModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.MergeFieldModel.#ctor(SoftArtisans.OfficeWriter.WordWriter.WWDocument,SoftArtisans.OfficeWriter.WordWriter.ElementModel,SoftArtisans.OfficeWriter.WordWriter.FieldDescriptorGroup,System.Int32)">
            <summary>
            Creates a new merge field model from a word document
            </summary>
            <param name="document">the document containing this merge field</param>
            <param name="parent">the elemente containing this merge field</param>
            <param name="group">the field descriptor group describing this merge field</param>
            <param name="subDocStartCp">the character position of the start of the sub document
            containing this merge field. Since the character positions for groups are relative
            to the sub document, this is necessary to give the merge field the correct character
            positions</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser">
            <summary>
            Class for maintaining all the information from the merge field name.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.useFieldName">
            <summary>
            When true, the field name is displayed rather than the contents of the field
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.#ctor(System.String,System.Char,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new parser for handling merge field names
            </summary>
            <param name="unparsedName">The name of the merge field (note that this includes our modifiers)</param>
            <param name="separatorCharacter">The chararcter used to separate data source from column</param>
            <todo>Add more useful exceptions, like datasource  name is invalid; column name is
            invalid, too many separators...</todo>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.UseFieldName">
            <summary>
            When true, the field name is displayed rather than the contents of the field
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ImageHeight">
            <summary>
            The specified image height for this field
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.IsImage"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ImageWidth"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ImageWidth">
            <summary>
            The specified image Width for this field
            </summary>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.IsImage"/>
            <seealso cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ImageHeight"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.IsImage">
            <summary>
            Whether or not this field should be replaced with an image.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.IsExternalDoc">
            <summary>
            Whether or not this field should be replaced with an external document.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.MinBinding">
            <summary>
            A Binding to the DataRows for getting the min value over a repeat block
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.MiscUtils">
            <summary>
            A simple static class to put simple utility methods for production code
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.MiscUtils.Clamp``1(``0,``0,``0)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.MiscUtils.FindFirstNotIn(System.String,System.String)">
            <summary> Utility method: find index of first character in str1,
            which is *not* present in str2.
            returns -1 if all characters in str1 are in the list.
            Special case for str1 == null: return -1.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> class represents a named style, such as "Normal", "Heading 1", etc., that is embedded in a Word document.</para>
      </summary>
      <remarks>
        <para>You cannot create a new named style programmatically. You can only work with Named Styles that are in an existing document. You can obtain an instance of this class from the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Styles"/> collection. You can apply a style to different sections and elements within your document. You cannot, however, modify a named style using WordWriter.</para>
        <para>The following sample retrieves a copy of the Heading 1 style and applies it to a new paragraph.</para>
      </remarks>
      <example>
        <para>
          <code>

          NamedStyle heading1Style = doc.Styles[NamedStyle.BuiltIn.Heading1];
          Paragraph p = doc.InsertParagraphAfter(heading1Style);
        </code>
          <br/>
          <code>

          Dim heading1Style As NamedStyle = doc.Styles(NamedStyle.BuiltIn.Heading1)
          Dim p As Paragraph = doc.InsertParagraphAfter(heading1Style)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Name">
            <Doc>
        <summary>
          <para>Returns a <c>String</c> representing the name of this NamedStyle.</para>
        </summary>
        <example>
          <para>
            <code>

          string name = namedStyl.Name;
        </code>
            <br/>
            <code>

          Dim name As String = namedStyl.Name
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltInStyleName">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn"/> object that represents the culture-independent name of this style. This is only useful for built-in styles that come with Word. Any custom styles will return http://wiki.softartisans.com/display/WW8/NamedStyle.BuiltIn#UserDefined.</para>
        </summary>
        <example>
          <para>
            <code>

          NamedStyle.BuiltIn builtInStyle = namedStyl.BuiltInStyleName;
        </code>
            <br/>
            <code>

          Dim builtInStyle As NamedStyle.BuiltIn = namedStyl.BuiltInStyleName
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.ParagraphFormatting">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.ParagraphFormatting"/> object that is a copy of this style's paragraph formatting. Some style types do not have paragraph formatting. In these cases, this method returns null.</para>
        </summary>
        <example>
          <para>
            <code>

          ParagraphFormatting pFormatting = namedStyl.ParagraphFormatting;
        </code>
            <br/>
            <code>

          Dim pFormatting As ParagraphFormatting = namedStyl.ParagraphFormatting
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Font">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Font"/> object that is a copy of this style's font. Some style types do not have character formatting. In these cases, this method returns null.</para>
        </summary>
        <example>
          <para>
            <code>

          Font fnt = namedStyl.Font;
        </code>
            <br/>
            <code>

          Dim fnt As Font = namedStyl.Font
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.TableFormatting">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.TableFormatting"/> object that is a copy of this style's table formatting. Some style types do not have table formatting. In these cases, this method returns null.</para>
        </summary>
        <example>
          <para>
            <code>

          TableFormatting tFormatting = namedStyl.TableFormatting;
        </code>
            <br/>
            <code>

          Dim tFormatting As TableFormatting = namedStyl.TableFormatting
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.StyleType">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type"/> object that represents the type of this style. Word 2003 supports four style types: Character, Paragraph, Table, and List. Older versions support fewer than this.</para>
        </summary>
        <example>
          <para>
            <code>

          NamedStyle.Type nsType = namedStyl.Type;
        </code>
            <br/>
            <code>

          Dim nsType As NamedStyle.Type = namedStyl.Type
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn">
            <Doc>
        <summary>
          <para>Named styles that are built-in to Word.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Acetate">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.AnnotationReference">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.AnnotationSubject">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.AnnotationText">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.AutoSignature">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BlockQuote">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyText">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyText2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyText3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyTextFirstIndent">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyTextFirstIndent2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyTextIndent2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyTextIndent3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.BodyTextIndented">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Caption">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Closing">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Date">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Emphasis">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.EndnoteReference">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.EndnoteText">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.EnvelopeAddress">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.EvelopeReturn">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Footer">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.FootnoteReference">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.FootnoteText">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.FormBottom">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.FormTop">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Header">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading1">
            <Doc>
          <summary>Font: Arial, 16 pt, bold, space before: 12 pt, space after: 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading2">
            <Doc>
          <summary>Font: Arial 14 pt, bold, italic, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading3">
            <Doc>
          <summary>Font: Arial 13 pt, bold, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading4">
            <Doc>
          <summary>Font: Times New Roman, 14 pt, bold, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading5">
            <Doc>
          <summary>Font: Times New Roman, 13 pt, bold, italic, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading6">
            <Doc>
          <summary>Font: Times New Roman, 11 pt, bold, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading7">
            <Doc>
          <summary>Font: Times New Roman, 12 pt, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading8">
            <Doc>
          <summary>Font: Times New Roman, 12 pt, italic, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Heading9">
            <Doc>
          <summary>Font: Arial, 11 pt, space before 12 pt, space after 3 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlAcronym">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlAddress">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlCite">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlCode">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlDefinition">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlKeyboard">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlNormal">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlPreformatted">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlSample">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlTypewriter">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HtmlVariable">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Hyperlink">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.HyperlinkFollowed">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index1">
            <Doc>
          <summary>Index level 1</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index2">
            <Doc>
          <summary>Index level 2</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index3">
            <Doc>
          <summary>Index level 3</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index4">
            <Doc>
          <summary>Index level 4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index5">
            <Doc>
          <summary>Index level 5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index6">
            <Doc>
          <summary>Index level 6</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index7">
            <Doc>
          <summary>Index level 7</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index8">
            <Doc>
          <summary>Index level 8</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Index9">
            <Doc>
          <summary>Index level 9</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.IndexHeading">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.LineNumber">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.List">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.List2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.List3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.List4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.List5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListBullet">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListBullet2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListBullet3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListBullet4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListBullet5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListContinue">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListContinue2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListContinue3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListContinue4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListContinue5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListNumber">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListNumber2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListNumber3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListNumber4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ListNumber5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Macro">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.MessageHeader">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NavPane">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Normal">
            <Doc>
          <summary>Font: Times New Roman, 12 pt</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NormalChar">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NormalIndent">
            <Doc>
          <summary>Indent 0.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NormalList">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NormalTable">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.NoteHeading">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.OutlineList1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.OutlineList2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.OutlineList3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.PageNumber">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.PlainText">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Salutation">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Signature">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Strong">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Subtitle">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Table3dFx1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Table3dFx2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Table3dFx3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableClassic1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableClassic2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableClassic3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableClassic4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColorful1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColorful2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColorful3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColumns1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColumns2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColumns3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColumns4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableColumns5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableContemporary">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableElegant">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid6">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid7">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableGrid8">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList4">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList5">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList6">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList7">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableList8">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableProfessional">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableSimple1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableSimple2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableSimple3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableSubtle1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableSubtle2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableTheme">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableWeb1">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableWeb2">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TableWeb3">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Title">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TOA">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.TOAHeading">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc1">
            <Doc>
          <summary>Table of contents level 1</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc2">
            <Doc>
          <summary>Table of contents level 2</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc3">
            <Doc>
          <summary>Table of contents level 3</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc4">
            <Doc>
          <summary>Table of contents level 4</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc5">
            <Doc>
          <summary>Table of contents level 5</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc6">
            <Doc>
          <summary>Table of contents level 6</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc7">
            <Doc>
          <summary>Table of contents level 7</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc8">
            <Doc>
          <summary>Table of contents level 8</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Toc9">
            <Doc>
          <summary>Table of contents level 9</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ToCaption">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.UserDefined">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn&quot;]/Member[@signature=&quot;NamedStyle.BuiltIn.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type">
            <Doc>
        <summary>
          <para>Types of named styles.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.Character">
            <Doc>
          <summary>Character style can contain character formatting only, including font, font size, font style, and font effects (such as small caps or superscript). Character styles can be applied on top of paragraph styles, which means you can use a character style to override the format of a selected portion of a paragraph.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.List">
            <Doc>
          <summary>A list style contains paragraph number or bullet formatting for up to nine levels of an outline. All nine levels of formatting are contained in one style.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.Paragraph">
            <Doc>
          <summary>A paragraph style can contain any kind of paragraph formatting (such as paragraph alignment and indents) and any character formatting that you apply to an entire paragraph  (such as font or font size).</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.Table">
            <Doc>
          <summary>Table styles can contain certain elements of table, paragraph, and font formatting. You can apply formatting such as font, borders, shading, and paragraph spacing to the heading row as well as the body rows of a table, and the formatting will automatically adjust to accommodate changes in your table structure.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Type&quot;]/Member[@signature=&quot;NamedStyle.Type.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Type&quot;]/Member[@signature=&quot;NamedStyle.Type.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Type&quot;]/Member[@signature=&quot;NamedStyle.Type.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Type&quot;]/Member[@signature=&quot;NamedStyle.Type.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.Type.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;NamedStyle&quot;]/Member[@signature=&quot;NamedStyle.Type&quot;]/Member[@signature=&quot;NamedStyle.Type.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyleModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyleModel.TrueIndex">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Navigator">
            <summary>
            The main bulk of this class was moved to FragmentedMemoryStream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.#ctor(System.IO.Stream,System.Int32)">
            <summary> Create a Navigator over an InputStream, using aDefaultBufferSize as the
            default size for buffers.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.ReadByte">
            <summary> Read a single byte from the stream. This is equivalent to invoking
            read(byte[0] b,0,1);
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.Read(System.SByte[])">
            <summary> Fill a byte array with up to aBuffer.length bytes from the stream. This
            method is equivelent to calling read(aBuffer, aBuffer.length, 0);
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.Replace(System.SByte[],System.Int32)">
            <summary> Inserts a number of bytes into a stream, overwriting aSizeToReplace
            existing bytes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Navigator.available">
            <summary> Returns the number of bytes left from the current position.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NearEnumerator`1">
            <summary>
            Provides an iterator which has pointers to the previous and next elements as well as the current
            
            NOTE: values of Previous, Current, and Next are undefined for when that value doesn't make sense
            ie, Previous at the beginning, Next at the end, are probably null but may be anything.
            Note that sometimes null is a legit value, and it shouldn't be used to determine EOF
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NextFieldMarker">
            <summary>A type representing a NEXT field in a docfile. 
            s/b created along with MergeField field types.
            The main task is to shift the input DataSource by one 
            row when processing the document.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Node">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.NonComparableEmbeddedDocument">
            <summary>
            This class represents an embedded document field, or its output.
            Because we don't parse these documents, but word does, they're
            considered Non-Comparable and throw an exception when you try
            to compare them
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream">
            <summary>
            This is a stream whose store is non-contiguous memory
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set a new position in the stream
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.SetLength(System.Int64)">
            <summary>
            SetLength is not supported because there's no reason to let someone increase the size of this object
            without filling it with data.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.EnsureCapacity(System.Int64)">
            <summary>
            Make sure there are capacity bytes available to write to
            </summary>
            <param name="capacity">The number of bytes to extend the storage to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.WriteTo(System.IO.Stream)">
            <summary>
            Write all contained data to a stream
            
            NOTE: starts from beginning, even if position isn't at beginning
            </summary>
            <param name="stream">the stream to write the data to</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.NonContiguousMemoryStream.Position">
            <summary>
            Position is the offset in the stream, as if it were a contiguous byte array
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NonRewindableOutputRowsHandler`3">
            <summary>
            Handles the output rows of data sources which aren't rewindable
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3">
            <summary>
            Presents Data sources as enumerable objects over a list of marker data
            </summary>
            <remarks>Rewindable data sources are changed to NonRewindable if there is grouping, 
            this is faster, with a bigger memory footprint, so leave as is.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateOutputRows(SoftArtisans.OfficeWriter.Shared.ICountable{`1})">
            <summary>
            This is an iterator function which returns a IEnumerable that is a list of output cells
            
            Each iteration returns another output row
            
            Somewhat analogous to TemplateReaderBIFF8.processRow()
            </summary>
            <param name="vMarkerRow">the marker row corresponding with the output rows</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OutputRowsHandler`3.CreateCellFromBinding(`1,`0)">
            <summary>
            Returns an OutputCellXML object based on what type of object the output cell should be
            </summary>
            <param name="marker">the field marker info</param>
            <param name="binding"></param>
            <param name="sharedStringTable"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.NullBorder">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NullEscherSerializationListener">
            <summary> Ignores all serialization events.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.NumberConverter">
            <summary>
            Contains a number of methods to convert numbers in the same manner as java.
            </summary>
            <remarks>These methods were grabbed from com.ms.vjsharp.util.Utilities</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.FloatToInt(System.Single)">
            <summary>
            Convert the given float to an int; setting overflows to the max or min int value respectively
            </summary>
            <param name="f">the float to be converted</param>
            <returns>the int value of the given float</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.FloatToLong(System.Single)">
            <summary>
            Convert the given float to an long; setting overflows to the max or min long value respectively
            </summary>
            <param name="f">the float to be converted</param>
            <returns>the long value of the given float</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.DoubleToInt(System.Double)">
            <summary>
            Convert the given double to an int; setting overflows to the max or min int value respectively
            </summary>
            <param name="f">the double to be converted</param>
            <returns>the int value of the given double</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.NumberConverter.DoubleToLong(System.Double)">
            <summary>
            Convert the given double to an long; setting overflows to the max or min long value respectively
            </summary>
            <param name="f">the double to be converted</param>
            <returns>the long value of the given double</returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1._propsByName">
            <summary>
            Index the properties by property/field name
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1._propsByIndex">
            <summary>
            Index the properties by index
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1._fieldsByName">
            <summary>
            Index the fields by property/field name
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1._fieldsByIndex">
            <summary>
            Index the fields by index
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1._indicesByName">
            <summary>
            Index the indices by property/field name (I know, this seems redundantly retarded)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ObjectDataWrapper`1.ColumnCount">
            <summary>
            The number of fields and properties
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper">
            A wrapper that takes a OleDataReader.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.#ctor(System.Data.OleDb.OleDbDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.OleDbDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType">
            <summary> Paragraph Properties.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.getFBackward">
            <summary> Get the fBackward field for the PAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.setFBackward(System.SByte)">
            <summary> Set the fBackward field for the PAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.getFRotateFont">
            <summary> Get the fRotateFont field for the PAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.setFRotateFont(System.SByte)">
            <summary> Set the fRotateFont field for the PAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.setFBackward(System.Boolean)">
            <summary> Sets the fBackward field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.isFBackward">
            <returns>  the fBackward field value.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.setFRotateFont(System.Boolean)">
            <summary> Sets the fRotateFont field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.isFRotateFont">
            <returns>  the fRotateFont field value.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Istd">
            <summary> Get the istd field for the PAP record.</summary>
            <summary> Set the istd field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Jc">
            <summary> Get the jc field for the PAP record.</summary>
            <summary> Set the jc field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FKeep">
            <summary> Get the fKeep field for the PAP record.</summary>
            <summary> Set the fKeep field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FKeepFollow">
            <summary> Get the fKeepFollow field for the PAP record.</summary>
            <summary> Set the fKeepFollow field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FPageBreakBefore">
            <summary> Get the fPageBreakBefore field for the PAP record.</summary>
            <summary> Set the fPageBreakBefore field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FBrLnAbove">
            <summary> Get the fBrLnAbove field for the PAP record.</summary>
            <summary> Set the fBrLnAbove field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FBrLnBelow">
            <summary> Get the fBrLnBelow field for the PAP record.</summary>
            <summary> Set the fBrLnBelow field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FBidi">
            <summary> Get the fBidi field for the PAP record.</summary>
            <summary> Set the fBidi field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.PcVert">
            <summary> Get the pcVert field for the PAP record.</summary>
            <summary> Set the pcVert field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.PcHorz">
            <summary> Get the pcHorz field for the PAP record.</summary>
            <summary> Set the pcHorz field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Brcp">
            <summary> Get the brcp field for the PAP record.</summary>
            <summary> Set the brcp field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Brcl">
            <summary> Get the brcl field for the PAP record.</summary>
            <summary> Set the brcl field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Ilvl">
            <summary> Get the ilvl field for the PAP record.</summary>
            <summary> Set the ilvl field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FNoLnn">
            <summary> Get the fNoLnn field for the PAP record.</summary>
            <summary> Set the fNoLnn field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Ilfo">
            <summary> Get the ilfo field for the PAP record.</summary>
            <summary> Set the ilfo field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FSideBySide">
            <summary> Get the fSideBySide field for the PAP record.</summary>
            <summary> Set the fSideBySide field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FNoAutoHyph">
            <summary> Get the fNoAutoHyph field for the PAP record.</summary>
            <summary> Set the fNoAutoHyph field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FWidowControl">
            <summary> Get the fWidowControl field for the PAP record.</summary>
            <summary> Set the fWidowControl field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaRight">
            <summary> Get the dxaRight field for the PAP record.</summary>
            <summary> Set the dxaRight field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaLeft">
            <summary> Get the dxaLeft field for the PAP record.</summary>
            <summary> Set the dxaLeft field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaLeft1">
            <summary> Get the dxaLeft1 field for the PAP record.</summary>
            <summary> Set the dxaLeft1 field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Lspd">
            <summary> Get the lspd field for the PAP record.</summary>
            <summary> Set the lspd field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DyaBefore">
            <summary> Get the dyaBefore field for the PAP record.</summary>
            <summary> Set the dyaBefore field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DyaAfter">
            <summary> Get the dyaAfter field for the PAP record.</summary>
            <summary> Set the dyaAfter field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Phe">
            <summary> Get the phe field for the PAP record.</summary>
            <summary> Set the phe field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FCrLf">
            <summary> Get the fCrLf field for the PAP record.</summary>
            <summary> Set the fCrLf field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FUsePgsuSettings">
            <summary> Get the fUsePgsuSettings field for the PAP record.</summary>
            <summary> Set the fUsePgsuSettings field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FAdjustRight">
            <summary> Get the fAdjustRight field for the PAP record.</summary>
            <summary> Set the fAdjustRight field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FKinsoku">
            <summary> Get the fKinsoku field for the PAP record.</summary>
            <summary> Set the fKinsoku field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FWordWrap">
            <summary> Get the fWordWrap field for the PAP record.</summary>
            <summary> Set the fWordWrap field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FOverflowPunct">
            <summary> Get the fOverflowPunct field for the PAP record.</summary>
            <summary> Set the fOverflowPunct field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FTopLinePunct">
            <summary> Get the fTopLinePunct field for the PAP record.</summary>
            <summary> Set the fTopLinePunct field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FAutoSpaceDE">
            <summary> Get the fAutoSpaceDE field for the PAP record.</summary>
            <summary> Set the fAutoSpaceDE field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FAutoSpaceDN">
            <summary> Get the fAutoSpaceDN field for the PAP record.</summary>
            <summary> Set the fAutoSpaceDN field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.WAlignFont">
            <summary> Get the wAlignFont field for the PAP record.</summary>
            <summary> Set the wAlignFont field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FontAlign">
            <summary> Get the fontAlign field for the PAP record.</summary>
            <summary> Set the fontAlign field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FInTable">
            <summary> Get the fInTable field for the PAP record.</summary>
            <summary> Set the fInTable field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FTtp">
            <summary> Get the fTtp field for the PAP record.</summary>
            <summary> Set the fTtp field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Wr">
            <summary> Get the wr field for the PAP record.</summary>
            <summary> Set the wr field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FLocked">
            <summary> Get the fLocked field for the PAP record.</summary>
            <summary> Set the fLocked field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Ptap">
            <summary> Get the ptap field for the PAP record.</summary>
            <summary> Set the ptap field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaAbs">
            <summary> Get the dxaAbs field for the PAP record.</summary>
            <summary> Set the dxaAbs field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DyaAbs">
            <summary> Get the dyaAbs field for the PAP record.</summary>
            <summary> Set the dyaAbs field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaWidth">
            <summary> Get the dxaWidth field for the PAP record.</summary>
            <summary> Set the dxaWidth field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcTop">
            <summary> Get the brcTop field for the PAP record.</summary>
            <summary> Set the brcTop field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcLeft">
            <summary> Get the brcLeft field for the PAP record.</summary>
            <summary> Set the brcLeft field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcBottom">
            <summary> Get the brcBottom field for the PAP record.</summary>
            <summary> Set the brcBottom field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcRight">
            <summary> Get the brcRight field for the PAP record.</summary>
            <summary> Set the brcRight field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcBetween">
            <summary> Get the brcBetween field for the PAP record.</summary>
            <summary> Set the brcBetween field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.BrcBar">
            <summary> Get the brcBar field for the PAP record.</summary>
            <summary> Set the brcBar field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxaFromText">
            <summary> Get the dxaFromText field for the PAP record.</summary>
            <summary> Set the dxaFromText field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DyaFromText">
            <summary> Get the dyaFromText field for the PAP record.</summary>
            <summary> Set the dyaFromText field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.WHeightAbs">
            <summary> Get the wHeightAbs field for the PAP record.</summary>
            <summary> Set the wHeightAbs field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Shd">
            <summary> Get the shd field for the PAP record.</summary>
            <summary> Set the shd field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Dcs">
            <summary> Get the dcs field for the PAP record.</summary>
            <summary> Set the dcs field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Lvl">
            <summary> Get the lvl field for the PAP record.</summary>
            <summary> Set the lvl field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FNumRMIns">
            <summary> Get the fNumRMIns field for the PAP record.</summary>
            <summary> Set the fNumRMIns field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Anld">
            <summary> Get the anld field for the PAP record.</summary>
            <summary> Set the anld field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FPropRMark">
            <summary> Get the fPropRMark field for the PAP record.</summary>
            <summary> Set the fPropRMark field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.IbstPropRMark">
            <summary> Get the ibstPropRMark field for the PAP record.</summary>
            <summary> Set the ibstPropRMark field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DttmPropRMark">
            <summary> Get the dttmPropRMark field for the PAP record.</summary>
            <summary> Set the dttmPropRMark field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Numrm">
            <summary> Get the numrm field for the PAP record.</summary>
            <summary> Set the numrm field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.ItbdMac">
            <summary> Get the itbdMac field for the PAP record.</summary>
            <summary> Set the itbdMac field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.RgdxaTab">
            <summary> Get the rgdxaTab field for the PAP record.</summary>
            <summary> Set the rgdxaTab field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Rgtbd">
            <summary> Get the rgtbd field for the PAP record.</summary>
            <summary> Set the rgtbd field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Itap">
            <summary> Get the itap field for the PAP record.</summary>
            <summary> Set the itap field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FTtpEmbedded">
            <summary> Get the fTtpEmbedded field for the PAP record.</summary>
            <summary> Set the fTtpEmbedded field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FInnerTableCell">
            <summary> Get the fInnerTableCell field for the PAP record.</summary>
            <summary> Set the fInnerTableCell field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FNoAllowOverlap">
            <summary> Get the fNoAllowOverlap field for the PAP record.</summary>
            <summary> Set the fNoAllowOverlap field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FContextualSpacing">
            <summary> Get the fContextualSpacing field for the PAP record.</summary>
            <summary> Set the fContextualSpacing field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxcRight">
            <summary> Get the dxcRight field for the PAP record.</summary>
            <summary> Set the dxcRight field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxcLeft">
            <summary> Get the dxcLeft field for the PAP record.</summary>
            <summary> Set the dxcLeft field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DxcLeft1">
            <summary> Get the dxcLeft1 field for the PAP record.</summary>
            <summary> Set the dxcLeft1 field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DylBefore">
            <summary> Get the dylBefore field for the PAP record.</summary>
            <summary> Set the dylBefore field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DylAfter">
            <summary> Get the dylAfter field for the PAP record.</summary>
            <summary> Set the dylAfter field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FDyaBeforeAuto">
            <summary> Get the fDyaBeforeAuto field for the PAP record.</summary>
            <summary> Set the fDyaBeforeAuto field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FDyaAfterAuto">
            <summary> Get the fDyaAfterAuto field for the PAP record.</summary>
            <summary> Set the fDyaAfterAuto field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FHasOldProps">
            <summary> Get the fHasOldProps field for the PAP record.</summary>
            <summary> Set the fHasOldProps field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Ipgp">
            <summary> Get the ipgp field for the PAP record.</summary>
            <summary> Set the ipgp field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Hplcnf">
            <summary> Get the hplcnf field for the PAP record.</summary>
            <summary> Set the hplcnf field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Rsid">
            <summary> Get the rsid field for the PAP record.</summary>
            <summary> Set the rsid field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.IstdList">
            <summary> Get the istdList field for the PAP record.</summary>
            <summary> Set the istdList field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.Rpf">
            <summary> Get the rpf field for the PAP record.</summary>
            <summary> Set the rpf field for the PAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FVertical">
            <returns>  the fVertical field value.
            </returns>
            <summary> Sets the fVertical field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.DyaHeight">
            <returns>  the dyaHeight field value.
            </returns>
            <summary> Sets the dyaHeight field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPAbstractType.FMinHeight">
            <returns>  the fMinHeight field value.
            </returns>
            <summary> Sets the fMinHeight field value.
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PAPBinTable">
            <summary> This class represents the bin table of Word document but it also serves as a
            holder for all of the paragraphs of document that have been loaded into
            memory.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPBinTable.verifyNodes">
            <summary>
            Updates all the nodes so they have the correct start CPs and sorts them by CP.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPBinTable.writeTo(SoftArtisans.OfficeWriter.WordWriter.WWFileSystem,System.Int32,SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter,System.Boolean)">
            <summary>
            Returns the number of PAP blocks that were written to sys
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PAPFormattedDiskPage">
            <summary> Represents a PAP FKP. The style properties for paragraph and character runs
            are stored in fkps. There are PAP fkps for paragraph properties and CHP fkps
            for character run properties. The first part of the fkp for both CHP and PAP
            fkps consists of an array of 4 byte int offsets in the main stream for that
            Paragraph's or Character run's text. The ending offset is the next
            value in the array. For example, if an fkp has X number of Paragraph's
            stored in it then there are (x + 1) 4 byte ints in the beginning array. The
            number X is determined by the last byte in a 512 byte fkp.
            
            CHP and PAP fkps also store the compressed styles(grpprl) that correspond to
            the offsets on the front of the fkp. The offset of the grpprls is determined
            differently for CHP fkps and PAP fkps.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPFormattedDiskPage.#ctor(SoftArtisans.OfficeWriter.WordWriter.FcToCpConverter,System.SByte[],System.SByte[],System.Int32)">
            <summary> Creates a PAPFormattedDiskPage from a 512 byte array
            </summary>
            <remarks>The start FCs of the created PAPXs might point to text that is no longer there,
            thus the cp will later have to be set to the end of the previous paragraph when sorted 
            by CP.</remarks>
            <param name="fkp">a 512 byte array containing the paragraph formatted disk page
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPFormattedDiskPage.getPAPX(System.Int32)">
            <summary> Gets the PAPX at index.</summary>
            <param name="index">The index to get the PAPX for.
            </param>
            <returns> The PAPX at index.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPFormattedDiskPage.getGrpprl(System.Int32)">
            <summary> Gets the papx for the paragraph at index in this fkp.
            
            </summary>
            <param name="index">The index of the papx to get.
            </param>
            <returns> a papx grpprl.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PAPFormattedDiskPage.getParagraphHeight(System.Int32)">
            <summary> Used to get the ParagraphHeight of a PAPX at a particular index.</summary>
            <param name="index">
            </param>
            <returns> The ParagraphHeight
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PAPX">
            <summary> Comment me
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PAPX._tap">
            <summary> TableProperties must stay uncompressed after the first time they are uncompressed because
            of the complexity in using their sprms as a data model.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.PAPX.TableProperties">
            <param name="value">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty">
            <summary>
            An extension of element properties for paragraphs with the added 
            <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.EndsSection"/> property.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.Ended">
            <summary>
            Set to true when the paragraph end tag is read in
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IConsumableParagraph">
            <summary>
            This interface is for the object actually in charge of skipping the paragraph
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IParagraphConsumptionController">
            <summary>
            This interface is for the object that tells the IConsumableParagraph whether to
            be consumed or not.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IParagraphConsumptionController.ResetReplacedWithBlockElement">
            <summary>
            Sets ReplacedWithBlockElement back to it's original value.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IParagraphConsumptionController.WriteEmptyParagraph(System.Xml.XmlWriter)">
            <summary>
            Writes out the empty paragraph needed to ensure there is a block element.
            This must write out a block element!
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphElementProperty.IParagraphConsumptionController.ReplacedWithBlockElement">
            <summary>
            Returns true if the paragraph was replaced with something considered a Block
            Element by TableCell, at least once. (A Table Cell must have a Block Element
            in it, or the document is corrupt).
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.ParagraphFilter">
            <summary>
              This class is for filtering out the paragraph tags and run tags of a consumed paragraph
            </summary>
            <remarks>
              Embedded documents (e.g. rtf) consume the entire paragraph, if there's no other content
              because the AltChunk tag must go at the same level as the paragraph
            </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader">
            <summary>
            The class used for reading in xml during processing. 
            </summary>
            <remarks>This maintains its own path and space context, allowing it to do things like
            copy/skip until goal. </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Creates a new reader from one that already exists
            </summary>
            <param name="baseReader">A new BaseReader</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.#ctor(System.IO.Stream,System.Collections.Generic.Queue{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.IFilter})">
            <summary>
            Creates a new Xml Processing Reader for reading an entire document part from a word file.
            </summary>
            <param name="stream">A stream containing an xml word part.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.#ctor(System.String,System.Collections.Generic.Queue{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.IFilter})">
            <summary>
            Creates a Xml Processing reader prime for testing
            </summary>
            <param name="xml">A piece of xml. This must be complete elements, altohugh more than one
              root element is allowed.</param>
            <param name="filters"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.SkipToUnfiltered">
            <summary>
            Advances the reader to the next unfiltered tag.
            If the current tag is unfiltered, this does not advance teh reader
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.SkipElement">
            <summary>
            Skips the children and end tag of the current node.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.SkipUntilPath(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Skips the reader forward until the given goal
            </summary>
            <remarks>Goals that point to an EndElement are not supported since the only time this is
            used  in the template will be to skip to an empty element, and that's not completely
            trivial.</remarks>
            <param name="goal">The path to the first element that will not be skipped</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment)">
            <summary>
            Copies exactly one tag to a fragment.
            </summary>
            <remarks>This results in the same movement as calling <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.Read"/></remarks>
            <param name="fragment">A destination fragment</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyElement(System.Xml.XmlWriter)">
            <summary>
            Copies the entire contents of the current element to the given writer.
            </summary>
            <param name="writer">The destination Xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyUntilPath(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Copies everything to a writer until it gets to the given goal
            </summary>
            <param name="writer">The destination xml</param>
            <param name="goal">The goal. The contents at this location will not be copied</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyUntilPath(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Copies everything to a fragment until it gets to the given goal
            </summary>
            <param name="fragment">The destination xml</param>
            <param name="goal">The goal. The contents at this location will not be copied</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyRest(System.Xml.XmlWriter)">
            <summary>
            Copies the rest of the contents of this reader to the given writer
            </summary>
            <param name="writer">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyUntilPath(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Copies everything to a fragment until it gets to the given goal
            </summary>
            <param name="goal">The goal. The contents of this location will not be copied</param>
            <returns>A new fragment containing everything from the current location(inclusive) until
            the given goal (exclusive).</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyWhitespace(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment)">
            <summary>
            Copies all unimportant whitespace to the given fragment
            </summary>
            <param name="fragment">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyStartTag">
            <summary>
            Returns just the start tag. Note that this start tag will never be an empty element.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyStartTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment)">
            <summary>
            Copies just the start tag of this element to the given fragment
            </summary>
            <param name="fragment">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyStartTag(System.Xml.XmlWriter)">
            <summary>
            Copies just the start tag of this element to the given writer
            </summary>
            <param name="fragment">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.ReadSubtree">
            <summary>
            Returns an <see cref="T:System.Xml.XmlReader"/> instance that can be used to read the current node and
            all its descendants
            </summary>
            <remarks> <para>ReadSubtree can be called only on element nodes. When the entire sub-tree
            has been read, calls to the Read method returns false. When the new XmlReader has been
            closed, the original XmlReader will be positioned on the EndElement node of the sub-tree.
            Thus, if you called the ReadSubtree method on the start tag of the book element, after
            the sub-tree has been read and the new XmlReader has been closed, the original XmlReader
            is positioned on the end tag of the book element.
            <br/>
            You should not perform any operations on the original XmlReader until the new XmlReader
            has been closed. This action is not supported and can result in unpredictable behavior.
            </para>
            <para>If you want to do path manipulation on the subtree, you should copy the path before
            calling this method</para>
            </remarks>
            <returns>A new <see cref="T:System.Xml.XmlReader"/> instance set to <see cref="F:System.Xml.ReadState.Initial"/>. 
            </returns>
            <seealso cref="M:System.Xml.XmlReader.ReadSubtree"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.SkipUntilGoal">
            <summary>
            Skips the reader forward until the already set goal
            </summary>
            <remarks>Goals that point to an EndElement are not supported since the only time this is
            used  in the template will be to skip to an empty element, and that's not completely
            trivial.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.ReadUntilGoal(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Creates a new reader that will read from this reader until it reaches the specified goal
            </summary>
            <remarks><para>Once the new reader reaches the specified goal, it will no longer read,
            and <see cref="!:EOF"/> will be <c>true</c>. This reader will then continue reading
            starting at the goal.</para>
            <para>Unlike <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.ReadSubtree"/>, <c>Read()</c> does not need to be called, it will
            be right where you left this one. So if you call this method, the only difference is that
            the EOF will happen when the goal is reached not the end of the file. </para>
            <todo>Many of the methods in <c>XmlProcessingReader</c> have not been implemented,
            because  there is no need; check before using any of the *Path methods.</todo>
            <para>DO NOT call any methods on this class until 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReaderUntilGoal.Close"/> has been called. If you do things will
            get seriously screwed up.</para></remarks>
            <param name="goal">The first element that will not be read</param>
            <returns>A wrapper reader that will read from this reader until the end is reached.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyUntilGoal(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment)">
            <summary>
            Copies everything to a fragment until it gets to the already set goal
            </summary>
            <param name="fragment">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.CopyUntilGoal(System.Xml.XmlWriter)">
            <summary>
            Copies everything to a writer until it gets to the already set goal
            </summary>
            <param name="writer">The destination xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.Update(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Updates the value types for the base reader
            </summary>
            <param name="subReader">the reader that this reader used as a wrapper</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.AfterGoal">
            <summary>
            Whether or not the reader is after the set goal.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader.FilterInput">
            <summary>
            return true if the content should be filtered out, otherwise return false
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormat.createFKPTable(System.Int64)">
            <summary>  createFKPTable creates and loads existing FKP record from disk</summary>
            <returns> WordRecordFKP -- a base class
            </returns>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatEntry.BXSize">
            <summary>
            BX for paragraph format entries must have this length.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatEntry.FC">
            (non-Javadoc)
            @see FCNode#setFC(int)
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> class is used to specify formatting that should be applied to a paragraph. It also represents the paragraph formatting of named styles in the document.</para>
      </summary>
      <remarks>
        <para>There are two ways to obtain an instance of this class: Create a new normal paragraph formatting object using the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateParagraphFormatting"/> method or access an existing style's paragraph formatting information using the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.ParagraphFormatting"/> property. The <c>ParagraphFormatting</c> object that is returned can then be used in conjunction with methods in the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> class to create paragraphs with specific formatting.</para>
        <para>The following example demonstrates both ways of getting paragraph formatting, first by retrieving the BodyText style's paragraph formatting from the document, second by retrieving a copy of the BodyText2 style's paragraph formatting. Then, some properties are set and the formatting is applied to a new paragraph.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Get BodyText paragraph formatting from Document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          ParagraphFormatting bodyTextFormatting =
               doc.CreateParagraphFormatting();

          //--- Set some properties
          bodyTextFormatting.PageBreakBefore = true;
          bodyTextFormatting.TextJustification =
               ParagraphFormatting.Justification.Right;

          //--- Apply it to a new paragraph
          doc.InsertParagraphAfter(null, bodyTextFormatting);

          //--- Get paragraph formatting from BodyText2 Style
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          ParagraphFormatting bodyText2Formatting =
               doc.Styles[NamedStyle.BuiltIn.BodyText2].ParagaphFormatting;

          //--- Set some properties
          bodyText2Formatting.PageBreakBefore = true;
          bodyText2Formatting.TextJustification =
               ParagraphFormatting.Justification.Right;

          //--- Apply it to a new paragraph
          doc.InsertParagraphAfter(null, bodyText2Formatting);
        </code>
          <br/>
          <code>

          '--- Get BodyText paragraph formatting from Document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim bodyTextFormatting As ParagraphFormatting = _
               doc.CreateParagraphFormatting()

          '--- Set some properties
          bodyTextFormatting.PageBreakBefore = True
          bodyTextFormatting.TextJustification = _
               ParagraphFormatting.Justification.Right

          '--- Apply it to a new paragraph
          doc.InsertParagraphAfter(Nothing, bodyTextFormatting)

          '--- Get paragraph formatting from BodyText2 Style
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim bodyText2Formatting As ParagraphFormatting = _
               doc.Styles(NamedStyle.BuiltIn.BodyText2).ParagraphFormatting

          '--- Set some properties
          bodyText2Formatting.PageBreakBefore = True
          bodyText2Formatting.TextJustification = _
               ParagraphFormatting.Justification.Right

          '--- Apply it to a new paragraph
          doc.InsertParagraphAfter(Nothing, bodyText2Formatting)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SetLineSpacing(System.Int32,SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> representing the line spacing for a paragraph.</para>
        </summary>
        <param name="spacing">
          <para>The value for the spacing. The units depend on the type parameter.</para>
        </param>
        <param name="type">
          <para>The type of spacing to use. See <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule"/> for a discussion on the different types of spacing.</para>
        </param>
        <remarks>
          <para>There are three types of line spacing: AtLeast, Exactly, and Multiple. AtLeast and Exactly are set in twips.  One twip = (1/20 pt) or (1/1440 in). Multiple is set in number of lines. AtLeast must be between 0 pt (0 twips) and 1584 pt (31680 twips).  Exactly must be between 0.7 pt (14 twips) and 1584 pt (31680 twips). Multiple must be between 1 line and 132 lines. Values beyond these for all 3 types will be adjusted automatically.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing &gt; Spacing section &gt; At:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set LineSpacing to 2 lines
          oParagraphFormatting.SetLineSpacing(2,
               ParagraphFormatting.SpacingRule.Multiple);
        </code>
            <br/>
            <code>

          '--- Set LineSpacing to 2 lines
          oParagraphFormatting.SetLineSpacing(2, _
               ParagraphFormatting.SpacingRule.Multiple)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.GetIndent(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation)">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the indent of the paragraph in twips.</para>
        </summary>
        <param name="indentLocation">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation"/> representing the indent location for which to get the indent.</para>
        </param>
        <returns>
          <para>An <c>int</c> that represents the indent of the paragraph in twips.</para>
        </returns>
        <example>
          <para>
            <code>

          int indent = oParagraphFormatting.GetIndent(
               ParagraphFormatting.IndentLocation.FirstLine);
        </code>
            <br/>
            <code>

          Dim indent As Integer = oParagraphFormatting.GetIndent( _
               ParagraphFormatting.IndentLocation.FirstLine)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SetIndent(System.Int32,SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> representing the indent of the paragraph in twips.</para>
        </summary>
        <param name="indentSize">
          <para>An <c>int</c> representing the size in twips by which to indent.</para>
        </param>
        <param name="indentLocation">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation"/> representing the indent location for which to set the indent.</para>
        </param>
        <example>
          <para>
            <code>
oParagraphFormatting.SetIndent(8, ParagraphFormatting.IndentLocation.FirstLine);</code>
            <br/>
            <code>
oParagraphFormatting.SetIndent(8, ParagraphFormatting.IndentLocation.FirstLine)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.GetBorder(SoftArtisans.OfficeWriter.WordWriter.Border.Location)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border"/> object on which you can manipulate the border properties of a paragraph for a specified location. Valid Border locations are: Top, Left, Bottom, Right, Between, and Bar. Bar and Between are less obvious locations and they are explained below.</para>
        </summary>
        <param name="location"/>
        <returns>
          <para>A <c>Border</c> object on which you can manipulate the border properties of a paragraph at the given location.</para>
        </returns>
        <remarks>
          <para>
            <b>Between</b> refers to a border to place between conforming paragraphs. Two paragraphs conform when both have borders, their brcLeft and brcRight matches, their widths are the same, they both belong to tables or both do not, and have the same <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.AbsolutePositioning"/> settings.</para>
          <para>
            <b>Bar</b> refers to a border to be displayed on outside of text when facing pages are displayed.</para>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab</para>
        </remarks>
        <example>
          <para>
            <code>

          oParagraphFormatting.GetBorder(Border.Location.Top).LineStyle =
               Border.LineStyle.Double;
        </code>
            <br/>
            <code>

          oParagraphFormatting.GetBorder(Border.Location.Top).LineStyle = _
               Border.LineStyle.Double
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.KeepLinesTogether">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word attempts to keep all lines of a paragraph on the same page. (It prevents a page break within a paragraph.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; ParagraphFormatting... &gt; Line and Page Breaks tab &gt; Pagination section &gt; Keep lines together</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return KeepLinesTogether
          bool keepLinesTogether = oParagraphFormatting.KeepLinesTogether;

          //--- Set KeepLinesTogether
          oParagraphFormatting.KeepLinesTogether = true;
        </code>
            <br/>
            <code>

          '--- Return KeepLinesTogether
          Dim keepLinesTogether As Boolean = oParagraphFormatting.KeepLinesTogether

          '--- Set KeepLinesTogether
          oParagraphFormatting.KeepLinesTogether = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.KeepWithNext">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word attempts to keep a paragraph on the same page as the next paragraph. (It prevents a page break a paragraph and the next paragraph.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Line and Page Breaks tab &gt; Pagination section &gt; Keep with next</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return KeepWithNext
          bool keepWithNext = oParagraphFormatting.KeepWithNext;

          //--- Set KeepWithNext
          oParagraphFormatting.KeepWithNext = true;
        </code>
            <br/>
            <code>

          '--- Return KeepWithNext
          Dim keepWithNext As Boolean = oParagraphFormatting.KeepWithNext

          '--- Set KeepWithNext
          oParagraphFormatting.KeepWithNext = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.PageBreakBefore">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will have a paragraph be the start of a new page. (It inserts a manual page break before the paragraph.)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Line and Page Breaks tab &gt; Pagination section &gt; Page break before</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PageBreakBefore
          bool pageBreakBefore = oParagraphFormatting.PageBreakBefore;

          //--- Set PageBreakBefore
          oParagraphFormatting.PageBreakBefore = true;
        </code>
            <br/>
            <code>

          '--- Return PageBreakBefore
          Dim pageBreakBefore As Boolean = oParagraphFormatting.PageBreakBefore

          '--- Set PageBreakBefore
          oParagraphFormatting.PageBreakBefore = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.LineNumberingAllowed">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will display line numbers next to a paragraph. This property has no effect in documents or sections with no line numbers.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Line and Page Breaks tab &gt; Pagination section &gt; Suppress line numbers</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineNumberingAllowed
          bool lineNumberingAllowed = oParagraphFormatting.LineNumberingAllowed;

          //--- Set LineNumberingAllowed
          oParagraphFormatting.LineNumberingAllowed = true;
        </code>
            <br/>
            <code>

          '--- Return LineNumberingAllowed
          Dim lineNumberingAllowed As Boolean = oParagraphFormatting.LineNumberingAllowed

          '--- Set LineNumberingAllowed
          oParagraphFormatting.LineNumberingAllowed = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.LineSpacingRule">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.LineSpacingRule"/> object that represents the type of line spacing for a paragraph. There are 3 types: AtLeast, Exactly, and Multiple. AtLeast and Exactly use twips to specify a minimum height and exact height respectively. One twip = (1/20 pt) or (1/1440 in). Multiple specifies a spacing as a number of lines. Multiple is the most common type of spacing.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; ParagraphFormatting... &gt; Indents and Spacing &gt; Spacing section &gt; Line spacing:</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpaceBefore">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> representing the amount of whitespace that should be placed above a paragraph in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>This must be between 0 pt (0 twips) and 1584 pt (31680 twips). Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing &gt; Spacing section &gt; Before:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return SpaceBefore
          int spaceBefore = oParagraphFormatting.SpaceBefore;

          //--- Set SpaceBefore to 12 pt
          oParagraphFormatting.SpaceBefore = 240;
        </code>
            <br/>
            <code>

          '--- Return SpaceBefore
          Dim spaceBefore As Integer = oParagraphFormatting.SpaceBefore

          '--- Set SpaceBefore to 12 pt
          oParagraphFormatting.SpaceBefore = 240
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpaceAfter">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> representing the amount of whitespace that should be placed below a paragraph in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>This must be between 0 pt (0 twips) and 1584 pt (31680 twips). Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing tab &gt; Spacing section &gt; After:</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.AbsolutePositioning">
            <Doc>
        <summary>
          <para>Returns an <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.AbsolutePositioning"/> object on which you can control the absolute positioning for a paragraph.</para>
        </summary>
        <example>
          <para>
            <code>

          oParagraphFormatting.AbsolutePositioning.X = 100;
        </code>
            <br/>
            <code>

          oParagraphFormatting.AbsolutePositioning.X = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.AllowAutoHyphenation">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if auto hyphening is allowed for a paragraph.</para>
        </summary>
        <remarks>
          <para>The default value for a new paragraph is true.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Line and Page Breaks tab &gt; Don't hyphenate</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AllowAutoHyphenation
          bool allowAutoHyphenation = oParagraphFormatting.AllowAutoHyphenation;

          //--- Set AllowAutoHyphenation
          oParagraphFormatting.AllowAutoHyphenation = true;
        </code>
            <br/>
            <code>

          '--- Return AllowAutoHyphenation
          Dim allowAutoHyphenation As Boolean = oParagraphFormatting.AllowAutoHyphenation

          '--- Set AllowAutoHyphenation
          oParagraphFormatting.AllowAutoHyphenation = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.WidowControl">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> representing if Word will use Widow Control for a paragraph. When set to true, Word will not print the last line of a paragraph by itself at the top of a page (widow) or the first line of a paragraph by itself at the bottom of a page (orphan).</para>
        </summary>
        <remarks>
          <para>The default value for a new paragraph is <c>true</c>.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Line and Page Breaks tab &gt; Pagination section &gt; Widow/Orphan control</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return WidowControl
          bool widowControl = oParagraphFormatting.WidowControl;

          //--- Set WidowControl
          oParagraphFormatting.WidowControl = false;
        </code>
            <br/>
            <code>

          '--- Return WidowControl
          Dim widowControl As Boolean = oParagraphFormatting.WidowControl

          '--- Set WidowControl
          oParagraphFormatting.WidowControl = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.BeforeAutoSpacing">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will automatically handle spacing above a paragraph.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing tab &gt; Spacing section &gt; Before:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return BeforeAutoSpacing
          bool beforeAutoSpacing = oParagraphFormatting.BeforeAutoSpacing;

          //--- Set BeforeAutoSpacing
          oParagraphFormatting.BeforeAutoSpacing = true;
        </code>
            <br/>
            <code>

          '--- Return BeforeAutoSpacing
          Dim beforeAutoSpacing As Boolean = oParagraphFormatting.BeforeAutoSpacing

          '--- Set BeforeAutoSpacing
          oParagraphFormatting.BeforeAutoSpacing = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.AfterAutoSpacing">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will automatically handle spacing below a paragraph.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing tab &gt; Spacing section &gt; After:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AfterAutoSpacing
          bool afterAutoSpacing = oParagraphFormatting.AfterAutoSpacing;

          //--- Set AfterAutoSpacing
          oParagraphFormatting.AfterAutoSpacing = true;
        </code>
            <br/>
            <code>

          '--- Return AfterAutoSpacing
          Dim afterAutoSpacing As Boolean = oParagraphFormatting.AfterAutoSpacing

          '--- Set AfterAutoSpacing
          oParagraphFormatting.AfterAutoSpacing = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.TextJustification">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification"/> object that represents the text justification for a paragraph.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing tab &gt; General section &gt; Alignment:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Justification
          ParagraphFormatting.Justification oJustification =
               oParagraphFormatting.TextJustification;

          //--- Set Justification to Right
          oParagraphFormatting.TextJustification =
               ParagraphFormatting.Justification.Right;
        </code>
            <br/>
            <code>

          '--- Return Justification
          Dim oJustification As ParagraphFormatting.Justification = _
               oParagraphFormatting.TextJustificaiton

          '--- Set Justification
          oParagraphFormatting.TextJustification = _
               ParagraphFormatting.Justification.Right
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Shading">
            <Doc>
        <summary>
          <para>Returns a <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Shading"/> object which on which you can manipulate the shading (fill color and/or pattern) properties of a paragraph.</para>
        </summary>
        <remarks>
          <para>Note: The shading on a paragraph will be overridden by shading set on a character run.</para>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab</para>
        </remarks>
        <example>
          <para>
            <code>
          Shading shading = oParagraphFormatting.Shading;
        </code>
            <br/>
            <code>

          Dim shading As Shading = oParagraphFormatting.Shading
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.LineSpacing">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the line spacing for a paragraph.</para>
        </summary>
        <remarks>
          <para>There are three types of line spacing: AtLeast, Exactly, and Multiple. AtLeast and Exactly are set in twips.  One twip = (1/20 pt) or (1/1440 in). Multiple is set in number of lines. AtLeast must be between 0 pt (0 twips) and 1584 pt (31680 twips).  Exactly must be between 0.7 pt (14 twips) and 1584 pt (31680 twips). Multiple must be between 1 line and 132 lines. Values beyond these for all 3 types will be adjusted automatically.</para>
          <para>MS Word equivalent: Format menu &gt; Paragraph... &gt; Indents and Spacing &gt; Spacing section &gt; At:</para>
          <para>The default value for this property is 2.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineSpacing
          int lineSpacing = oParagraphFormatting.LineSpacing;
        </code>
            <br/>
            <code>

          '--- Return LineSpacing
          Dim lineSpacing As Integer = oParagraphFormatting.LineSpacing
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment">
            <Doc>
        <summary>
          <para>Font alignments for a paragraph.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Auto">
            <Doc>
          <summary>Deprecated.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Centered">
            <Doc>
          <summary>Deprecated.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Hanging">
            <Doc>
          <summary>Deprecated.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Roman">
            <Doc>
          <summary>Deprecated.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Variable">
            <Doc>
          <summary>Deprecated.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.FontAlignment.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment&quot;]/Member[@signature=&quot;ParagraphFormatting.FontAlignment.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation">
            <Doc>
        <summary>
          <para>Indent locations for a paragraph.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.FirstLine">
            <Doc>
          <summary>Specifies an indentation between the left margin of a page and the first line of a paragraph.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.Left">
            <Doc>
          <summary>Specifies an indentation between the left margin of a page and the left edge of a paragraph.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.Right">
            <Doc>
          <summary>Specifies an indentation between the right margin of a page and the right edge of a paragraph.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.IndentLocation.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation&quot;]/Member[@signature=&quot;ParagraphFormatting.IndentLocation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification">
            <Doc>
        <summary>
          <para>Justification types for a paragraph.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.Center">
            <Doc>
          <summary>Paragraph is centered.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.Left">
            <Doc>
          <summary>Paragraph is left-aligned.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.LeftRight">
            <Doc>
          <summary>Paragraph is justified.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.Right">
            <Doc>
          <summary>Paragraph is right-aligned.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification&quot;]/Member[@signature=&quot;ParagraphFormatting.Justification.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule">
            <Doc>
        <summary>
          <para>Line spacing types for a paragraph. If the line spacing is not at least the height of the font used on the line then the top of the character string is truncated.</para>
        </summary>
        <remarks>
          <para>The default value for the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.LineSpacing"/> property is <c>Multiple</c></para>
        </remarks>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.AtLeast">
            <Doc>
          <summary>Minimum height of the width between lines in twips. One twip = (1/20 pt).</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.Exactly">
            <Doc>
          <summary>Exact height of the width between lines in twips. One twip = (1/20 pt).</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.Multiple">
            <Doc>
          <summary>Exact height of the width between lines in number of lines. For example, enter 2 for double spacing.</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.SpacingRule.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;ParagraphFormatting&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule&quot;]/Member[@signature=&quot;ParagraphFormatting.SpacingRule.Value&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.SideBySide">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.RightIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.LeftIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.FirstLineIndent">
            <method.excluded>  </method.excluded>
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.TopBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.LeftBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.BottomBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.RightBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.BarBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl.TableDataOffset">
            <summary>
            The offset of additional properties for the paragraph
            </summary>
            <remarks>According to the 2008 documentation:<br/>
            An unsigned integer that specifies a location in the Data Stream. A PrcData begins at 
            this offset and specifies additional properties for the paragraph. The cbGrpprl member 
            of the referenced PrcData structure MUST NOT be less than 10. If an application 
            processes this PrcData, then it MUST NOT process any more Prls in the array that 
            contained the sprmPTableProps. <br/>
            SprmPHugePapx and sprmPTableProps can refer to PrcDatas containing each other, but the 
            chain MUST eventually terminate in a PrcData that contains neither sprmPHugePapx nor 
            sprmPTableProps.
            </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ParagraphSprmUncompressor.unCompressPAPOperation(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormattingModelImpl,SoftArtisans.OfficeWriter.WordWriter.SprmOperation)">
            <summary> Performs an operation on a ParagraphProperties object. Used to uncompress
            from a papx.
            
            </summary>
            <param name="newPAP">The ParagraphProperties object to perform the operation on.
            </param>
            <param name="operand">The operand that defines the operation.
            </param>
            <param name="param">The operation's parameter.
            </param>
            <param name="varParam">The operation's variable length parameter.
            </param>
            <param name="grpprl">The original papx.
            </param>
            <param name="offset">The current offset in the papx.
            </param>
            <param name="spra">A part of the sprm that defined this operation.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement">
            <summary>
            A simple class to keep track of Paths to elements in xml
            </summary>
            <remarks>
            For elements that are not empty, the end tag corresponds to if it were empty. This means
            that calling Enter() and then Exit() will result in the same as calling Pass().
            <br />
            When passing between classes with a reader, this should correspond to the location
            pointed to by that reader.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.path">
            <summary>
            Points to the last element entered/exited/passed
            </summary>
            <remarks>If the last element is a 0, then it just entered this node.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.#ctor">
            <summary>
            Default constructor sets the current path to 0
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Enter">
            <summary>
            Enters the path into a child.
            </summary>
            <remarks>This should be called when a startElement is read (that is not empty)</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Exit">
            <summary>
            Exits out of a node.
            </summary>
            <remarks>This should be called when an endElement is read (that is not empty)</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Pass">
            <summary>
            Increments the current path.
            </summary>
            <remarks>This should be called when an Empty element is read in.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.MoveToParent">
            <summary>
            Moves this path back up to it's parent.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.GetReversedPath(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Returns the reversed path, so that the first element popped will be the index of  the
            first node.
            </summary>
            <remarks>The reason this is static is so that subclasses can access it for paths that
            aren't there base</remarks>
            <example>If the path is 2->3->4, then the first element popped will be 2 and the second
            3, and so on</example>
            <param name="other">a path</param>
            <returns>the other path's path reversed</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.IsShallowerThan(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Returns whether the given path is a child (grandchild etc.) of this node or one of its
            siblings.
            </summary>
            <example>If this path is 1->0, and goal is 4->2->0, then this will return <c>true</c>. If
            this path is 2->1->0 and goal is 2->1 or 3->1 or 4->2->0 it will return <c>false</c>. The
            end tag and start tag of the same element have the same depth, and any of that elements
            children are deeper.
            </example>
            <param name="goal">Another path to be compared with this one</param>
            <returns><c>true</c> if the other path is deeper in the xml than this one.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.MinusDepth(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Returns the difference in between this path's depth and the other's
            </summary>
            <remarks>If the returned value is negative than the given path is deeper than this one,
            if it's positive than this path is deeper, if zero, than the two paths have the same
            depth</remarks>
            <example>If this path is 1->0, and goal is 4->2->0, then this will return <c>1</c>. If
            this path is 2->4->0, and goal is 1->0, then this will return <c>-1</c>. If this path is
            2->1->0 and goal is 2->1 or 3->1 or 4->2->0 it will return <c>0</c>. The end tag and
            start tag of the same element have the same depth, and any of that elements children are
            deeper.
            </example>
            <param name="goal">Another path to be compared with this one</param>
            <returns>The difference between the depth of this path and that of the given goal.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Equals(System.Object)">
            <summary>
            Compares this path with another
            </summary>
            <param name="obj">another path to be compared with this one.</param>
            <returns><c>true</c> if this is the same path as the other</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Clone">
            <summary>
            Returns a deep copy of this path
            </summary>
            <returns>A copy of this path.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.DefaultUpdate(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Performs the default updating of this path for a node in an element
            </summary>
            <remarks>You should inline this code if you have to switch over the node type to avoid
            multiple switches.<br/>Note: this does not update the space context</remarks>
            <param name="reader">An xml reader pointing to some part of xml</param>
            <param name="passOnWhiteSpace">Whether whitespace is considered text. If <c>true</c>,
            whitespace will cause Pass() to be called</param>
            <returns>Whether enter was called or not.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal">
            <summary>
            A path to an element with the hopes of being the same as another path.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.#ctor">
            <summary>
            Creates a new path, that is already after its goal
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Creates a new path with a given goal
            </summary>
            <param name="goal">The goal path that this path is trying to get to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.SetNewGoal(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Sets a new goal starting from the current path.
            </summary>
            <remarks>After setting the goal, you should confirm that you're not already at/after the
            goal</remarks>
            <param name="goalPath">The new path to set as the goal of this path</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.BeforeGoal">
            <summary>
            Whether or not this path is before its goal.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.AfterGoal">
            <summary>
            Whether or not this path is after its goal.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.OnPathToGoal">
            <summary>
            Returns whether or not this path is on a direct path to its goal.
            </summary>
            <remarks>To be on the direct path to its goal it would be at the start element of the
            node containing the goal something like the following:
            <c>2-&gt;3&gt;1-&gt;0</c> when the goal is <c>2-&gt;3&gt;1-&gt;3-&gt;4</c>. Note, however
            that <c>2-&gt;3&gt;1-&gt;2</c> and <c>2-&gt;3&gt;1-&gt;3</c> would not be on the path to
            that goal. Also note that this will be false when at the goal.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.CanPass">
            <summary>
            Returns whether calling pass will cause this path to skip over the goal
            </summary>
            <remarks>If this is false, Enter should be called in order to avoid missing the goal. You can safely pass in one of the scenarios:
            <list type="bullet">
            <item>The path is already after the goal</item>
            <item>The path is in a </item></list></remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.GoalIsChild">
            <summary>
            After calling Enter, returns whether the goal is a child of the current element.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal.GoalIsDeeper">
            <summary>
            Whether the goal is deeper in the xml than the current node.
            </summary>
            <remarks>Basically this is whether or not it's some sort of "younger" like a niece or
            nephew or a child of the current path.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.BASE_SHAPE_ID">
            <summary>The base shape id to use.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.BSE_IDX">
            <summary>The index of the bse record in the Escher Record list.</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.CONTAINER_IDX">
            <summary>The index of the shape container record in the Escher Record list</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.IDPROP_ID">
            <summary>The property id of the ID option in the Options Record</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.OPTIONSRECORD_ID">
            <summary>The id of the options record in the Shape Container record</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.SHAPERECORD_ID">
            <summary>The id of the shape record in the Shape Container record</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.initImage(System.SByte[],System.SByte[])">
            <throws>  Exception </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.getBigEndian(System.SByte[],System.Int32,System.Int32)">
            <summary> Used to get a big endian number from a byte array
            
            </summary>
            <param name="buf">The byte array to read from.
            </param>
            <param name="offset">The offset in the byte array to starting reading from.
            </param>
            <param name="width">The integer width in bytes.
            </param>
            <returns> An integer representing the big endian number.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PictureDescriptor.findSubArray(System.SByte[],System.SByte[],System.Int32)">
            <summary> Used to verify that the mImgData array contains the sub array 
            magicNum at the offset start 
            
            </summary>
            <param name="magicNum">The byte array to look for in mImgData.
            </param>
            <param name="start">The place to s
            </param>
            <returns> true if the magicNum exists at offset start in mImgData.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PieceDescriptor">
            <summary> Summary description for PieceDescriptor.
            DYL -- 09/05/2003 class made public to enable unit testing
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PlexNode">
            <summary> Summary description for PlexNode.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PieceTableLookup.getIfFieldMarker(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.CharacterFormat,System.Char,System.Int32,System.Collections.Generic.ICollection{SoftArtisans.OfficeWriter.WordWriter.MarkerBase},SoftArtisans.OfficeWriter.WordWriter.TemplateDocument,SoftArtisans.OfficeWriter.WordWriter.BuildableWordRecordFLD,System.Int32)">
            <summary>Creates an IfField Marker from the given data.
            
            TODO: throw worthwhile
            exceptions</summary>
            
            @param aCP
                       the starting character position of the field within the
                       document.
            @param aLength
                       the length in characters of the field
            @param aFormat
                       the formatting of the characters
            @param aSeparator ?
                       some sort of separator character
            @param baseCP
                       the base character of this part of the document
            @param aSubMarkers
                       a sorted list of all the field markers contained within this
                       if field. NOTE: these must be sorted by character position
            @param aDoc
                       the TemplateDocument containing the IfField to be created
            @param fieldRecord
                       the field record containing the if field descriptors
            @param endFieldDescriptorIndex
                       the index of the end field descriptor for the if field
            @return a new field marker representing the if field marker at the given
                    location.
            @throws IOException
                        I have no idea why this would happen, we catch all exceptions
                        and print there stack trace and return null
            @throws SAException
                        see IOException note.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PlexOfPositionalCps">
            <summary> Represents a plex that stores CPs that refer to a position in the document. This
            is in contrast to other Plexes that store a range (CP->CP+1). In this plex,
            the next CP is not related to the previous. Bookmarks and footnotes are stored 
            in these types of plexes.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexOfPositionalCps.#ctor(System.SByte[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <param name="buf">
            </param>
            <param name="start">
            </param>
            <param name="size">
            </param>
            <param name="sizeOfStruct">
            </param>
            <param name="subDocType">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.PlexStorage">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexStorage.#ctor(SoftArtisans.OfficeWriter.WordWriter.FIBFieldHandler,System.SByte[])">
            <summary>  Initializes PlexStorage
            NOTE: Plex's which are commented out are initialized elsewhere. Uncommenting these lines
            will screw things up (unless you know what you're doing)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PlexStorage.getPlex(System.Int32,SoftArtisans.OfficeWriter.WordWriter.PlexOfCps@)">
            <summary>
            Gets the plex of cps at a specified index
            </summary>
            <param name="index">The index to retrieve</param>
            <param name="plexOfCps">The variable in which to store the plexOfCps retrieved, or <code>null</code> 
            if there is no plex of cps at the given index</param>
            <returns><code>true</code> if a value was retrieved, <code>false</code> if <code>index</code> has 
            no plex of cps</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime">
            <summary> This class is used to represent a date and time in a Word document.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.serialize(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Equals(System.Object)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.toDate">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Minutes">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Hours">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.DayOfMonth">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Month">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Year">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.POIDateAndTime.Weekday">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSConstants">
            <summary> <p>A repository for constants shared by POI classes.</p>
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSDocument">
            <summary> This class manages a document in the POIFS filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.RawDataBlock[],System.Int32)">
            <summary> Constructor from large blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the big blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock[],System.Int32)">
            <summary> Constructor from small blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the small blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,SoftArtisans.OfficeWriter.Shared.ListManagedBlock[],System.Int32)">
            <summary> Constructor from small blocks
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="blocks">the small blocks making up the POIFSDocument
            </param>
            <param name="length">the actual length of the POIFSDocument
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,System.IO.Stream)">
            <summary> Constructor
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="stream">the InputStream we read data from
            
            </param>
            <exception cref="T:System.IO.IOException"> thrown on read errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.#ctor(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor
            
            </summary>
            <param name="name">the name of the POIFSDocument
            </param>
            <param name="size">the length of the POIFSDocument
            </param>
            <param name="path">the path of the POIFSDocument
            </param>
            <param name="writer">the writer who will eventually write the document
            contents
            
            </param>
            <exception cref="T:System.IO.IOException"> thrown on read errors
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.read(System.SByte[],System.Int32)">
            <summary> read data from the internal stores
            
            </summary>
            <param name="buffer">the buffer to write to
            </param>
            <param name="offset">the offset into our storage to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of blocks making up the
            filesystem
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlocks">
            <summary> return the array of SmallDocumentBlocks used
            
            </summary>
            <returns> array of SmallDocumentBlocks; may be empty, cannot be null
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.Size">
            <returns> size of the document
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.DocumentProperty">
            <summary> Get the DocumentProperty
            
            </summary>
            <returns> the instance's DocumentProperty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.#ctor(System.Object[])">
            <summary> Constructor
            
            </summary>
            <param name="blocks">blocks to construct the store from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor for a small block store that will be written
            later
            
            </summary>
            <param name="path">path of the document
            </param>
            <param name="name">name of the document
            </param>
            <param name="size">length of the document
            </param>
            <param name="writer">the object that will eventually write the document
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.Valid">
            <returns> true if this store is a valid source of data
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.SmallBlockStore.Blocks">
            <returns> the SmallDocumentBlocks
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.#ctor(System.Object[])">
            <summary> Constructor
            
            </summary>
            <param name="blocks">the blocks making up the store
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O error
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> Constructor for a big block store that will be written
            later
            
            </summary>
            <param name="path">path of the document
            </param>
            <param name="name">name of the document
            </param>
            <param name="size">length of the document
            </param>
            <param name="writer">the object that will eventually write the
            document
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.writeBlocks(System.IO.Stream)">
            <summary> write the blocks to a stream
            
            </summary>
            <param name="stream">the stream to which the data is to be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on error
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.countBlocks">
            <returns> number of big blocks making up this document
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.Valid">
            <returns> true if this store is a valid source of data
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocument.BigBlockStore.Blocks">
            <returns> the DocumentBlocks
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath">
            <summary> Class POIFSDocumentPath
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor(System.String[])" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor">
            <summary> simple constructor for the path of a document that is in the
            root of the POIFSFileSystem. The constructor that takes an
            array of Strings can also be used to create such a
            POIFSDocumentPath by passing it a null or empty String array
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.#ctor(SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String[])">
            <summary> constructor that adds additional subdirectories to an existing
            path
            
            </summary>
            <param name="path">the existing path
            </param>
            <param name="components">the additional subdirectory names to be added
            
            </param>
            <exception cref="!:IllegalArgumentException"> if any of the Strings in
            components is null or zero
            length
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.Equals(System.Object)">
            <summary> equality. Two POIFSDocumentPath instances are equal if they
            have the same number of component Strings, and if each
            component String is equal to its coresponding component String
            
            </summary>
            <param name="o">the object we're checking equality for
            
            </param>
            <returns> true if the object is equal to this object
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.GetHashCode">
            <summary> calculate and return the hashcode
            
            </summary>
            <returns> hashcode
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.length">
            <returns> the number of components
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.getComponent(System.Int32)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.ToString">
            <summary> <p>Returns a string representation of the path. Components are
            separated by the platform-specific file separator.</p>
            
            </summary>
            <author>  Rainer Klute (klute@rainer-klute.de)
            </author>
            <since> 2002-01-24
            
            </since>
            <returns> string representation
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath.Parent">
            <summary> <p>Returns the path's parent or <code>null</code> if this path
            is the root path.</p>
            
            </summary>
            <author>  Rainer Klute (klute@rainer-klute.de)
            </author>
            <since> 2002-01-24
            
            </since>
            <returns> path of parent, or null if this path is the root path
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem">
            <summary> This is the main class of the POIFS system; it manages the entire
            life cycle of the filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.#ctor(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Constructor, intended for writing</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.#ctor(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Create a POIFSFileSystem from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which to read the data
            
            </param>
            <exception cref="T:System.IO.IOException"> on errors reading, or on invalid data
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocument(System.IO.Stream,System.String)">
            <summary> Create a new document to be added to the root directory
            
            </summary>
            <param name="stream">the InputStream from which the document's data
            will be obtained
            </param>
            <param name="name">the name of the new POIFSDocument
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException"> on error creating the new POIFSDocument
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocument(System.String,System.Int32,SoftArtisans.OfficeWriter.Shared.POIFSWriterListener)">
            <summary> create a new DocumentEntry in the root entry; the data will be
            provided later
            
            </summary>
            <param name="name">the name of the new DocumentEntry
            </param>
            <param name="size">the size of the new DocumentEntry
            </param>
            <param name="writer">the writer of the new DocumentEntry
            
            </param>
            <returns> the new DocumentEntry
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDirectory(System.String)">
            <summary> create a new DirectoryEntry in the root directory
            
            </summary>
            <param name="name">the name of the new DirectoryEntry
            
            </param>
            <returns> the new DirectoryEntry
            
            </returns>
            <exception cref="T:System.IO.IOException"> on name duplication
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.writeFilesystem(System.IO.Stream)">
            <summary> Write the filesystem out
            
            </summary>
            <param name="stream">the OutputStream to which the filesystem will be
            written
            
            </param>
            <exception cref="T:System.IO.IOException"> thrown on errors writing to the stream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.Main(System.String[])">
            <summary> read in a file and write it back out again
            
            </summary>
            <param name="args">names of the files; arg[ 0 ] is the input file,
            arg[ 1 ] is the output file
            
            </param>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.createDocumentInputStream(System.String)">
            <summary> open a document in the root entry's list of entries
            
            </summary>
            <param name="documentName">the name of the document to be opened
            
            </param>
            <returns> a newly opened DocumentInputStream
            
            </returns>
            <exception cref="T:System.IO.IOException"> if the document does not exist or the
            name is that of a DirectoryEntry
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.addDocument(SoftArtisans.OfficeWriter.Shared.POIFSDocument)">
            <summary> add a new POIFSDocument
            
            </summary>
            <param name="document">the POIFSDocument being added
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.addDirectory(SoftArtisans.OfficeWriter.Shared.DirectoryProperty)">
            <summary> add a new DirectoryProperty
            
            </summary>
            <param name="directory">the DirectoryProperty being added
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.remove(SoftArtisans.OfficeWriter.Shared.EntryNode)">
            <summary> remove an entry
            
            </summary>
            <param name="entry">to be removed
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.preferArray">
            <summary> Give viewers a hint as to whether to call getViewableArray or
            getViewableIterator
            
            </summary>
            <returns> true if a viewer should call getViewableArray, false if
            a viewer should call getViewableIterator
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.Root">
            <summary> get the root entry
            
            </summary>
            <returns> the root entry
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ViewableArray">
            <summary> Get an array of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an array of Object; may not be null, but may be empty
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ViewableIterator">
            <summary> Get an Iterator of objects, some of which may implement
            POIFSViewable
            
            </summary>
            <returns> an Iterator; may not be null, but may have an empty
            back end store
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSFileSystem.ShortDescription">
            <summary> Provides a short description of the object, to be used when a
            POIFSViewable object has not provided its contents.
            
            </summary>
            <returns> short description
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.openStream(System.String)">
            <summary> Opens a stream in the storage for random access i/o</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.openStorage(System.String)">
            <summary> Opens a sub-storage in the storage for random access i/o
            Substorage must exist in the storage
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.enumNodes">
            <summary> Returns an iterator object that can be used to enumerate
            the storage and stream objects contained within this storage object
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.getStorageClsid">
            <summary> Gets CLSID for the storage</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.copyTo(System.Collections.Generic.IEnumerable{System.String},SoftArtisans.OfficeWriter.Shared.Storage)">
            <summary> Copies the entire contents of an open storage object to another storage object
            Excludes elements listed in th aExceludeElements parameter
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage.Name">
            <returns>s Storage's name
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyStream">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream.Stream">
            <returns>s inner Stream
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.ReadOnlyStream.Name">
            <returns>s stream's name
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSReadOnlyTranslatingIterator">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.TranslatingIterator">
            <summary> Summary description for TranslatingIterator</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSStorage">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Storage">
            <summary> Read-write storage interface definition.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStorage(System.String)">
            <summary> Creates a storage in the open compund file
            Returns Storage object
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStream(System.String,System.IO.Stream)">
            <summary> Creates a stream in a newly created compound file
            aSourceStream is a sourse of data;
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.createStream(System.String,SoftArtisans.OfficeWriter.Shared.WriteEventListener)">
            <summary> Creates a stream in a newly created compound file
            aeventListener gets event when it's time to write data to the output stream
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Storage.setStorageClsid(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Sets CLSID for the storage</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSTranslatingIterator">
            <summary> <p>Title: Translating Iterator </p>
            <p>Description: Allows to call into POIFS collection of Entries</p>
            <p></p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent">
            <summary> Class POIFSWriterEvent
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.#ctor(SoftArtisans.OfficeWriter.Shared.DocumentOutputStream,SoftArtisans.OfficeWriter.Shared.POIFSDocumentPath,System.String,System.Int32)">
            <summary> package scoped constructor
            
            </summary>
            <param name="stream">the DocumentOutputStream, freshly opened
            </param>
            <param name="path">the path of the document
            </param>
            <param name="documentName">the name of the document
            </param>
            <param name="limit">the limit, in bytes, that can be written to the
            stream
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Stream">
            <returns> the DocumentOutputStream, freshly opened
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Path">
            <returns> the document's path
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Name">
            <returns> the document's name
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent.Limit">
            <returns> the limit on writing, in bytes
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.POIFSWriterListener">
            <summary> Interface POIFSWriterListener
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
            <version>  %I%, %G%
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.POIFSWriterListener.processPOIFSWriterEvent(SoftArtisans.OfficeWriter.Shared.POIFSWriterEvent)">
            <summary> Process a POIFSWriterEvent that this listener had registered
            for
            
            </summary>
            <param name="event">the POIFSWriterEvent
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor.Merge(SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)">
            <summary>
            Merges the contents of another piece descriptor with this one. The prm of this 
            descriptor is unchanged.
            </summary>
            <param name="pd">the other piece descriptor to merge with this one.</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Position">
            <Doc>
      <summary>
        <para>This class is used to represent a cursor position in the document. It sits between two characters and its position is represented as the index of the character it sits behind. A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Position"/> object can be obtained from an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/>.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <c>Position</c> object using the <c>new</c> keyword. You must get a <c>Position</c> object using the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetPosition(System.Int32)"/> method of the <c>Element</c> class (or the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> class, which inherits from <c>Element</c> ). This method takes a parameter that represents the relative offset from the start of this Element to point at which to get the Position.</para>
        <para>The following sample gets a <c>Position</c> object from the start of a <c>Document</c>.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Position pos = doc.GetPosition(0);
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim pos As Position = doc.GetPosition(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertParagraph(SoftArtisans.OfficeWriter.WordWriter.NamedStyle)">
            <Doc>
        <summary>
          <para>Creates and returns an empty <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Paragraph"/> at the point represented by this Position, formatted with the specified style. If this Position is in the middle of a paragraph the containing paragraph will be split.</para>
        </summary>
        <param name="style">
          <para>The base style of this paragraph. The base style also affects the character style of any text added to this paragraph. If this is null, the style will be "Normal".</para>
        </param>
        <returns>
          <para>A newly created <c>Paragraph</c>. Even though the paragraph is empty there will always be at least a single carriage return.</para>
        </returns>
        <example>
          <para>
            <code>
Paragraph p = pos.InsertParagraph(oDocument.Styles[NamedStyle.BuiltIn.Normal]);</code>
            <br/>
            <code>
Dim p As Paragraph = pos.InsertParagraph(oDocument.Styles(NamedStyle.BuiltIn.Normal))</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertHyperlink(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Hyperlink"/> at this Position. This hyperlink will have the specified url and displayed text.</para>
        </summary>
        <param name="url">
          <para>A <c>String</c> representing the url to link to.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will be displayed in the document for this hyperlink.</para>
        </param>
        <returns>
          <para>A <c>Hyperlink</c> object representing the newly created hyperlink.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
Hyperlink link = e.InsertHyperlink("http://www.softartisans.com", "SoftArtisans");</code>
            <br/>
            <code>
Dim link As Hyperlink = e.InsertHyperlink("http://www.softartisans.com", "SoftArtisans")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertMergeField(System.String,System.String)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.MergeField"/> at this Position. This merge field will have the specified name and contents.</para>
        </summary>
        <param name="fieldName">
          <para>A <c>String</c> representing the name of this merge field.</para>
        </param>
        <param name="display">
          <para>A <c>String</c> representing the text that will displayed for this merge field in the document.</para>
        </param>
        <returns>
          <para>A <c>MergeField</c> object representing the newly created merge field.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
MergeField mfield = e.InsertMergeField("MyField", "ThisNameIsDisplayed");</code>
            <br/>
            <code>
Dim mfield As MergeField = e.InsertMergeField("MyField", "ThisNameIsDisplayed")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertSection">
            <Doc>
        <summary>
          <para>Creates and returns an empty <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section"/> at the point represented by this Position. If this Position is in the middle of a section then the containing section will be split.</para>
        </summary>
        <returns>
          <para>A newly created <c>Section</c>.</para>
        </returns>
        <example>
          <para>
            <code>
Section sect = pos.InsertSection();</code>
            <br/>
            <code>
Dim sect As Section = pos.InsertSection()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertText(System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.CharacterRun"/> at the point represented by this Position. The text to be inserted is specified as well as whether this should be a new character run or part of the previous one.</para>
        </summary>
        <param name="text">
          <para>A <c>String</c> representing the text to insert.</para>
        </param>
        <param name="newRun">
          <para>A <c>boolean</c> representing if this should have default formatting and become its own character run (true) or if it should assume the formatting of the first character in this element, becoming a part of that first character run.</para>
        </param>
        <returns>
          <para>The <c>CharacterRun</c> containing the inserted text.</para>
        </returns>
        <example>
          <para>
            <code>
CharacterRun charRun = pos.InsertText("Here is some text.", true);</code>
            <br/>
            <code>
Dim charRun As CharacterRun = pos.InsertText("Here is some text.", True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertList(System.Boolean)">
            <Doc>
        <summary>
          <para>Creates and returns an empty <see cref="T:SoftArtisans.OfficeWriter.WordWriter.List"/> at the point represented by this Position. By passing a boolean, it can be a numbered list (true) or a bulleted list (false).</para>
        </summary>
        <param name="numbered"/>
        <returns>
          <para>A <c>List</c> object representing the newly created empty list.</para>
        </returns>
        <example>
          <para>
            <code>
List lst = pos.InsertList(true);</code>
            <br/>
            <code>
Dim lst As List = pos.InsertList(True)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertTable(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Creates and returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/> at the point represented by this Position. The table will contain the specified number of rows and columns.</para>
        </summary>
        <param name="rows">
          <para>An <c>int</c> representing the number of rows the table will have.</para>
        </param>
        <param name="columns">
          <para>An <c>int</c> representing the number of columns the table will have.</para>
        </param>
        <returns>
          <para>A <c>Table</c> object representing the newly created table.</para>
        </returns>
        <example>
          <para>
            <code>
Table tbl = pos.InsertTable(2, 3);</code>
            <br/>
            <code>
Dim tbl As Table = pos.InsertTable(2, 3)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertImage(System.String)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the point represented by this Position. The image that is inserted is specified by a fileName string.</para>
        </summary>
        <param name="fileName">
          <para>A <c>String</c> representing the file anme of the image to insert.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object representing the inserted image.</para>
        </returns>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
InlineImage image = pos.InsertImage("C:\\sample.jpg");</code>
            <br/>
            <code>
Dim image As InlineImage = pos.InsertImage("C:\sample.jpg")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.InsertImage(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Inserts and returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.InlineImage"/> at the point represented by this Position. The image that is inserted is specified by a <see cref="T:System.IO.Stream"/> object.</para>
        </summary>
        <param name="stream">
          <para>A <c>Stream</c> object that the image can be read from.</para>
        </param>
        <returns>
          <para>An <c>InlineImage</c> object representing the inserted image.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>If the stream does not contain a supported image format see InlineImage.ImageFormat for a list of supported formats.</para>
        </exception>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Position&quot;]/Member[@signature=&quot;Position.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Position.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Position&quot;]/Member[@signature=&quot;Position.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Position.PositionValue">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents the absolute position in the document.</para>
        </summary>
        <example>
          <para>
            <code>

          int positionValue = pos.PositionValue;
        </code>
            <br/>
            <code>

          Dim positionValue As Integer = pos.PositionValue
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.ProductBinding">
            <summary>
            A Binding to the DataRows for getting the product over a repeat block
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ProductDescription">
            <summary> Data class that holds information about a product.
            Right now, it's just product id and version pairs.
            
            </summary>
            <author>  geoffk
            Jul 10, 2003 2:32:51 PM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyBlock">
            <summary> A block of Property instances
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.#ctor(SoftArtisans.OfficeWriter.Shared.Property[],System.Int32)">
            <summary> Create a single instance initialized with default values
            
            </summary>
            <param name="properties">the properties to be inserted
            </param>
            <param name="offset">the offset into the properties array
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.createPropertyBlockArray(System.Collections.Generic.List{SoftArtisans.OfficeWriter.Shared.Property})">
            <summary> Create an array of PropertyBlocks from an array of Property
            instances, creating empty Property instances to make up any
            shortfall
            
            </summary>
            <param name="properties">the Property instances to be converted into
            PropertyBlocks, in a java List
            
            </param>
            <returns> the array of newly created PropertyBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyBlock.writeData(System.IO.Stream)">
            <summary> Write the block's data to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyConstants_Fields">
            <summary> Interface PropertyConstants</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyFactory">
            <summary> Factory for turning an array of RawDataBlock instances containing
            Proprty data into an array of proper Property objects.
            
            The array produced may be sparse, in that any portion of data that
            should correspond to a Property, but which does not map to a proper
            Property (i.e., a DirectoryProperty, DocumentProperty, or
            RootProperty) will get mapped to a null Property in the array.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyFactory.convertToProperties(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[])">
            <summary> Convert raw data blocks to an array of Property's
            
            </summary>
            <param name="blocks">to be converted
            
            </param>
            <returns> the converted List of Property objects. May contain
            nulls, but will not be null
            
            </returns>
            <exception cref="!:IOException"> if any of the blocks are empty
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PropertyNodeTable.findRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Used to find the list indexes of a particular property
            </summary>
            <param name="rpl">A list of property nodes</param>
            <param name="min">A hint on where to start looking</param>
            <param name="start">The starting character offset</param>
            <param name="end">The ending character offset</param>
            <returns>An int array of length 2. The first int is the start index and the second is
            the end index</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PropertyNodeTable.binarySearchForStart``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Searches for the last property node in the given list such that it's start
            is before searchFor.
            </summary>
            <param name="list">the list to search</param>
            <param name="searchFor">the character position being searched for</param>
            <typeparam name="T">A type of property node</typeparam>
            <returns>the index within the list of the property node containing searchFor</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.PropertyNodeTable.binarySearchForStart``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Searches for the last property node in the given list such that it's start
            is before searchFor.
            </summary>
            <param name="list">the list to search</param>
            <param name="startIndex">The start index of the sub-list to search</param>
            <param name="endIndex">The end index of the sub-list to search</param>
            <param name="searchFor">the character position being searched for</param>
            <typeparam name="T">A type of property node</typeparam>
            <returns>the index within the list of the property node containing searchFor</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertySet.writeWithoutHydrate(SoftArtisans.OfficeWriter.Shared.Storage)">
            <param name="stg">
            </param>
            <throws>  IOException </throws>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.PropertyTable">
            <summary> This class embodies the Property Table for the filesystem; this is
            basically the dsirectory for all of the documents in the
            filesystem.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.#ctor(SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.#ctor(System.Int32,SoftArtisans.OfficeWriter.Shared.RawDataBlockList)">
            <summary> reading constructor (used when we've read in a file and we want
            to extract the property table from it). Populates the
            properties thoroughly
            
            </summary>
            <param name="startBlock">the first block of the property table
            </param>
            <param name="blockList">the list of blocks
            
            </param>
            <exception cref="T:System.IO.IOException"> if anything goes wrong (which should be
            a result of the input being NFG)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.addProperty(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Add a property to the list of properties we manage
            
            </summary>
            <param name="property">the new Property to manage
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.removeProperty(SoftArtisans.OfficeWriter.Shared.Property)">
            <summary> Remove a property from the list of properties we manage
            
            </summary>
            <param name="property">the Property to be removed
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.preWrite">
            <summary> Prepare to be written</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.getStartBlock">
            <summary> Get the start block for the property table
            
            </summary>
            <returns> start block index
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.PropertyTable.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.PropertyTable.Root">
            <summary> Get the root property
            
            </summary>
            <returns> the root property
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Range2D">
            <summary>
            Used to store a 2d range, and tell if a coordinate is inside that range
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Range2D.Includes(System.Int32,System.Int32)">
            <summary>
            Is coordinate inside this 2D range?
            </summary>
            <param name="row">row</param>
            <param name="col">column</param>
            <returns>true or false</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RawDataBlock">
            <summary> A big block created from an InputStream, holding the raw data
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlock.#ctor(System.IO.Stream)">
            <summary> Constructor RawDataBlock
            
            </summary>
            <param name="stream">the InputStream from which the data will be read
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O errors, and if an insufficient
            amount of data is read
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlock.eof">
            <summary> When we read the data, did we hit end of file?
            
            </summary>
            <returns> true if no data was read because we were at the end of
            the file, else false
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RawDataBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="T:System.IO.IOException"> if there is no data
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RawDataBlockList">
            <summary> A list of RawDataBlocks instances, and methods to manage the list
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RawDataBlockList.#ctor(System.IO.Stream)">
            <summary> Constructor RawDataBlockList
            
            </summary>
            <param name="stream">the InputStream from which the data will be read
            
            </param>
            <exception cref="T:System.IO.IOException"> on I/O errors, and if an incomplete
            block is read
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RecordFormatException">
            <author>  ryana</author>
            
            TODO To change the template for this generated type comment go to
            Window - Preferences - Java - Code Style - Code Templates
            
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RectArray2D">
            <summary> Array wrapping object for a .NET rectangular array.
            
            </summary>
            <author>  geoffk
            Feb 3, 2004 4:31:27 PM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RectArray2D.#ctor(System.Object[0:,0:],System.Boolean)">
            <summary>
            
            </summary>
            <param name="aData"></param>
            <param name="aTransposeToRowCol">By Default the access is [Col,Row], set this to 
            <c>true</c> to have [Row,Col]</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RectArray2D.getObject(System.Int32,System.Int32)">
            <seealso cref="M:SoftArtisans.OfficeWriter.Shared.Array2D.getObject(System.Int32,System.Int32)">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RectArray2D.MaxCols">
            <seealso cref="!:Array2D.getMaxCols()">
            </seealso>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.RectArray2D.MaxRows">
            <seealso cref="!:Array2D.getMaxRows()">
            </seealso>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RegistryLicenseReader.TryGetKeyString">
            <summary>
            Reads the key without throwing an expcetion.
            </summary>
            <returns>Returns the license key, or null if the key is not found.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RegistryLicenseReader.GetRegKey(System.UIntPtr,System.String,System.String,System.Boolean)">
            <summary>
            Returns a registry value for a key in the specified registry.
            </summary>
            <param name="hive">The root hive to look in, such as HKLM.</param>
            <param name="path">The path to the key in question.</param>
            <param name="keyName">The name of the key in question.</param>
            <param name="is64Bit">The registery to search in - true for 64 bit, false for 32 bit</param>
            <returns>The value of this registry key.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RegistryLicenseReader.GetRegistryKeyValue(System.UIntPtr,System.String,SoftArtisans.OfficeWriter.Shared.RegistryLicenseReader.RegSAM,System.String)">
            <summary>
            Returns a registry value as a string, based on a particular hive, path, and registry key space modifier to look in.
            </summary>
            <param name="hive">The hive to look in, such as HKLM. Should use a field of the RegistryHive class.</param>
            <param name="path">The path from the root element of the hive to the registry key in question.</param>
            <param name="keySpaceRegSAMModifier">A RegSAM access modifier letting us know if we should look in the 64 bit or 32 bit registry for this
            key.</param>
            <param name="keyName">The name of the key to acquire a value for.</param>
            <returns>The value of the found key, or null if it cannot be found.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RegistryLicenseReader.RegSAM">
            <summary>
            A data type used for specifying the security access attributes in the registry.
            From http://msdn.microsoft.com/en-us/library/windows/desktop/bb773480(v=vs.85).aspx
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatBlockAdvancer.preCurrentRepetition">
            <summary>
            This is the one used by PreIterateRow, and PreIterateNext. Note that if we don't preiterate
            those methods will still be called when getting the data, so there is a different <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatBlockAdvancer.currentRepetition"/> for
            the ones used by <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatBlockAdvancer.AfterLast"/> and <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatBlockAdvancer.Next"/>. 
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.BindingAdvancers.RepeatBlockAdvancer.PreIteratingBinding">
            <summary>
            Do not call <see cref="M:SoftArtisans.OfficeWriter.Shared.ISimpleBinding.Next"/> on this binding
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.Replacements">
            <summary>
            This is a container for a list of replacements to be made (what text 
            should be removed, and what should be added.) 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Replacements.Add(System.Int32,System.Int32,System.String)">
            <summary>
            Add a replacement to the list
            </summary>
            <param name="startIndex">the offset in a string where text should be inserted</param>
            <param name="length">the length of text that should be removed at startIndex</param>
            <param name="token">the text that should be inserted at startIndex</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.Replacements.ReplaceAll(System.Text.StringBuilder)">
            <summary>
            Apply all replacements to the stringBuilder. This should start from the end of the string
            so that other offsets aren't affected as text is changed.
            </summary>
            <param name="stringBuilder"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ResettableMemoryStream">
            <summary>
            This is a stream which contains a MemoryStream which all method calls are redirected to.
            The purpose of this function is to allow the user to reset it (through ResetStream())
            without deleting this instance of a Stream. For example, an XmlWriter writes everything to a MemoryStream,
            but every so often you want to get the data from that MemoryStream and empty it to make space for more data. By calling
            ResetStream(), the XmlWriter doesn't think anything unusual happened to it.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3">
            <summary>
            Handles output rows which are rewindable
            
            </summary>
            <note>If you have a data source that does not need to be counted you can use this, and so
            long as you don't call CountRows, it wont matter whether the underlying data source is
            rewindable or not.</note>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3.outputRowIterator">
            <summary>
            We either store everything in memoryStream, or we can use the iterator and generate it on the fly
            
            Since we need the number of rows produced before we produce XML, we sometimes might need to
            store the stream in memory so we can read through it twice, once to count, and once to process.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RewindableOutputRowsHandler`3.CountRows">
            <summary>
            Do what CreateOutputRows does, but without creating all those data structures or 
            doing as much processing
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RgbFieldWrapper">
            <summary> <p>Holds a standard RGB field 00, B, G, R.</p>
            
            </summary>
            <author>  johnv
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RootProperty">
            <summary> Root property
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.#ctor(System.Int32,System.SByte[],System.Int32)">
            <summary> reader constructor
            
            </summary>
            <param name="index">index number
            </param>
            <param name="array">byte data
            </param>
            <param name="offset">offset into byte data
            </param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RootProperty.EXCEL_CLASSID">
            <summary>
            This seems to be used by applications that open this to figure out what kind of file it is (doc, xls, ppt).
            This was mostly irrelevant and we set it to zero, but Powerpoint complained for if the file was embedded.
            Aspose Slides 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.RootProperty.WORD_CLASSID">
            <summary>
            This seems to be used by applications that open this to figure out what kind of file it is (doc, xls, ppt).
            This was mostly irrelevant and we set it to zero, but Powerpoint complained for if the file was embedded.
            Aspose Slides 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RootProperty.setSize(System.Int32)">
            <summary> set size
            
            </summary>
            <param name="size">size in terms of small blocks
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.RowSpan">
            <summary>
            A span of rows
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.RowSpan.infos">
            <summary>
            The first element in this dictionary should be the most nested
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.RowSpan.rows">
            <summary>
            Note, this is an array because you can't split up <see cref="T:System.Collections.Generic.List`1"/> easily.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.RowWrapper">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 15, 2003 11:00:31 AM
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.RowWrapper.#ctor(System.Object[],System.String[])">
            <param name="aData">
            </param>
            <param name="aColumns">
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty">
            <summary>
            An extension of element properties for runs with the added 
            <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.EndsSection"/> property.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.Ended">
            <summary>
            Set to true when the run end tag is read in
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.IConsumableRun">
            <summary>
            This interface is for the object actually in charge of skipping the run
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.IRunConsumptionController">
            <summary>
            This interface is for the object that tells the IConsumableRun whether to
            be consumed or not.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.IRunConsumptionController.ResetReplacedWithBlockElement">
            <summary>
            Sets ReplacedWithBlockElement back to it's original value.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.IRunConsumptionController.WriteEmptyRun(System.Xml.XmlWriter)">
            <summary>
            Writes out the empty run needed to ensure there is a block element.
            This must write out a block element!
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.RunElementProperty.IRunConsumptionController.ReplacedWithBlockElement">
            <summary>
            Returns true if the run was replaced with something considered a Block
            Element by TableCell, at least once. (A Table Cell must have a Block Element
            in it, or the document is corrupt).
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAHexDump">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.SByte[],System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.Byte[],System.String)" -->
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.toBytes(System.String)">
            <summary> Converts a hex string to a sbyte array.</summary>
            <param name="aHexString">a hex string in the form "XX XX XX"
            </param>
            <returns> a sbyte array representing the Hex string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.hexDump(System.SByte[],System.Int32,System.Int32)">
            <param name="data">
            </param>
            <param name="i">
            </param>
            <param name="j">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAHexDump.DirtyHexStringtoBytes(System.String)">
            <summary>
            Convert a hex string to an sbyte array
            </summary>
            <param name="s">some string where characters A-F, a-f, and 0-9 are hex data,
            and everything else is ignored.
            
            it's assumed that hex digits come in pairs</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SAInternalException">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Dec 17, 2003
            Time: 6:27:11 PM
            SAInternalException is what we should always throw for internal errors with detailed error descriptions
            This is just to make sure customer will never see our debug messages exposing product's "guts"
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAParameterNullException">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Dec 30, 2003
            Time: 4:39:07 PM
            To change this template use Options | File Templates.
            
            TODO: this isn't part of the PublicAPI so it will show up with an obfuscated name when it is thrown
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SARuntimeException">
            <summary> A simple runtime exception class to handle nested exceptions (causes).</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SAStringBuffer">
            <summary> Created by IntelliJ IDEA.
            User: denisl
            Date: Apr 28, 2003
            Time: 12:17:41 PM
            To change this template use Options | File Templates.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringBuffer.EscapeQuotes">
            <summary>
            Replaces all the characters within quote marks by adding a '\' before them.
            </summary>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">If a Quote is not matched</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeExcelPath(System.String)">
            <summary> Given a String containing an encoded path, this method returns the 
            the encoded string.  The result should be identical or as close to 
            the string Excel would generate as possible.
            </summary>
            <param name="aString">the String to decode
            </param>
            <returns> the decoded string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.encodeExcelPath(System.String)">
            <summary> Given a String containing an path, this method returns the 
            the encoded string.  The result should be identical or as close to 
            the string Excel would generate as possible.
            </summary>
            <param name="aString">the String to decode
            </param>
            <returns> the decoded string.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeTo1SByte(System.String)">
            <summary> Converts a string into single-bytes by ruthlessly discarding the upper
            byte. Muhahah! Note: Should we throw an exception if the upper byte is
            non-zero?
            
            </summary>
            <param name="aStr">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SAStringUtil.decodeTo2SByteLE(System.String)">
            <summary> Converts a string into 2-byte unicode in Little Endian format.
            
            </summary>
            <param name="aStr">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ScalarWrapper">
            <summary> 
            </summary>
            <author>  geoffk
            Dec 15, 2003 11:08:01 AM
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace">
            <summary>
            A class for searching and replacing text within a word document.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.headerFooterEnumerator">
            <summary> points to the next character that is being ignored
            this will always be after the end of the current string bolck
            points to the current header or footer being searched</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.#ctor(SoftArtisans.OfficeWriter.WordWriter.ElementModel,System.String)">
            <summary>
            Creates a new Search and replace enumerator to search through an element
            </summary>
            <remarks>If the element is a section or contains sections the headers and footers
            within will also be searched after everything else.</remarks>
            <param name="element">the element to be searched</param>
            <param name="search">the text to search for within the element</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.MoveNext">
            <summary>
            Move this search to the next search result
            </summary>
            <returns><code>true</code> if there is another result to move to; <code>false</code>
            if all the results have been exhausted</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.Reset">
            <summary>
            Resets the search to the beginning of the element
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.GetNextStringBlock">
            <summary>
            Returns the next string to be searched and updates variables appropriately for 
            switching to that block
            </summary>
            <returns> the next string block to be searched</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.SetCurrentIgnoredCharacter">
            <summary>
            Sets the current ignored character to the start of the current element
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SearchAndReplace.Current">
            <value>The current search result</value>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SearchMatch">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.SearchMatch"/> object represents a match in the document found by using the method <see cref="!:Element.Search(String)"/>.</para>
      </summary>
      <example>
        <para>
          <code>

          //--- Required for IEnumerator
          using System.Collections;
          ...
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"c:\myDoc.doc");

          //--- Search a document for social security numbers, or any series of
          //--- nine digits, and remove them. The question mark after each dash
          //--- makes the presence of the dash optional.
          IEnumerator searcherator = doc.Search(@"\d\d\d-?\d\d-?\d\d\d\d").GetEnumerator();
          while (searcherator.MoveNext())
          {
               SearchMatch match = (SearchMatch)searcherator.Current;
               match.Element.DeleteElement();
          }
        </code>
          <br/>
          <code>

          '--- Required for IEnumerator
          Imports System.Collections
          ...
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("c:\myDoc.doc")

          '--- Search a document for social security numbers, or any series of
          '--- nine digits, and remove them. The question mark after each dash
          '--- makes the presence of the dash optional.
          Dim searcherator As IEnumerator = doc.Search(@"\d\d\d-?\d\d-?\d\d\d\d").GetEnumerator()
          While searcherator.MoveNext()
               Dim match As SearchMatch = searcherator.Current
               match.Element.DeleteElement()
          End While
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.Group(System.Int32)">
            <Doc>
        <summary>Returns the string that matches the specified group. The first group is always the string that matches the entire regular expression. Groups are ordered by the left-to-right order of the left parentheses of the group.</summary>
        <param name="group">
          <para>The 0-based index of the group for which to return a match.</para>
        </param>
        <returns>
          <para>The String that matches the specified group.</para>
        </returns>
        <example>
          <para>
            <code>
string firstGroupMatch = searchMatch.Group(0);</code>
            <br/>
            <code>
Dim firstGroupMatch As String = searchMatch.Group(0)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.Replace(System.String)">
            <Doc>
        <summary>
          <para>Replaces this match with the specified string.</para>
        </summary>
        <param name="replaceWith">
          <para>The replacement string.</para>
        </param>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\somedoc.doc");
          IEnumerator searcherator = doc.Search("crimson");
          while (searcherator.MoveNext())
          {
               SearchMatch match = (SearchMatch)searcherator.Current;
               match.Replace("red");
          }
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\somedoc.doc")
          Dim searcherator As IEnumerator = doc.Search("crimson")
          While searcherator.MoveNext()
               Dim match As SearchMatch = searcherator.Current
               match.Replace("red")
          End While
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;SearchMatch&quot;]/Member[@signature=&quot;SearchMatch.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;SearchMatch&quot;]/Member[@signature=&quot;SearchMatch.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.Element">
            <Doc>
        <summary>
          <para>Returns an <see cref="P:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.Element"/> object representing the current text match.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Search for social security numbers using regular expressions and delete them.
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\somedoc.doc");
          SearchMatch[] matches = doc.Search("\s\d\d\d-?\d\d-?\d\d\d\d\s");
          foreach(SearchMatch match in matches)
          {
             match.Element.Delete();
          }
        </code>
            <br/>
            <code>

          '--- Search for social security numbers using regular expressions and delete them.
          Dim app As New WordApplication()
          Document doc = app.Open("C:\somedoc.doc")
          Dim matches As SearchMatch() = doc.Search("\s\d\d\d-?\d\d-?\d\d\d\d\s")
          For Each match As SearchMatch In matches
               match.Element.Delete()
          Loop
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SearchMatch.GroupCount">
            <Doc>
        <summary>
          <para>Returns the number of groups found in the current <see cref="T:SoftArtisans.OfficeWriter.WordWriter.SearchMatch"/>. Regular expression groups are created by adding parentheses to the regular expression. This method should always return at least 1.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\somedoc.doc");
          IEnumerator searcherator = doc.Search("\s\d\d\d-?\d\d-?\d\d\d\d\s");
          while (searcherator.MoveNext())
          {
               SearchMatch match = (SearchMatch)searcherator.Current;
               int numMatchGroups = match.GroupCount;
               match.Element.Delete();
          }
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\somedoc.doc")
          Dim searcherator As IEnumerator = doc.Search("\s\d\d\d-?\d\d-?\d\d\d\d\s")
          While searcherator.MoveNext()
               Dim match As SearchMatch = searcherator.Current
               Dim numMatchGroups As Integer = match.GroupCount
               match.Element.Delete()
          End While
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section">
            <Doc>
      <summary>
        <para>This class is used to represent a section of the document. Many documents will only contain one section. More complex documents will divide the document into multiple sections. A section can be roughly correlated to a chapter in a book. Each section can have different formatting settings, including:</para>
      </summary>
      <remarks>
        <para>To create a new section, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.CreateSectionBefore"/>.</para>
        <para>To get an existing section, use <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Sections"/>.</para>
        <para>The following sample shows you how to get the add a new section to a document and how to get the first section of a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Add a new section to a document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Section sect = doc.CreateSectionAfter();

          //--- Get the first section of a document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Section sec1 = doc.Sections[0];
        </code>
          <br/>
          <code>

          '--- Add a new section to a document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim sect As Section = doc.CreateSectionAfter()

          '--- Get the first section of a document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim sect As Section = doc.Sections(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.GetHeader(SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType)">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object that represents the header of the specified type for this section. The header is returned as a editable element. There are 4 types of headers:</para>
        </summary>
        <param name="type">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType"/> object that represents the type of header to return.</para>
        </param>
        <returns>
          <para>An <c>Element</c> object that represents the header of the specified type for this section.</para>
        </returns>
        <example>
          <para>
            <code>

          Element oElement = oSection.GetHeader(Section.HeaderFooterType.All);
        </code>
            <br/>
            <code>

          Dim oElement As Element = oSection.GetHeader(Section.HeaderFooterType.All)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.GetFooter(SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType)">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> object that represents the footer of the specified type for this section. The footer is returned as a editable element. There are 4 types of footers:</para>
        </summary>
        <param name="type">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType"/> object that represents the type of footer to return.</para>
        </param>
        <returns>
          <para>An <c>Element</c> object that represents the footer of the specified type for this section.</para>
        </returns>
        <example>
          <para>
            <code>

          Element oElement = oSection.GetFooter(Section.HeaderFooterType.All);
        </code>
            <br/>
            <code>

          Dim oElement As Element = oSection.GetFooter(Section.HeaderFooterType.All)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.GetBorder(SoftArtisans.OfficeWriter.WordWriter.Border.Location)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border"/> object that represents the border of this section at the specified location. You can use the returned object to manipulate the borders for this section. Valid locations: Top, Left, Bottom, Right</para>
        </summary>
        <param name="location"/>
        <returns>
          <para>A <c>Border</c> object that represents the border of this section at the specified location.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and shading... &gt; Borders tab</para>
        </remarks>
        <example>
          <para>
            <code>

          Border oBorder = oSection.GetBorder(Border.Location.Top);
        </code>
            <br/>
            <code>

          Dim oBorder As Border = oSection.GetBorder(Border.Location.Top)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.Break">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType"/> object that represents the type of break (before) this section. There are 5 types of breaks: Continuous, Column, Page, EvenPage, and OddPage.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Layout tab &gt; Section section &gt; Section start:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Break
          Section.BreakType oBreak = oSection.Break;

          //--- Set BreakType
          oSection.Break = Section.BreakType.Column;
        </code>
            <br/>
            <code>

          '--- Return Break
          Dim oBreakType As Section.BreakType = oSection.Break

          '--- Set BreakType
          oSection.Break = Section.BreakType.Column
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.HasTitlePage">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not this section has a title page. This can affect page numbering and the appearance of headers and footers.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return HasTitlePage
          bool hasTitlePage = oSection.HasTitlePage;


          //--- Set HasTitlePage
          oSection.HasTitlePage = true;
        </code>
            <br/>
            <code>

          '--- Return HasTitlePage
          Dim hasTitlePage As Boolean = oSection.HasTitlePage

          '--- Set HasTitlePage
          oSection.HasTitlePage = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PageNumberFormat">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat"/> object that represents the page number format for this section. There are 5 type of page number formats:</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Insert menu &gt; Page Numbers... &gt; Format... button &gt; Number format:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PageNumberFormat
          Section.NumberFormat oPageNumberFormat = oSection.PageNumberFormat;

          //--- Set PageNumberFormat
          oSection.PageNumberFormat = Section.NumberFormat.Arabic;
        </code>
            <br/>
            <code>

          '--- Return PageNumberFormat
          Dim oPageNumberFormat As Section.NumberFormat = oSection.PageNumberFormat

          '--- Set PageNumberFormat
          oSection.PageNumberFormat = Section.NumberFormat.Arabic
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.Unlocked">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not this section is unlocked.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Unlocked
          bool unlocked = oSection.Unlocked;

          //--- Set Unlocked
          oSection.Unlocked = false;
        </code>
            <br/>
            <code>

          '--- Return Unlocked
          Dim unlocked As Boolean = oSection.Unlocked

          '--- Set Unlocked
          oSection.Unlocked = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.RestartPageNum">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not page numbering will restart at the beginning of this section.</para>
        </summary>
        <remarks>
          <para>This is set to false by default (it will continue numbering pages from the previous section).</para>
          <para>MS Word equivalent: Insert menu &gt; Page Numbers... &gt; Format... button &gt; Page numbering section &gt; Continue from previous section ( false) OR Start at: (true)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return RestartPageNum
          bool restartPageNum = oSection.RestartPageNum;

          //--- Set RestartPageNum
          oSection.RestartPageNum = true;
        </code>
            <br/>
            <code>

          '--- Return RestartPageNum
          Dim restartPageNum As Boolean = oSection.RestartPageNum

          '--- Set RestartPageNum
          oSection.RestartPageNum = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumberingType">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering"/> object that represents the line numbering restart policy for this section. There are 3 options:</para>
        </summary>
        <remarks>
          <para>This setting defaults to PerPage (line numbering restarts for each page).</para>
          <para>MS Word equivalent: File &gt; Page Setup... &gt; Layout tab &gt; Preview section (make sure Apply To: This Section is selected) &gt; Line Numbers... button &gt; Numbering section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineNumbering
          Section.LineNumbering oLineNumbering = oSection.LineNumberingType;

          //--- Set LineNumbering
          oSection.LineNumberingType = Section.LineNumbering.Restart;
        </code>
            <br/>
            <code>

          '--- Return LineNumbering
          Dim oLineNumbering As Section.LineNumbering = oSection.LineNumberingType

          '--- Set LineNumbering
          oSection.LineNumberingType = Section.LineNumbering.Restart
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumModulus">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the line numbering modulus. This setting is used to set whether line numbers display on every line, every 2nd line, etc. Setting this to 0 (zero) will display no line numbers. Setting this to 1 will display a number by every line. Setting this to 2 will display a number by every 2nd line, etc.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File &gt; Page Setup... &gt; Layout tab &gt; Preview section (make sure Apply To: This Section is selected) &gt; Line Numbers... button &gt; Count by:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineNumModulus
          int lineNumModulus = oSection.LineNumModulus;

          //--- Set LineNumModulus
          oSection.LineNumModulus = 2;
        </code>
            <br/>
            <code>

          '--- Return LineNumModulus
          Dim lineNumModulus As Integer = oSection.LineNumModulus

          '--- Set LineNumModulus
          oSection.LineNumModulus = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumberX">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the x position of line numbers in twips. One twip = (1/20 pt) or ( 1/1440 in)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File &gt; Page Setup... &gt; Layout tab &gt; Preview section (make sure Apply To: This Section is selected) &gt; Line Numbers... button &gt; From text:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LineNumberX
          int lineNumberX = oSection.LineNumberX;

          //--- Set LineNumberX to .2 inches
          oSection.LineNumberX = 288;
        </code>
            <br/>
            <code>

          '--- Return LineNumberX
          Dim lineNumberX As Integer = oSection.LineNumberX

          '--- Set LineNumberX to .2 inches
          oSection.LineNumberX = 288
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LinesBetween">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will draw vertical lines between columns.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Columns... &gt; Line between</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LinesBetween
          bool linesBetween = oSection.LinesBetween;

          //--- Set LinesBetween
          oSection.LinesBetween = true;
        </code>
            <br/>
            <code>

          '--- Return LinesBetween
          Dim linesBetween As Boolean = oSection.LinesBetween

          '--- Set LinesBetween
          oSection.LinesBetween = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PageOrientation">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation"/> object that represents the page orientation for this section. Possible values: Portrait, Landscape, Mixed</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Orientation section -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PageOrientation
          Section.Orientation oPageOrientation = oSection.PageOrientation;

          //--- Set PageOrientation
          oSection.PageOrientation = Section.Orientation.Landscape;
        </code>
            <br/>
            <code>

          '--- Return PageOrientation
          Dim oPageOrientation As Section.Orientation = oSection.PageOrientation

          '--- Set PageOrientation
          oSection.PageOrientation = Section.Orientation.Landscape
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.FirstPageNum">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the number that the page numbering starts at for this section.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Insert menu &gt; Page Numbers... &gt; Format... button &gt; Start at:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return FirstPageNum
          int firstPageNum = oSection.FirstPageNum;

          //--- Set FirstPageNum
          oSection.FirstPageNum = 2;
        </code>
            <br/>
            <code>

          '--- Return FirstPageNum
          Dim firstPageNum As Integer = oSection.FirstPageNum

          '--- Set FirstPageNum
          oSection.FirstPageNum = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.FirstLineNum">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the number that the line numbering starts at for this section.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Layout tab &gt; Line Numbers... button &gt; Start at: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return FirstLineNum
          int firstLineNum = oSection.FirstLineNum;

          //--- Set FirstLineNum
          oSection.FirstLineNum = 2;
        </code>
            <br/>
            <code>

          '--- Return FirstLineNum
          Dim firstLineNum As Integer = oSection.FirstLineNum

          '--- Set FirstLineNum
          oSection.FirstLineNum = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PageWidth">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the page width for this section in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>Page width may not be smaller than .1" (144 twips) or larger than 22" (31680 twips). Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Paper tab &gt; Paper size: section &gt; Width: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PageWidth
          int pageWidth = oSection.PageWidth;

          //--- Set PageWidth to 8.5 inches
          oSection.PageWidth = 12240;
        </code>
            <br/>
            <code>

          '--- Return PageWidth
          Dim pageWidth As Integer = oSection.PageWidth

          '--- Set PageWidth to 8.5 inches
          oSection.PageWidth = 12240
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PageHeight">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the page height for this section in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>Page height may not be smaller than .1" (144 twips) or larger than 22" (31680 twips). Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Paper tab &gt; Paper size: section &gt; Height: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PageHeight
          int pageHeight = oSection.PageHeight;

          //--- Set PageHeight to 11 inches
          oSection.PageHeight = 15840;
        </code>
            <br/>
            <code>

          '--- Return PageHeight
          Dim pageHeight As Integer = oSection.PageHeight

          '--- Set PageHeight to 11 inches
          oSection.PageHeight = 15840
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PageSize">
            <Doc>
        <summary>
          <para>Sets or returns the size of printed pages.</para>
        </summary>
        <example>
          <para>
            <code>
sect1.PageSize = Section.PagePaperSize.A4;</code>
            <br/>
            <code>
sect1.PageSize = Section.PagePaperSize.A4</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LeftMargin">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the horizontal distance of the left margin from the left edge of the page for this section. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Left: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return LeftMargin
          int leftMargin = oSection.LeftMargin;

          //--- Set LeftMargin to 1 inch
          oSection.LeftMargin = 1440;
        </code>
            <br/>
            <code>

          '--- Return LeftMargin
          Dim leftMargin As Integer = oSection.LeftMargin

          '--- Set LeftMargin to 1 inch
          oSection.LeftMargin = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.RightMargin">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the horizontal distance of the right margin from the right edge of the page for this section. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Right: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return RightMargin
          int rightMargin = oSection.RightMargin;

          //--- Set RightMargin to 1 inch
          oSection.RightMargin = 1440;
        </code>
            <br/>
            <code>

          '--- Return RightMargin
          Dim rightMargin As Integer = oSection.RightMargin

          '--- Set RightMargin to 1 inch
          oSection.RightMargin = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.TopMargin">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the vertical distance of the top margin from the top edge of the page for this section. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Top: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TopMargin
          int topMargin = oSection.TopMargin;

          //--- Set TopMargin to 1 inch
          oSection.TopMargin = 1440;
        </code>
            <br/>
            <code>

          '--- Return TopMargin
          Dim topMargin As Integer = oSection.TopMargin

          '--- Set TopMargin to 1 inch
          oSection.TopMargin = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BottomMargin">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the vertical distance of the bottom margin from the bottom edge of the page for this section. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Bottom: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return BottomMargin
          int bottomMargin = oSection.BottomMargin;

          //--- Set BottomMargin to 1 inch
          oSection.BottomMargin = 1440;
        </code>
            <br/>
            <code>

          '--- Return BottomMargin
          Dim bottomMargin As Integer = oSection.BottomMargin

          '--- Set BottomMargin to 1 inch
          oSection.BottomMargin = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.GutterWidth">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the gutter width for this section. The gutter adds space to the margin. Gutters are used when a document needs additional space to allow for binding. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>Gutter width may not be smaller than 0" (0 twips) or larger than 22" (31680 twips). Values beyond these will be automatically adjusted.</para>
          <para>MS Word equivalent: File menu &gt; Page Setup... &gt; Margins tab &gt; Gutter: -- (Make sure Apply to: This section is selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return GutterWidth
          int gutterWidth = oSection.GutterWidth;

          //--- Set GutterWidth to 1/2 inch
          oSection.GutterWidth = 720;
        </code>
            <br/>
            <code>

          '--- Return GutterWidth
          Dim gutterWidth As Integer = oSection.GutterWidth

          '--- Set GutterWidth to 1/2 inch
          oSection.GutterWidth = 720
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderY">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the y coordinate of the header measured from the top edge of the page. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return HeaderY
          int headerY = oSection.HeaderY;

          //--- Set HeaderY to 1 inch
          oSection.HeaderY = 1440;
        </code>
            <br/>
            <code>

          '--- Return HeaderY
          Dim headerY As Integer = oSection.HeaderY

          '--- Set HeaderY to 1 inch
          oSection.HeaderY = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.FooterY">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the y coordinate of the footer measured from the top edge of the page. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return FooterY
          int footerY = oSection.FooterY;

          //--- Set FooterY to 1 inch
          oSection.FooterY = 1440;
        </code>
            <br/>
            <code>

          '--- Return FooterY
          Dim footerY As Integer = oSection.FooterY

          '--- Set FooterY to 1 inch
          oSection.FooterY = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.NumColumns">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the number of columns in this section.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return NumColumns
          int numColumns = oSection.NumColumns;

          //--- Set NumColumns
          oSection.NumColumns = 2;
        </code>
            <br/>
            <code>

          '--- Return NumColumns
          Dim numColumns As Integer = oSection.NumColumns

          '--- Set NumColumns
          oSection.NumColumns = 2
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BorderAppliedTo">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea"/> object that represents where the page border will be applied to.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BorderAlwaysInFront">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not page borders for this section will always display in front of any objects it may overlap.</para>
        </summary>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BorderOffsetsFromPage">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not the padding for this section's page border will be measured from the edge of the page or from the text it surrounds.</para>
        </summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea">
            <Doc>
        <summary>
          <para>Areas that a border can be applied to for a section.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.AllButFirst">
            <Doc>
          <summary>Apply border to all but the first page in the section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.AllPages">
            <Doc>
          <summary>Apply border to all pages in section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.Document">
            <Doc>
          <summary>Apply border to all pages in section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.FirstPage">
            <Doc>
          <summary>Apply border to first page in section</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BorderArea&quot;]/Member[@signature=&quot;Section.BorderArea.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BorderArea&quot;]/Member[@signature=&quot;Section.BorderArea.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BorderArea&quot;]/Member[@signature=&quot;Section.BorderArea.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BorderArea&quot;]/Member[@signature=&quot;Section.BorderArea.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BorderArea.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BorderArea&quot;]/Member[@signature=&quot;Section.BorderArea.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType">
            <Doc>
        <summary>
          <para>Types of breaks that can preceed a section.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.Continuous">
            <Doc>
          <summary>Start this section on the first line after the previous section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.EvenPage">
            <Doc>
          <summary>Start this section on the first even page after the previous section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.OddPage">
            <Doc>
          <summary>Start this section on the first odd page after the previous section</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.Page">
            <Doc>
          <summary>Start this section on the page after the previous section</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BreakType&quot;]/Member[@signature=&quot;Section.BreakType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BreakType&quot;]/Member[@signature=&quot;Section.BreakType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BreakType&quot;]/Member[@signature=&quot;Section.BreakType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BreakType&quot;]/Member[@signature=&quot;Section.BreakType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.BreakType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.BreakType&quot;]/Member[@signature=&quot;Section.BreakType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType">
            <Doc>
        <summary>
          <para>Types of headers and footers.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.All">
            <Doc>
          <summary>Header or footer that is seen over all pages in a section.  Has the lowest precedence of any header or footer type.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.Even">
            <Doc>
          <summary>Header or footer that is seen only on even pages.  Takes precedence over "All" headers and footers</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.FirstPage">
            <Doc>
          <summary>Header or footer that is seen on only the first page.  Takes precedence over "Odd" headers and footers.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.Odd">
            <Doc>
          <summary>Header or footer that is seen only on odd pages.  Takes precedence over "All" headers and footers</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.HeaderFooterType&quot;]/Member[@signature=&quot;Section.HeaderFooterType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.HeaderFooterType&quot;]/Member[@signature=&quot;Section.HeaderFooterType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.HeaderFooterType&quot;]/Member[@signature=&quot;Section.HeaderFooterType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.HeaderFooterType&quot;]/Member[@signature=&quot;Section.HeaderFooterType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.HeaderFooterType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.HeaderFooterType&quot;]/Member[@signature=&quot;Section.HeaderFooterType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering">
            <Doc>
        <summary>
          <para>Line numbering settings for a section.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.Continue">
            <Doc>
          <summary>Continue from the last line number</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.PerPage">
            <Doc>
          <summary>Restart for each page</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.Restart">
            <Doc>
          <summary>Restart the numbers on this section</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.LineNumbering&quot;]/Member[@signature=&quot;Section.LineNumbering.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.LineNumbering&quot;]/Member[@signature=&quot;Section.LineNumbering.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.LineNumbering&quot;]/Member[@signature=&quot;Section.LineNumbering.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.LineNumbering&quot;]/Member[@signature=&quot;Section.LineNumbering.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.LineNumbering.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.LineNumbering&quot;]/Member[@signature=&quot;Section.LineNumbering.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat">
            <Doc>
        <summary>
          <para>Formats for page numbers in a section.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.Arabic">
            <Doc>
          <summary>Standard Arabic Numerals</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.LetterLower">
            <Doc>
          <summary>Lower-Case Roman Alphabet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.LetterUpper">
            <Doc>
          <summary>Upper-Case Roman Alphabet</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.RomanLower">
            <Doc>
          <summary>Lower-Case Roman Numerals</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.RomanUpper">
            <Doc>
          <summary>Upper-Case Roman Numerals</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.NumberFormat&quot;]/Member[@signature=&quot;Section.NumberFormat.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.NumberFormat&quot;]/Member[@signature=&quot;Section.NumberFormat.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.NumberFormat&quot;]/Member[@signature=&quot;Section.NumberFormat.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.NumberFormat&quot;]/Member[@signature=&quot;Section.NumberFormat.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.NumberFormat.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.NumberFormat&quot;]/Member[@signature=&quot;Section.NumberFormat.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation">
            <Doc>
        <summary>
          <para>Page orientations for a section.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.Landscape">
            <Doc>
          <summary>Landscape orientation, longer horizontal dimension</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.Mixed">
            <Doc>
          <summary/>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.Portrait">
            <Doc>
          <summary>Portrait orientation, longer vertical dimension</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Orientation&quot;]/Member[@signature=&quot;Section.Orientation.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Orientation&quot;]/Member[@signature=&quot;Section.Orientation.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Orientation&quot;]/Member[@signature=&quot;Section.Orientation.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Orientation&quot;]/Member[@signature=&quot;Section.Orientation.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.Orientation.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.Orientation&quot;]/Member[@signature=&quot;Section.Orientation.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize">
            <Doc>
        <summary>
          <para>Page paper sizes that can be applied to a section. All native sizes are supported, and additional sizes are provided</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.A3">
            <Doc>
          <summary>ISO A3; 11.69" x 16.54"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.A4">
            <Doc>
          <summary>ISO A4; 8.27" x 11.69</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.A4Small">
            <Doc>
          <summary>Custom; 7.47" x 10.85"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.A5">
            <Doc>
          <summary>ISO A5; 5.83" x 8.27"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.B4">
            <Doc>
          <summary>ISO B4; 9.84" x 13.94"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.B5">
            <Doc>
          <summary>ISO B5; 7.17" x 10.12"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.CSheet">
            <Doc>
          <summary>ANSI C; 17" x 22"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Custom">
            <Doc>
          <summary>There are known issues with this enumeration.  Not recommended.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.DSheet">
            <Doc>
          <summary>22" x 22"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Envelope10">
            <Doc>
          <summary>Envelope No. 10; 9.5" x 4.13"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Envelope11">
            <Doc>
          <summary>Envelope No. 11; 10.38" x 4.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Envelope12">
            <Doc>
          <summary>Envelope No. 12; 11" x 4.75"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Envelope14">
            <Doc>
          <summary>Envelope No. 14; 11.5" x 5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Envelope9">
            <Doc>
          <summary>Envelope No. 9; 8.88" x 3.88"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeB4">
            <Doc>
          <summary>ISO B4; 9.84" x 13.9"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeB5">
            <Doc>
          <summary>ISO B5; 6.9" x 9.8"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeB6">
            <Doc>
          <summary>ISO B6 (Landscape orientation); 6.93" x 4.92"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeC3">
            <Doc>
          <summary>ISO C3; 12.76" x 18.03"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeC4">
            <Doc>
          <summary>ISO C4; 9.01" x 12.76"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeC5">
            <Doc>
          <summary>ISO C5; 6.38" x 9.01"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeC6">
            <Doc>
          <summary>ISO C6; 4.49" x 6.38"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeC65">
            <Doc>
          <summary>ISO C5 width, ISO C6 height; 4.49" x 9.01"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeDL">
            <Doc>
          <summary>Envelope DL; 4.33" x 8.67"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeItaly">
            <Doc>
          <summary>Italy envelope size; 4.33" x 9.05"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopeMonarch">
            <Doc>
          <summary>Monarch envelope size; 3.87" x 7.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.EnvelopePersonal">
            <Doc>
          <summary>Personal envelope size; 3.63" x 6.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.ESheet">
            <Doc>
          <summary>22" x 22"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Executive">
            <Doc>
          <summary>Executive; 7.25" x 10.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.FanfoldLegalGerman">
            <Doc>
          <summary>Mislabeled - Folio; 8.5" x 13"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.FanfoldStdGerman">
            <Doc>
          <summary>There are known issues with this enumeration.  Not recommended.</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.FanfoldUS">
            <Doc>
          <summary>Mislabeled - German Standard Fanfold; 8.5" x 12"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Folio">
            <Doc>
          <summary>Folio size; 8.5" x 13"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Ledger">
            <Doc>
          <summary>ANSI B Portrait (Ledger); 11" x 17"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Legal">
            <Doc>
          <summary>Legal; 8.5" x 14"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Letter">
            <Doc>
          <summary>ANSI A (Letter); 8.5" x 11"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.LetterSmall">
            <Doc>
          <summary>Letter Small; 7.68" x 10.16"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Note">
            <Doc>
          <summary>Letter; 8.5" x 11"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Quarto">
            <Doc>
          <summary>Quartro size; 8" x 10"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Statement">
            <Doc>
          <summary>Statement; 5.5" x 8.5"</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Tabloid">
            <Doc>
          <summary>ANSI B Landscape (Tabloid); 17" x 11"</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.PagePaperSize&quot;]/Member[@signature=&quot;Section.PagePaperSize.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.PagePaperSize&quot;]/Member[@signature=&quot;Section.PagePaperSize.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.PagePaperSize&quot;]/Member[@signature=&quot;Section.PagePaperSize.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.PagePaperSize&quot;]/Member[@signature=&quot;Section.PagePaperSize.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Section.PagePaperSize.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Section&quot;]/Member[@signature=&quot;Section.PagePaperSize&quot;]/Member[@signature=&quot;Section.PagePaperSize.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up
            character runs if they span special characters like end of table cell markers or end of
            paragraph markers. This method skips the end of section character marker.
            </remarks>
            <param name="startIndex">The index in the document of the first character to include
            </param>
            <param name="endIndex">The index in the document of the first character not to include
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.type">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.pushbackText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.pushbackParagraphs">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionModel.adjustForSectionInsert(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.BottomBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.HasTitlePageInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.LeftBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.LeftMarginInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.PageWidthInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.RightBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.RightMarginInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.TopBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SectionModel.HeadersAndFooters">
            <summary>
            All the headers and footers that actually exist in this section.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType">
            <summary> Section Properties.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Size">
            <summary> Size of record (excluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Bkc">
            <summary> Get the bkc field for the SEP record.</summary>
            <summary> Set the bkc field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FTitlePage">
            <summary> Get the fTitlePage field for the SEP record.</summary>
            <summary> Set the fTitlePage field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FAutoPgn">
            <summary> Get the fAutoPgn field for the SEP record.</summary>
            <summary> Set the fAutoPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NfcPgn">
            <summary> Get the nfcPgn field for the SEP record.</summary>
            <summary> Set the nfcPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FUnlocked">
            <summary> Get the fUnlocked field for the SEP record.</summary>
            <summary> Set the fUnlocked field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.CnsPgn">
            <summary> Get the cnsPgn field for the SEP record.</summary>
            <summary> Set the cnsPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FPgnRestart">
            <summary> Get the fPgnRestart field for the SEP record.</summary>
            <summary> Set the fPgnRestart field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FEndNote">
            <summary> Get the fEndNote field for the SEP record.</summary>
            <summary> Set the fEndNote field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Lnc">
            <summary> Get the lnc field for the SEP record.</summary>
            <summary> Set the lnc field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.GrpfIhdt">
            <summary> Get the grpfIhdt field for the SEP record.</summary>
            <summary> Set the grpfIhdt field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NLnnMod">
            <summary> Get the nLnnMod field for the SEP record.</summary>
            <summary> Set the nLnnMod field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaLnn">
            <summary> Get the dxaLnn field for the SEP record.</summary>
            <summary> Set the dxaLnn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaPgn">
            <summary> Get the dxaPgn field for the SEP record.</summary>
            <summary> Set the dxaPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaPgn">
            <summary> Get the dyaPgn field for the SEP record.</summary>
            <summary> Set the dyaPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FLBetween">
            <summary> Get the fLBetween field for the SEP record.</summary>
            <summary> Set the fLBetween field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FBidi">
            <summary> Get the fBidi field for the SEP record.</summary>
            <summary> Set the fBidi field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Vjc">
            <summary> Get the vjc field for the SEP record.</summary>
            <summary> Set the vjc field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DmBinFirst">
            <summary> Get the dmBinFirst field for the SEP record.</summary>
            <summary> Set the dmBinFirst field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DmBinOther">
            <summary> Get the dmBinOther field for the SEP record.</summary>
            <summary> Set the dmBinOther field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DmPaperReq">
            <summary> Get the dmPaperReq field for the SEP record.</summary>
            <summary> Set the dmPaperReq field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.BrcTop">
            <summary> Get the brcTop field for the SEP record.</summary>
            <summary> Set the brcTop field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.BrcLeft">
            <summary> Get the brcLeft field for the SEP record.</summary>
            <summary> Set the brcLeft field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.BrcBottom">
            <summary> Get the brcBottom field for the SEP record.</summary>
            <summary> Set the brcBottom field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.BrcRight">
            <summary> Get the brcRight field for the SEP record.</summary>
            <summary> Set the brcRight field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FPropRMark">
            <summary> Get the fPropRMark field for the SEP record.</summary>
            <summary> Set the fPropRMark field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.IbstPropRMark">
            <summary> Get the ibstPropRMark field for the SEP record.</summary>
            <summary> Set the ibstPropRMark field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DttmPropRMark">
            <summary> Get the dttmPropRMark field for the SEP record.</summary>
            <summary> Set the dttmPropRMark field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxtCharSpace">
            <summary> Get the dxtCharSpace field for the SEP record.</summary>
            <summary> Set the dxtCharSpace field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaLinePitch">
            <summary> Get the dyaLinePitch field for the SEP record.</summary>
            <summary> Set the dyaLinePitch field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Clm">
            <summary> Get the clm field for the SEP record.</summary>
            <summary> Set the clm field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Unused2">
            <summary> Get the unused2 field for the SEP record.</summary>
            <summary> Set the unused2 field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DmOrientPage">
            <summary> Get the dmOrientPage field for the SEP record.</summary>
            <summary> Set the dmOrientPage field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.IHeadingPgn">
            <summary> Get the iHeadingPgn field for the SEP record.</summary>
            <summary> Set the iHeadingPgn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.PgnStart">
            <summary> Get the pgnStart field for the SEP record.</summary>
            <summary> Set the pgnStart field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.LnnMin">
            <summary> Get the lnnMin field for the SEP record.</summary>
            <summary> Set the lnnMin field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.WTextFlow">
            <summary> Get the wTextFlow field for the SEP record.</summary>
            <summary> Set the wTextFlow field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Unused3">
            <summary> Get the unused3 field for the SEP record.</summary>
            <summary> Set the unused3 field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.PgbProp">
            <summary> Get the pgbProp field for the SEP record.</summary>
            <summary> Set the pgbProp field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Unused4">
            <summary> Get the unused4 field for the SEP record.</summary>
            <summary> Set the unused4 field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.XaPage">
            <summary> Get the xaPage field for the SEP record.</summary>
            <summary> Set the xaPage field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.YaPage">
            <summary> Get the yaPage field for the SEP record.</summary>
            <summary> Set the yaPage field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.XaPageNUp">
            <summary> Get the xaPageNUp field for the SEP record.</summary>
            <summary> Set the xaPageNUp field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.YaPageNUp">
            <summary> Get the yaPageNUp field for the SEP record.</summary>
            <summary> Set the yaPageNUp field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaLeft">
            <summary> Get the dxaLeft field for the SEP record.</summary>
            <summary> Set the dxaLeft field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaRight">
            <summary> Get the dxaRight field for the SEP record.</summary>
            <summary> Set the dxaRight field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaTop">
            <summary> Get the dyaTop field for the SEP record.</summary>
            <summary> Set the dyaTop field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaBottom">
            <summary> Get the dyaBottom field for the SEP record.</summary>
            <summary> Set the dyaBottom field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DzaGutter">
            <summary> Get the dzaGutter field for the SEP record.</summary>
            <summary> Set the dzaGutter field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaHeaderTop">
            <summary> Get the dyaHdrTop field for the SEP record.</summary>
            <summary> Set the dyaHdrTop field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DyaHeaderBottom">
            <summary> Get the dyaHdrBottom field for the SEP record.</summary>
            <summary> Set the dyaHdrBottom field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FEvenlySpaced">
            <summary> Get the fEvenlySpaced field for the SEP record.</summary>
            <summary> Set the fEvenlySpaced field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Unused5">
            <summary> Get the unused5 field for the SEP record.</summary>
            <summary> Set the unused5 field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaColumns">
            <summary> Get the dxaColumns field for the SEP record.</summary>
            <summary> Set the dxaColumns field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.RgdxaColumn">
            <summary> Get the rgdxaColumn field for the SEP record.</summary>
            <summary> Set the rgdxaColumn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DxaColumnWidth">
            <summary> Get the dxaColumnWidth field for the SEP record.</summary>
            <summary> Set the dxaColumnWidth field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.DmOrientFirst">
            <summary> Get the dmOrientFirst field for the SEP record.</summary>
            <summary> Set the dmOrientFirst field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FLayout">
            <summary> Get the fLayout field for the SEP record.</summary>
            <summary> Set the fLayout field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Unused6">
            <summary> Get the unused6 field for the SEP record.</summary>
            <summary> Set the unused6 field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.OlstAnm">
            <summary> Get the olstAnm field for the SEP record.</summary>
            <summary> Set the olstAnm field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.RsidProp">
            <summary> Get the rsidProp field for the SEP record.</summary>
            <summary> Set the rsidProp field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.RsidRMDel">
            <summary> Get the rsidRMDel field for the SEP record.</summary>
            <summary> Set the rsidRMDel field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FFacingCol">
            <summary> Get the fFacingCol field for the SEP record.</summary>
            <summary> Set the fFacingCol field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FRTLGutter">
            <summary> Get the fRTLGutter field for the SEP record.</summary>
            <summary> Set the fRTLGutter field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.FHasOldProps">
            <summary> Get the fHasOldProps field for the SEP record.</summary>
            <summary> Set the fHasOldProps field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Rsid">
            <summary> Get the rsid field for the SEP record.</summary>
            <summary> Set the rsid field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Fpc">
            <summary> Get the fpc field for the SEP record.</summary>
            <summary> Set the fpc field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.RncFtn">
            <summary> Get the rncFtn field for the SEP record.</summary>
            <summary> Set the rncFtn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.Epc">
            <summary> Get the epc field for the SEP record.</summary>
            <summary> Set the epc field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.RncEdn">
            <summary> Get the rncEdn field for the SEP record.</summary>
            <summary> Set the rncEdn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NFtn">
            <summary> Get the nFtn field for the SEP record.</summary>
            <summary> Set the nFtn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NfcFtnRef">
            <summary> Get the nfcFtnRef field for the SEP record.</summary>
            <summary> Set the nfcFtnRef field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NEdn">
            <summary> Get the nEdn field for the SEP record.</summary>
            <summary> Set the nEdn field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.NfcEdnRef">
            <summary> Get the nfcEdnRef field for the SEP record.</summary>
            <summary> Set the nfcEdnRef field for the SEP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.PgbApplyTo">
            <returns>  the pgbApplyTo field value.
            </returns>
            <summary> Sets the pgbApplyTo field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.PgbPageDepth">
            <returns>  the pgbPageDepth field value.
            </returns>
            <summary> Sets the pgbPageDepth field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.PgbOffsetFrom">
            <returns>  the pgbOffsetFrom field value.
            </returns>
            <summary> Sets the pgbOffsetFrom field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SEPAbstractType.CcolM1">
            <summary> Get the ccolM1 field for the SEP record.
            This is the number of columns in a section minus 1
            TODO: does this need to be virtual? That seems misleading</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionProperties.resetColumnWidthsAndSpacing(System.Int32,System.Int32)">
            <summary>preserve width and column spacing where possible</summary>
            @param oldNum
            @param num
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SectionSprmUncompressor.unCompressSEPOperation(SoftArtisans.OfficeWriter.WordWriter.SectionProperties,SoftArtisans.OfficeWriter.WordWriter.SprmOperation)">
            <summary> Used in decompression of a sepx. This performs an operation defined by
            a single sprm.
            
            </summary>
            <param name="newSEP">The SectionProperty to perfrom the operation on.
            </param>
            <param name="operand">The operation to perform.
            </param>
            <param name="param">The operation's parameter.
            </param>
            <param name="varParam">The operation variable length parameter.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SectionTable">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Shading">
            <Doc>
      <summary>
        <para>This class is represents background shading for text, table cells, etc.</para>
      </summary>
      <remarks>
        <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab</para>
        <para>The following example demonstrates how to get the shading object of a paragraph.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Paragraph paragraph = doc.InsertParagraphAfter(null);
          Shading shad = paragraph.Formatting.Shading;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim paragraph As Paragraph = doc.InsertParagraphAfter(Nothing)
          Dim shad As Shading = paragraph.Formatting.Shading
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Shading.ForegroundColor">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:System.Drawing.Color"/> object that represents the foreground color. This is the alternate color that is used with patterns.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab &gt; Patterns section &gt; Color:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ForegroundColor
          Color clr = shad.ForegroundColor;

          //--- Set ForegroundColor
          shad.ForegroundColor = Color.Yellow;
        </code>
            <br/>
            <code>

          '--- Return ForegroundColor
          Dim clr As Color = shad.ForegroundColor

          '--- Set ForegroundColor
          shad.ForegroundColor = Color.Yellow
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Shading.BackgroundColor">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:System.Drawing.Color"/> object that represents the background (fill) color. This is the main color used for shading.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab &gt; Fill section</para>
        </remarks>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Shading.Pattern">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern"/> object that represents the shading pattern used.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab &gt; Patterns section &gt; Style:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Pattern
          ShadingShadingPattern shadPattern = shad.Pattern;

          //--- Set Pattern
          shad.Pattern = Shading.ShadingPattern.DarkVertical;
        </code>
            <br/>
            <code>

          '--- Return Pattern
          Dim shadPattern As Shading.ShadingPattern = shad.Pattern

          '--- Set Pattern
          shad.Pattern = Shading.ShadingPattern.DarkVertical
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern">
            <Doc>
        <summary>
          <para>Shading patterns that can be applied to an element.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Auto">
            <Doc>
          <summary>Defaults to normal background shading</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.BackwardDiagonal">
            <Doc>
          <summary>Backward diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Cross">
            <Doc>
          <summary>Crossing vertical and horizontal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkBackwardDiagonal">
            <Doc>
          <summary>Dark Backward diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkCross">
            <Doc>
          <summary>Dark crossing vertical and horizontal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkDiagonalCross">
            <Doc>
          <summary>Dark diagonal crossing lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkForwardDiagonal">
            <Doc>
          <summary>Dark forward diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkHorizontal">
            <Doc>
          <summary>Dark horizontal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DarkVertical">
            <Doc>
          <summary>Dark vertical lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.DiagonalCross">
            <Doc>
          <summary>Crossing diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.ForwardDiagonal">
            <Doc>
          <summary>Forward diagonal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Horizontal">
            <Doc>
          <summary>Horizontal lines</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent10">
            <Doc>
          <summary>10% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent12half">
            <Doc>
          <summary>12.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent15">
            <Doc>
          <summary>15% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent17half">
            <Doc>
          <summary>17.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent20">
            <Doc>
          <summary>20% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent22half">
            <Doc>
          <summary>22.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent25">
            <Doc>
          <summary>25% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent27half">
            <Doc>
          <summary>27.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent2half">
            <Doc>
          <summary>2.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent30">
            <Doc>
          <summary>30% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent32half">
            <Doc>
          <summary>32.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent35">
            <Doc>
          <summary>35% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent37half">
            <Doc>
          <summary>37.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent40">
            <Doc>
          <summary>40% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent42half">
            <Doc>
          <summary>42.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent45">
            <Doc>
          <summary>45% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent47half">
            <Doc>
          <summary>47.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent5">
            <Doc>
          <summary>5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent50">
            <Doc>
          <summary>50% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent52half">
            <Doc>
          <summary>52.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent55">
            <Doc>
          <summary>55% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent57half">
            <Doc>
          <summary>57.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent60">
            <Doc>
          <summary>60% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent62half">
            <Doc>
          <summary>62.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent65">
            <Doc>
          <summary>65% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent67half">
            <Doc>
          <summary>67.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent70">
            <Doc>
          <summary>70% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent72half">
            <Doc>
          <summary>72.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent75">
            <Doc>
          <summary>75% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent77half">
            <Doc>
          <summary>77.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent7half">
            <Doc>
          <summary>7.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent80">
            <Doc>
          <summary>80% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent82half">
            <Doc>
          <summary>82.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent85">
            <Doc>
          <summary>85% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent87half">
            <Doc>
          <summary>87.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent90">
            <Doc>
          <summary>90% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent92half">
            <Doc>
          <summary>92.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent95">
            <Doc>
          <summary>95% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent97">
            <Doc>
          <summary>dotted background</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Percent97half">
            <Doc>
          <summary>97.5% background color saturation</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Solid">
            <Doc>
          <summary>Solid background</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Vertical">
            <Doc>
          <summary>Vertical lines</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.ShadingPattern&quot;]/Member[@signature=&quot;Shading.ShadingPattern.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.ShadingPattern&quot;]/Member[@signature=&quot;Shading.ShadingPattern.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.ShadingPattern&quot;]/Member[@signature=&quot;Shading.ShadingPattern.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.ShadingPattern&quot;]/Member[@signature=&quot;Shading.ShadingPattern.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Shading.ShadingPattern.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Shading&quot;]/Member[@signature=&quot;Shading.ShadingPattern&quot;]/Member[@signature=&quot;Shading.ShadingPattern.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.toShort">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.serialize97(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.serialize2K3(System.SByte[],System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.convertTo2K3">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.Size">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor97.Empty">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.ShadowManager">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ShortField">
            <summary> representation of a short (16-bit) field at a fixed location within
            a byte array
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.Int16)">
            <summary> construct the ShortField with its offset into its containing
            byte array and initialize its value
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.SByte[])">
            <summary> Construct the ShortField with its offset into its containing
            byte array and initialize its value from its byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="data">the byte array to read the value from
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is not
            within the range of 0..(data.length - 1)
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.#ctor(System.Int32,System.Int16,System.SByte[])">
            <summary> construct the ShortField with its offset into its containing
            byte array, initialize its value, and write its value to its
            byte array
            
            </summary>
            <param name="offset">of the field within its byte array
            </param>
            <param name="value">the initial value
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if offset is negative
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.Set(System.Int16,System.SByte[])">
            <summary> set the ShortField's current value and write it to a byte array
            
            </summary>
            <param name="value">to be set
            </param>
            <param name="data">the byte array to write the value to
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.readFromBytes(System.SByte[])">
            <summary> set the value from its offset into an array of bytes
            
            </summary>
            <param name="data">the byte array from which the value is to be read
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.readFromStream(System.IO.Stream)">
            <summary> set the value from an InputStream
            
            </summary>
            <param name="stream">the InputStream from which the value is to be
            read
            
            </param>
            <exception cref="!:BufferUnderrunException"> if there is not enough data
            available from the InputStream
            </exception>
            <exception cref="T:System.IO.IOException"> if an IOException is thrown from reading
            the InputStream
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.writeToBytes(System.SByte[])">
            <summary> write the value out to an array of bytes at the appropriate
            offset
            
            </summary>
            <param name="data">the array of bytes to which the value is to be
            written
            
            </param>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if the offset is out
            of range
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ShortField.ToString">
            <summary> return the value as a String
            
            </summary>
            <returns> the value as a String
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SimpleMetaData">
            <summary> SimpleMetaData: some ResultSet methods
            require that we return or accept an object of type ResultSetMetaData.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.m_OwningResultSet">
            <summary>m_OwningResultSet is so that we can find out the current row
            in a Java array, because for getColumnType on java arrays, the
            type of the object can be different on different rows for the same
            column:</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.ToString">
            <summary>
            This is a utility method, mostly for debugging output:
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.#ctor">
            <summary>no-args constructor, in case we need it for compatibility with
            serialization or something:
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.#ctor(System.Data.DataTable,System.Int32,System.String[])">
            <summary> The real constructor:</summary>
            <param name="owningResultSet">reference to owning ResultSet
            </param>
            <param name="colCount">number of columns
            </param>
            <param name="colNames">array of columns names: need not be same size
            as given in colCount, excess columns are permitted.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getCatalogName(System.Int32)">
            <summary> All other methods are Dummy definitions for SimpleMetaData:
            so that this will be accepted as a MetaData implementation.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getColumnName(System.Int32)">
            <summary> Accessor for column Name.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SimpleMetaData.getColumnType(System.Int32)">
            <summary> Accessor for column Type.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SingleRowDataSourceWrapper.#ctor(System.Data.DataSet)">
            Constructor takes Dataset
            Similar to DataSourceWrapper(aDataSet.get_Tables.get_Item(0))
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SingleRowDataSourceWrapper.#ctor(System.Data.DataTable)">
            Constructor takes DataTable
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallBlockTableReader">
            <summary> This class implements reading the small document block list from an
            existing file
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableReader.getSmallDocumentBlocks(SoftArtisans.OfficeWriter.Shared.RawDataBlockList,SoftArtisans.OfficeWriter.Shared.RootProperty,System.Int32)">
            <summary> fetch the small document block list from an existing file
            
            </summary>
            <param name="blockList">the raw data from which the small block table
            will be extracted
            </param>
            <param name="root">the root property (which contains the start block
            and small block table size)
            </param>
            <param name="sbatStart">the start block of the SBAT
            
            </param>
            <returns> the small document block list
            
            </returns>
            <exception cref="!:IOException">
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter">
            <summary> This class implements storage for writing the small blocks used by
            small documents.
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.#ctor(System.Collections.Generic.IEnumerable{SoftArtisans.OfficeWriter.Shared.BATManagedAndBlockWritable},SoftArtisans.OfficeWriter.Shared.RootProperty)">
            <summary> Creates new SmallBlockTable
            
            </summary>
            <param name="documents">a List of POIFSDocument instances
            </param>
            <param name="root">the Filesystem's root property
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.countBlocks">
            <summary> Return the number of BigBlock's this instance uses
            
            </summary>
            <returns> count of BigBlock instances
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.setStartBlock(System.Int32)">
            <summary> Set the start block for this instance
            
            </summary>
            <param name="index">index into the array of BigBlock instances making
            up the the filesystem
            
            </param>
            <param name="start_block">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
            <exception cref="T:System.IO.IOException"> on problems writing to the specified
            stream
            </exception>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.SBATBlockCount">
            <summary> Get the number of SBAT blocks
            
            </summary>
            <returns> number of SBAT big blocks
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallBlockTableWriter.SBAT">
            <summary> Get the SBAT
            
            </summary>
            <returns> the Small Block Allocation Table
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock">
            <summary> Storage for documents that are too small to use regular
            DocumentBlocks for their data
            
            </summary>
            <author>   Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.convert(System.SByte[],System.Int32)">
            <summary> convert a single long array into an array of SmallDocumentBlock
            instances
            
            </summary>
            <param name="array">the byte array to be converted
            </param>
            <param name="size">the intended size of the array (which may be smaller)
            
            </param>
            <returns> an array of SmallDocumentBlock instances, filled from
            the array
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.fill(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.Shared.BlockWritable})">
            <summary> fill out a List of SmallDocumentBlocks so that it fully occupies
            a set of big blocks
            
            </summary>
            <param name="blocks">the List to be filled out
            
            </param>
            <returns> number of big blocks the list encompasses
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.convert(SoftArtisans.OfficeWriter.Shared.BlockWritable[],System.Int32)">
            <summary> Factory for creating SmallDocumentBlocks from DocumentBlocks
            
            </summary>
            <param name="store">the original DocumentBlocks
            </param>
            <param name="size">the total document size
            
            </param>
            <returns> an array of new SmallDocumentBlocks instances
            
            </returns>
            <exception cref="T:System.IO.IOException"> on errors reading from the DocumentBlocks
            </exception>
            <exception cref="!:ArrayIndexOutOfBoundsException"> if, somehow, the store
            contains less data than size indicates
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.extract(SoftArtisans.OfficeWriter.Shared.ListManagedBlock[])">
            <summary> create a list of SmallDocumentBlock's from raw data
            
            </summary>
            <param name="blocks">the raw data containing the SmallDocumentBlock
            data
            
            </param>
            <returns> a List of SmallDocumentBlock's extracted from the input
            
            </returns>
            <exception cref="T:System.IO.IOException">
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.read(SoftArtisans.OfficeWriter.Shared.BlockWritable[],System.SByte[],System.Int32)">
            <summary> read data from an array of SmallDocumentBlocks
            
            </summary>
            <param name="blocks">the blocks to read from
            </param>
            <param name="buffer">the buffer to write the data into
            </param>
            <param name="offset">the offset into the array of blocks to read from
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.calcSize(System.Int32)">
            <summary> Calculate the storage size of a set of SmallDocumentBlocks
            
            </summary>
            <param name="size">number of SmallDocumentBlocks
            
            </param>
            <returns> total size
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.writeBlocks(System.IO.Stream)">
            <summary> Write the storage to an OutputStream
            
            </summary>
            <param name="stream">the OutputStream to which the stored data should
            be written
            
            </param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock.Data">
            <summary> Get the data from the block
            
            </summary>
            <returns> the block's data as a byte array
            
            </returns>
            <exception cref="T:System.IO.IOException"> if there is no data
            </exception>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlockList">
            <summary> A list of SmallDocumentBlocks instances, and methods to manage the list
            
            </summary>
            <author>  Marc Johnson (mjohnson at apache dot org)
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SmallDocumentBlockList.#ctor(System.Collections.Generic.List{SoftArtisans.OfficeWriter.Shared.SmallDocumentBlock})">
            <summary> Constructor SmallDocumentBlockList
            
            </summary>
            <param name="blocks">a list of SmallDocumentBlock instances
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SpecialRangeModel">
            <summary> This class is used to represent a Range that is outside of the normal
            document. Used to insert special characters that represent border areas such
            as delimiters for headers and footers. This class overrides the normal
            behavior of extending section ranges when text is inserted.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SplittableBounds">
            <summary>
            A bounded region, with functions to allow breaking it up
            
            NOTE: FragmentedMemoryStream does some very similar stuff. Maybe we can share code?
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SplittableBounds.bounds">
            <summary>
            Bounds is not guaranteed to be in order
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SplittableBounds.Whittle(System.Int32,System.Int32)">
            <summary>
            Hollow out region between begin and end, inclusive
            </summary>
            <param name="begin"></param>
            <param name="end"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SplittableBounds.VerifyNoOverlap">
            <summary>
            Returns true if there is no overlap, else false
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1">
            <summary>
            A list kind of similar to <see cref="T:SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList`1"/>, but designed to enable
            storing the last element of the list and then splitting off everything after it later.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1.Split(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList{`0}.Pointer)">
            <summary>
            Splits this list at the given location, returning everything after said location.
            </summary>
            <param name="location"></param>
            <returns>A list containing everything after the given location.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1.Equals(System.Object)">
            <summary>
            Determines if this list has the same objects as another <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1"/>
            .
            </summary>
            <remarks>This calls <see cref="M:System.Object.Equals(System.Object)"/> on the contained elements.
            </remarks>
            <param name="obj">Another <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1"/></param>
            <returns><c>true</c> if this list and the given list have the same objects in the same
            order.</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1.Empty">
            <summary>
            <c>true</c> if there aren't any elements in this list.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1.Pointer.Tail">
            <summary>
            When you split a list, this will be the tail of the first list
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.SplittingList`1.Pointer.LastBeforeTail">
            <summary>
            When you split a list this will be the second to last item of the first list
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SprmBuffer.Istd">
            <summary> Only applies for paragraph properties
            
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SprmIterator">
            <summary> This class is used to iterate through a list of sprms from a Word 97/2000/XP
            document.
            </summary>
            <author>  Ryan Ackley
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SprmOperation">
            <summary> This class is used to represent a sprm operation from a Word 97/2000/XP
            document.
            </summary>
            <author>  Ryan Ackley
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper">
            A wrapper that takes a SqlDataReader.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.#ctor(System.Data.SqlClient.SqlDataReader)">
            Takes a DataReader and extracts the meta data.
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.next">
             Advances to the next record in the data source
             @return	true if successful
            			false if at the end of data source already
             @throws	Nothing
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.rewind">
            DataReaders are forward-only!  Throws and exception.
            @throws always, because DataReader is forward-only.
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.AfterLast">
            @return "EOF" state, like java ResultSet.isAfterLast().
            @throws  provider-specific exception
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SqlDataReaderWrapper.Item(System.Int32)">
             Retrieves data for the specified column
             @param aColumnName	case-insensitive name of the column in the
            						DataSource
             @return data object, or null
             @throws Unknown, probably nothing
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.StandardDeviationPopulationBinding">
            <summary>
            A Binding to the DataRows for getting the standard deviation of all the numbers in a column,
            as an entire population. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.VarianceBaseBinding">
            <summary>
            The base class for all variance based formulas, such as Standard Deviation, Variance over
            samples, or over a population.
            </summary>
            <remarks>
            <para> Implemented using Welford's On-Line algorithm for calculating StandardDeviation.
            From:
            http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#On-line_algorithm Which
            cites:  # ^ Donald E. Knuth (1998). The Art of Computer Programming, volume 2: Seminumerical
            Algorithms, 3rd edn., p. 232. Boston: Addison-Wesley. Which cites: # ^ B. P. Welford
            (1962)."Note on a method for calculating corrected sums of squares and products".
            Technometrics 4(3):419–420.</para>
            <para>A comparison, and explanation as to why I went with Welford's Algorithm can be found
            at svn revision: 47084</para>
            </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.StandardDeviationSampleBinding">
            <summary>
            A Binding to the DataRows for getting the standard deviation of all the numbers in a column,
            as a sample. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StorageFactory">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002</p>
            <p>Company: </p>
            </summary>
            <author>  unascribed
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StorageFactory.getCompoundFile(System.IO.Stream,System.Boolean,SoftArtisans.OfficeWriter.Shared.ClassID)">
            <summary>
            Returns a new POIFSCompoundFile object
            </summary>
            <param name="aInStream"></param>
            <param name="isInput"></param>
            <param name="rootClassId">true if the root class id should be excel, false if it should be word</param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamCopyAdaptor">
            <summary> Summary description for StreamCopyAdaptor.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamFromZipStream">
            <summary>
            This stream encapsulates an internal stream from a ZipFile. If you seek to 0, it resets the ZipFile stream
            to the correct file.
            
            NOTE: The GetInputStream() function of ZipFile returns pretty much the same Stream, except seeked to
            a different file, which means you can only access one file in a ZipFile at a time. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.StreamNavigator">
            <summary> Summary description for StreamNavigator.
            TO DO: Should be rewritten not to use TreeMap
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StreamNavigator.addLast(SoftArtisans.OfficeWriter.WordWriter.WordRecordInterface)">
            <summary> adds the record to the end of the current stream</summary>
            <returns> absolute offset of the added record in the stream
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.StreamSupportClass">
            <summary>
            This is a collection of functions which call a specific read (or available, etc) function
            in each object. They can't overload the .NET Read method because it takes unsigned bytes and this
            requires signed bytes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDUN(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            This piece of code is repeated everywhere. It calls the "read" function if it can.
            
            BDUN stands for BlockingInputStream, DocumentInputStream, UnsyncByteArrayInputStream,
            and Navigator.
            </summary>
            <param name="sourceStream">stream to read bytes from</param>
            <param name="target">sbyte array to fill</param>
            <param name="start">starting point in array</param>
            <param name="count">count of bytes to write</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDU(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>
            BDU stands for BlockingInputStream, DocumentInputStream, UnsyncByteArrayInputStream.
            
            I think this is used only once. It calls the "read" function if it exists
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <param name="start"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDUN(System.IO.Stream,System.SByte[])">
            <summary>
            This is an overload of the other ReadSpecial_BDUN function, except without the offset or count parameters.
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.ReadSpecial_BDU(System.IO.Stream,System.SByte[])">
            <summary>
            This is an overload of the other ReadSpecial_BDU function, except without the offset or count parameters.
            </summary>
            <param name="sourceStream"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.Available_BDUN(System.IO.Stream)">
            <summary>
            Calls available function if it exists, else calculates it from the Length and Position properties.
            
            available() usually returns an int. This function is usually cast from an int64 to an int.
            </summary>
            <param name="sourceStream"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.StreamSupportClass.Skip_BDUN(System.IO.Stream,System.Int64)">
            <summary>
            Calls "skip" function on stream object if it exists. 
            </summary>
            <param name="inputStream"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.StringResource">
            <summary> StringResource class keeps a collection of static final strings
            that can be used throughout the application
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.StringTable.DocmContentType">
            <summary>
            <see cref="!:http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.StringTable.DocxContentType">
            <summary>
            <see cref="!:http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.StringTable.DotmContentType">
            <summary>
            <see cref="!:http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.StringTable.DotxContentType">
            <summary>
            <see cref="!:http://blogs.msdn.com/vsofficedeveloper/pages/Office-2007-Open-XML-MIME-Types.aspx"/>
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.StyleDescription">
            <summary> Comment me
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Styles">
            <Doc>
      <summary>
        <para>This class is used to store the styles of a document. It is essentially a collection of named styles.</para>
      </summary>
      <remarks>
        <para>You cannot create styles programmatically. You can only access Named Styles from an existing document. At this time, styles are read-only, but in the future you will be able to modify Named Styles using WordWriter.</para>
        <para>The following example demonstrates how to get the styles from a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Styles styls = doc.Styles;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim styls As Styles = doc.Styles
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Styles.Length">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents the number of styles in this collection.</para>
        </summary>
        <example>
          <para>
            <code>
int length = styls.Length;</code>
            <br/>
            <code>
Dim length As Integer = styls.Length</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Styles.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Styles&quot;]/Member[@signature=&quot;Styles.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Styles.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Styles&quot;]/Member[@signature=&quot;Styles.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Styles.Item(System.String)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the named style that has the specified string version of its name.</para>
        </summary>
        <param name="name">
          <para>An <c>String</c> that represents the name of the style's name to retrieve.</para>
        </param>
        <returns>
          <para>A <c>NamedStyle</c> object that represents the named style that has the specified string version of its name or the specified index.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Style by name
          NamedStyle myStyle = styls["MyStyle"];

          //--- Get Style by ID
          NamedStyle styleZero = styls[0];
        </code>
            <br/>
            <code>

          '--- Get Style by name
          Dim myStyle As NamedStyle = styls.Item("MyStyle")

          '--- Get Style by ID
          Dim styleZero As NamedStyle = styls.Item(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Styles.Item(SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the named style that has the specified built in name.</para>
        </summary>
        <param name="name">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle.BuiltIn"/> enumeration that represents the name of the style to retrieve.</para>
        </param>
        <returns>
          <para>A <c>NamedStyle</c> object that represents the named style that has the specified built in name.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Style by name
          NamedStyle myStyle = styls[NamedStyle.BuiltIn.Normal];
        </code>
            <br/>
            <code>

          '--- Get Style by name
          Dim myStyle As NamedStyle = styls.Item(NamedStyle.BuiltIn.Normal)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Styles.Item(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the named style that has the specified ID.</para>
        </summary>
        <param name="name">
          <para>An <c>int</c> that represents the ID of the style to retrieve.</para>
        </param>
        <returns>
          <para>A <c>NamedStyle</c> object that represents the named style that has the specified index.</para>
        </returns>
        <example>
          <para>
            <code>

          //--- Get Style by name
          NamedStyle myStyle = styls["MyStyle"];

          //--- Get Style by ID
          NamedStyle styleZero = styls[0];
        </code>
            <br/>
            <code>

          '--- Get Style by name
          Dim myStyle As NamedStyle = styls.Item("MyStyle")

          '--- Get Style by ID
          Dim styleZero As NamedStyle = styls.Item(0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.StyleSheet">
            <summary> Represents a document's stylesheet. A word documents formatting is stored as
            compressed styles that are based on styles contained in the stylesheet. This
            class also contains static utility functions to uncompress different
            formatting properties.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StyleSheet.#ctor(SoftArtisans.OfficeWriter.WordWriter.FontTable,SoftArtisans.OfficeWriter.WordWriter.WordStringTable,System.SByte[],System.Int32)">
            <summary> StyleSheet constructor. Loads a document's stylesheet information,
            
            </summary>
            <param name="styleSheet">A byte array containing a document's raw stylesheet
            info. Found by using FileInformationBlock.getFcStshf() and
            FileInformationBLock.getLcbStshf()
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StyleSheet.createPap(System.Int32)">
            <summary> Creates a PartagraphProperties object from a papx stored in the
            StyleDescription at the index istd in the StyleDescription array. The PAP
            is placed in the StyleDescription at istd after its been created. Not
            every StyleDescription will contain a papx. In these cases this function
            does nothing
            
            </summary>
            <param name="istd">The index of the StyleDescription to create the
            ParagraphProperties  from (and also place the finished PAP in)
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StyleSheet.createChp(System.Int16)">
            <summary> Creates a CharacterProperties object from a chpx stored in the
            StyleDescription at the index istd in the StyleDescription array. The
            CharacterProperties object is placed in the StyleDescription at istd after
            its been created. Not every StyleDescription will contain a chpx. In these
            cases this function does nothing.
            
            </summary>
            <param name="istd">The index of the StyleDescription to create the
            CharacterProperties object from.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StyleSheet.createTap(System.Int32)">
            <summary> Creates a TableProperties object from a tapx stored in the
            StyleDescription at the index istd in the StyleDescription array. The TAP
            is placed in the StyleDescription at istd after its been created. Not
            every StyleDescription will contain a tapx. In these cases this function
            does nothing
            
            </summary>
            <param name="istd">The index of the StyleDescription to create the
            TableProperties  from (and also place the finished PAP in)
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StyleSheet.getStyleDescription(System.Int32)">
            <summary> Gets the StyleDescription at index x.
            
            </summary>
            <param name="x">the index of the desired StyleDescription.
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.StylesModel">
            <author>  Ryan Ackley
            </author>
            <indexer>  property=Style </indexer>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.StylesModel.getStyleIndex(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.SubDocumentTable">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SubDocumentTable.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary> Used to store and update subdocument offsets. Such as the main body, headers, footnotes, etc.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.SubDocumentTable.getSubDocStart(System.Int32)">
            <summary>getSubDocStart returns the position starting a particular subdocument</summary>
            <param name="docType">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.SubDocumentTable.CcpText">
            <summary>The next bunch of functions returns the length for each subdocument</summary>
            <return>length</return>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.SumBinding">
            <summary>
            A Binding to the DataRows for getting the sum over a repeat block
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SummaryInfoSection.PROPERTY_ID_NAMEIDS">
            <summary>
            TODO: find out from the docs why this is significant
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass">
            <summary>
            Contains conversion support elements such as classes, interfaces and static methods.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.PrependStrings(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Prepend a string to a list of strings
            </summary>
            <param name="filenames"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.CopyStream(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies from to to
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToByteArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of bytes
            </summary>
            <param name="sbyteArray">The array of sbytes to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToSByteArray(System.Byte[])">
            <summary>
            Receives a byte array and returns it transformed in an sbyte array
            </summary>
            <param name="byteArray">Byte array to process</param>
            <returns>The transformed array</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ReadInput(System.IO.Stream,System.SByte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ToCharArray(System.SByte[])">
            <summary>
            Converts an array of sbytes to an array of chars
            </summary>
            <param name="sByteArray">The array of sbytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.GetProperties">
            <summary>
            Gets the current System properties.
            </summary>
            <returns>The current system properties.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.GetCharsFromString(System.String,System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            Copies an array of chars obtained from a String into a specified array of chars
            </summary>
            <param name="sourceString">The String to get the chars from</param>
            <param name="sourceStart">Position of the String to start getting the chars</param>
            <param name="sourceEnd">Position of the String to end getting the chars</param>
            <param name="destinationArray">Array to return the chars</param>
            <param name="destinationStart">Position of the destination array of chars to start storing the chars</param>
            <returns>An array of chars</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.FileCanWrite(System.IO.FileInfo)">
            <summary>
            Checks if a file have write permissions
            </summary>
            <param name="file">The file instance to check</param>
            <returns>True if have write permissions otherwise false</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.RGBtoHSB(System.Int32,System.Int32,System.Int32,System.Single[])">
            <summary>
            Populates or Creates an array containing the HSB value corresponding with RGB values.
            </summary>
            <param name="i">The red value</param>
            <param name="j">The green value</param>
            <param name="k">The blue value</param>
            <param name="HSBValues"></param>
            <returns>Returns an array containing the HSB values value based in the red, green and blue values passed</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.ArraySupport">
            <summary>
            This class manages array operations.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ArraySupport.Equals(System.Array,System.Array)">
            <summary>
            Compares the entire members of one array with the other one.
            </summary>
            <param name="array1">The array to be compared.</param>
            <param name="array2">The array to be compared with.</param>
            <returns>True if both arrays are equals otherwise it returns false.</returns>
            <remarks>Two arrays are equal if they contains the same elements in the same order.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport">
            <summary>
            SupportClass for the BitArray class.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.Set(System.Collections.BitArray,System.Int32)">
            <summary>
            Sets the specified bit to true.
            </summary>
            <param name="bits">The BitArray to modify.</param>
            <param name="index">The bit index to set to true.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.ToString(System.Collections.BitArray)">
            <summary>
            Returns a string representation of the BitArray object.
            </summary>
            <param name="bits">The BitArray object to convert to string.</param>
            <returns>A string representation of the BitArray object.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.BitArraySupport.LogicalOr(System.Collections.BitArray,System.Collections.BitArray)">
            <summary>
            Does a logical or of two Bit Arrays saving it to the first one.
            </summary>
            <remarks>This is the same as setting the length of the shorter method to that of the longer and then 
            calling <code>bitArrayA.Or(bitArrayB)</code>.</remarks>
            <param name="bitArrayA">the first array to be ored; this is wehere the result is stored</param>
            <param name="bitArrayB">the second array to be ored; this value is unchanged</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.HashSetSupport`1">
            <summary>
            SupportClass for the HashSet class.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.SetSupport`1">
            <summary>
            Represents a collection ob objects that contains no duplicate elements.
            </summary>	
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.SetSupport`1.AddAll(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds all the elements of the specified collection to the Set.
            </summary>
            <param name="c">Collection of objects to add.</param>
            <returns>true</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.HashSetSupport`1.Clone">
            <summary>
            Returns a copy of the HashSet instance.
            </summary>		
            <returns>Returns a shallow copy of the current HashSet.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport">
            <summary>
            This class provides functionality not found in .NET collection-related interfaces.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection)">
            <summary>
            Returns an array containing all the elements of the collection.
            </summary>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.ICollectionSupport.ToArray(System.Collections.ICollection,System.Object[])">
            <summary>
            This is left here for backwards compatabilty reasons. Remove if you get the chance
            </summary>
            <param name="objects">The array into which the elements of the collection will be stored.</param>
            <returns>The array containing all the elements of the collection.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.IListSupport">
            <summary>
            Provides functionality for classes that implements the IList interface.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.IListSupport.EnsureCapacity(System.Collections.ArrayList,System.Int32)">
            <summary>
            Ensures the capacity of the list to be greater or equal than the specified.
            </summary>
            <param name="list">The list to be checked.</param>
            <param name="capacity">The expected capacity.</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.StackSupport">
            <summary>
            SupportClass for the Stack class.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.StackSupport.Pop(System.Collections.ArrayList)">
            <summary>
            Removes the element at the top of the stack and returns it.
            </summary>
            <param name="stack">The stack where the element at the top will be returned and removed.</param>
            <returns>The element at the top of the stack.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer">
            <summary>
            The class performs token processing in strings
            </summary>
            <remarks>Mixing the <code>IEnumerator</code> methods with the other methods, may result in skipping elements, or 
            getting the same element more than once. </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.tokenCache">
            <summary>
            The list of tokens
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Initializes a new class instance with a specified string to process
            </summary>
            <param name="source">String to tokenize</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.String)">
            <summary>
            Initializes a new class instance with a specified string to process
            and the specified token delimiters to use
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.#ctor(System.Collections.Generic.IEnumerable{System.Char},System.String,System.Boolean)">
            <summary>
            Initializes a new class instance with a specified string to process, the specified token 
            delimiters to use, and whether the delimiters must be included in the results.
            </summary>
            <param name="source">String to tokenize</param>
            <param name="delimiters">String containing the delimiters</param>
            <param name="includeDelims">Determines if delimiters are included in the results.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.NextToken">
            <summary>
            Returns the next token from the token list
            </summary>
            <returns>The string value of the token</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.HasMoreTokens">
            <summary>
            Determines if there are more tokens to return from the source string
            </summary>
            <returns>True or false, depending if there are more tokens</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.SupportClass.Tokenizer.Count">
            <summary>
            Remaining tokens count
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Table">
            <Doc>
      <summary>
        <para>Represents a table in the Word document.</para>
      </summary>
      <remarks>
        <para>To create a new table, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableBefore(System.Int32,System.Int32)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.InsertTableAfter(System.Int32,System.Int32)"/>. To get an existing table, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> or <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Element.Children"/> and check which elements are of type http://wiki.softartisans.com/display/WW8/Element.Type#Table.</para>
        <para>The following sample demonstrates inserting a new table at the end of a document as well as finding the first table in a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Insert a table at the end of a new document with 3 rows and 5 columns
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Table table = doc.InsertTableAfter(3, 5);

          //--- Get the first table of an existing document
          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Table table = doc.GetElements(Element.Type.Table)[0];
        </code>
          <br/>
          <code>

          '--- Insert a table at the end of a new document with 3 rows and 5 columns
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim table As Table = doc.InsertTableAfter(3, 5)

          '--- Get the first table of an existing document
          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim table As Table = doc.GetElements(Element.Type.Table)(0)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetPreferredWidth(SoftArtisans.OfficeWriter.WordWriter.Units@)">
            <Doc>
        <summary>
          <para>Returns a double that represents the preferred width of this cell, with the associated units return in http://wiki.softartisans.com/display/WW8/#param-units.</para>
        </summary>
        <param name="units">
          <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Units"/> for the width.<br/>MS Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... &gt; Measure in</para>
        </param>
        <returns>
          <para>The preferred width of the table.<br/>MS Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... &gt; dropdown after "Preferred width"</para>
        </returns>
        <example>
          <para>
            <code>
Units units;
double width = table.GetPreferredWidth(out units);
</code>
            <br/>
            <code>
Dim units As Units
Dim width As Double = table.GetPreferredWidth(units)
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetPreferredWidth(System.Double,SoftArtisans.OfficeWriter.WordWriter.Units)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Table&quot;]/Member[@signature=&quot;Table.SetPreferredWidth(double, Units)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetPreferredColumnWidth(System.Int32)">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the width of a particular column.  The <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetPreferredColumnWidth(System.Int32)"/> method returns the width of the column in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <param name="column">
          <para>An <c>int</c> representing the column index of the desired column.</para>
        </param>
        <returns>
          <para>An <c>int</c> representing the width in twips for the column at the specified column index.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Column tab &gt; Size section &gt; Column #: &gt; Preferred width:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the width of the 3rd column
          int columnWidth = oTable.GetPreferredColumnWidth(2);
        </code>
            <br/>
            <code>

          '--- Get the width of the 3rd column
          Dim columnWidth As Integer = oTable.GetPreferredColumnWidth(2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetPreferredColumnWidth(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> representing the width of a particular column.  In order to set the width of a column, you must first set the <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetPreferredColumnWidthUnits(System.Int32,SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits)"/> of that column.</para>
        </summary>
        <param name="column">
          <para>An <c>int</c> representing the index of the column for which to change the width.</para>
        </param>
        <param name="width">
          <para>An <c>int</c> representing the column's new width in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </param>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Column tab &gt; Size section &gt; Column #: &gt; Preferred width:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set the width of the 3rd column to 1 inch
          oTable.SetPreferredColumnWidthUnits(2, TableCell.WidthUnits.Twips);
          oTable.SetPreferredColumnWidth(2, 1440);
        </code>
            <br/>
            <code>

          '--- Set the width of the 3rd column to 1 inch
          oTable.SetPreferredColumnWidthUnits(2, TableCell.WidthUnits.Twips)
          oTable.SetPreferredColumnWidth(2, 1440)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetPreferredColumnWidthUnits(System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits"/> object that represents the units used for the width of a particular column.</para>
        </summary>
        <param name="column">
          <para>An <c>int</c> representing the column index for which to get the width units.</para>
        </param>
        <returns>
          <para>A <c>TableCell.WidthUnits</c> object representing the units used at the specified column index.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Column tab &gt; Size section &gt; Column #: &gt; Measure in:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the column width units for the 3rd column
          TableCell.WidthUnits oCellWidthUnits =
               oTable.GetPreferredColumnWidthUnits(2);
        </code>
            <br/>
            <code>

          '--- Get the column width units for the 3rd column
          Dim oCellWidthUnits As TableCell.WidthUnits = _
               oTable.GetPreferredColumnWidthUnits(2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetPreferredColumnWidthUnits(System.Int32,SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits)">
            <Doc>
        <summary>
          <para>Sets a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits"/> object that represents the units used for the width of a particular column.</para>
        </summary>
        <param name="column">
          <para>The column index for which to get the width units.</para>
        </param>
        <param name="units">
          <para>The preferred width units.</para>
        </param>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Column tab &gt; Size section &gt; Column #: &gt; Measure in:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set the column width units for the 3rd column to percentage
          oTable.SetPreferredWidthUnits(2, TableCell.WidthUnits.Percentage);
        </code>
            <br/>
            <code>

          '--- Set the column width units for the 3rd column to percentage
          oTable.SetPreferredWidthUnits(2, TableCell.WidthUnits.Percentage)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetRowHeight(System.Int32)">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the height of a particular row in the table.  The default row height unit is twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the index of the desired row.</para>
        </param>
        <returns>
          <para>An <c>int</c> representing the height in twips of the specified row. One twip = (1/20 pt) or (1/1440 in).</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Row tab &gt; Size section &gt; Row #: &gt; Specify height:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get the height of the 3rd row
          int rowHeight = oTable.GetRowHeight(2);
        </code>
            <br/>
            <code>

          '--- Get the height of the 3rd row
          Dim rowHeight As Integer = oTable.GetRowHeight(2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetRowHeight(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> representing the height of a particular row in the table. A row height is set in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the row index to set the height for.</para>
        </param>
        <param name="height">
          <para>An <c>int</c> representing the new height in twips of the specified row. One twip = (1/20 pt) or (1/1440 in).</para>
        </param>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Row tab &gt; Size section &gt; Row #: &gt; Specify height:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set the height of the 3rd row to 1 inch
          oTable.SetRowHeight(2, 1440);
        </code>
            <br/>
            <code>

          '--- Set the height of the 3rd row to 1 inch
          oTable.SetRowHeight(2, 1440)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetRowHeightExact(System.Int32)">
            <Doc>
        <summary>
          <para>Returns or a <c>boolean</c> that represents if the row height is "exact" (true) or "at least" (false).</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the row index to get RowHeightExact for.</para>
        </param>
        <returns>
          <para>A <c>boolean</c> that represents if the specified row's height is "exact" (true) or "at least" (false).</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Row tab &gt; Size section &gt; Row #: &gt; Row height is:</para>
          <para>
            <b>Note:</b> To set this property, you must first set the RowHeight property.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get RowHeightExact for the 3rd row
          bool rowHeightExact = oTable.GetRowHeightExact(2);
        </code>
            <br/>
            <code>

          '--- Get RowHeightExact for the 3rd row
          Dim rowHeightExact As Boolean = oTable.GetRowHeightExact(2)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.SetRowHeightExact(System.Int32,System.Boolean)">
            <Doc>
        <summary>
          <para>Sets a <c>boolean</c> that represents if the row height is "exact" (true) or "at least" (false).</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the row index to set RowHeightExact for.</para>
        </param>
        <param name="exact">
          <para>A <c>boolean</c> that represents if the specified row's height should be "exact" (true) or "at least" (false).</para>
        </param>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table properties... &gt; Row tab &gt; Size section &gt; Row #: &gt; Row height is:</para>
          <para>
            <b>Note:</b> To set this property, you must first set the RowHeight property.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set RowHeightExact for the 3rd row to exact
          oTable.SetRowHeightExact(2, true);
        </code>
            <br/>
            <code>

          '--- Set RowHeightExact for the 3rd row to exact
          oTable.SetRowHeightExact(2, True)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.CreateBookmarkOnRow(System.Int32,System.String)">
            <Doc>
        <summary>
          <para>Creates a bookmark on the specified row using the specified name.</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the table cell's row.</para>
        </param>
        <param name="name">
          <para>A <c>String</c> representing the bookmark name.</para>
        </param>
        <example>
          <para>
            <code>
oTable.CreateBookmarkOnRow(1, "MyBookmark");</code>
            <br/>
            <code>
oTable.CreateBookmarkOnRow(1, "MyBookmark")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.MergeCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Merges the specified set of cells into a single cell.</para>
        </summary>
        <param name="firstRow">
          <para>The 0-based number of the first row in the set of cells to merge.</para>
        </param>
        <param name="firstCol">
          <para>The 0-based number of the first column in the set of cells to merge.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to merge.</para>
        </param>
        <param name="numCols">
          <para>The number of columns to merge.</para>
        </param>
        <example>
          <para>
            <code>
table.MergeCells(3, 2, 4, 1);</code>
            <br/>
            <code>
table.MergeCells(3, 2, 4, 1)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.ImportDataRow(System.Object[])">
            <Doc>
        <summary>
          <para>Imports data from an array of objects to the current table.</para>
        </summary>
        <param name="row">
          <para>An array containing the set of values to import to the table.</para>
        </param>
        <exception cref="T:System.Exception"/>
        <example>
          <para>
            <code>
tbl.ImportData(dataArray);</code>
            <br/>
            <code>
tbl.ImportData(dataArray)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.AddColumns(System.Int32)">
            <Doc>
        <summary>
          <para>Adds a specified number of columns to the horizontal end of the table.</para>
        </summary>
        <param name="numColumns">
          <para>The number of columns to add to the table.</para>
        </param>
        <example>
          <para>
            <code>
tbl.AddColumns(4);</code>
            <br/>
            <code>
tbl.AddColumns(4)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetNumColumns(System.Int32)">
            <Doc>
        <summary>
          <para>Returns the number of columns in the specified row of the table.</para>
        </summary>
        <param name="row">
          <para>The row for which to return the nummber of columns.</para>
        </param>
        <example>
          <para>
            <code>
tbl.GetNumColumns(4);</code>
            <br/>
            <code>
tbl.GetNumColumns(4)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.InsertColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Inserts one or more columns at the specified position in the table.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the first column to insert.</para>
        </param>
        <param name="numColumns">
          <para>The number of columns to insert.</para>
        </param>
        <example>
          <para>
            <code>
tbl.InsertColumns(2, 5);</code>
            <br/>
            <code>
tbl.InsertColumns(2, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.AddRows(System.Int32)">
            <Doc>
        <summary>
          <para>Adds a specified number of rows to the vertical end of the table.</para>
        </summary>
        <param name="numRows">
          <para>The number of rows to add to the table.</para>
        </param>
        <example>
          <para>
            <code>
tbl.AddRows(4);</code>
            <br/>
            <code>
tbl.AddRows(4)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.InsertRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Inserts one or more rows at the specified position in the table.</para>
        </summary>
        <param name="index">
          <para>The 0-based index of the first row to insert.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to insert.</para>
        </param>
        <example>
          <para>
            <code>
tbl.InsertRows(2, 5);</code>
            <br/>
            <code>
tbl.InsertRows(2, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.DeleteRows(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Deletes one or more rows from the table.</para>
        </summary>
        <param name="startIndex">
          <para>The 0-based index of the first row to delete.</para>
        </param>
        <param name="numRows">
          <para>The number of rows to delete.</para>
        </param>
        <example>
          <para>
            <code>
tbl.DeleteRows(2, 5);</code>
            <br/>
            <code>
tbl.DeleteRows(2, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.DeleteColumns(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Deletes one or more columns from the table.</para>
        </summary>
        <param name="startIndex">
          <para>The 0-based index of the first column to delete.</para>
        </param>
        <param name="numColumns">
          <para>The number of columns to delete.</para>
        </param>
        <example>
          <para>
            <code>
tbl.DeleteColumns(2, 5);</code>
            <br/>
            <code>
tbl.DeleteColumns(2, 5)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Table&quot;]/Member[@signature=&quot;Table.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Table.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Table&quot;]/Member[@signature=&quot;Table.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Table.Style">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.NamedStyle"/> object that represents the Style of the current table.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return NamedStyle
          NamedStyle oNamedStyle = oTable.Style;

          //--- Set NamedStyle
          oTable.Style = oDocument.Styles[NamedStyle.BuiltIn.NormalTable];
        </code>
            <br/>
            <code>

          '--- Return NamedStyle
          Dim oNamedStyle As NamedStyle = oTable.Style

          '--- Set NamedStyle
          oTable.Style = oDocument.Styles(NamedStyle.BuiltIn.NormalTable)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Table.NumRows">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> representing the number of rows in the first row of this table.</para>
        </summary>
        <example>
          <para>
            <code>

          int numRows = oTable.NumRows;
        </code>
            <br/>
            <code>

          Dim numRows As Integer = oTable.NumRows
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Table.AbsolutePositioning">
            <Doc>
        <summary>
          <para>Returns an <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Table.AbsolutePositioning"/> object on which you can control the absolute positioning for the table.</para>
        </summary>
        <example>
          <para>
            <code>

          oTable.AbsolutePositioning.X = 100;
        </code>
            <br/>
            <code>

          oTable.AbsolutePositioning.X = 100
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Table.Formatting">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting"/> object representing the formatting of this table (borders, padding, shading, etc).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Get TableFormatting
          TableFormatting formatting = oTable.TableFormatting;

          //--- Set TableFormatting
          oTable.TableFormatting = oTableFormatting;
        </code>
            <br/>
            <code>

          '--- Get TableFormatting
          Dim formatting As TableFormatting = oTable.TableFormatting

          '--- Set TableFormatting
          oTable.TableFormatting = oTableFormatting
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Table.Item(System.Int32,System.Int32)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell"/> object that represents the table cell that exists at the given column and row.</para>
        </summary>
        <param name="row">
          <para>An <c>int</c> representing the table cell's row.</para>
        </param>
        <param name="column">
          <para>An <c>int</c> representing the table cell's column.</para>
        </param>
        <returns>
          <para>An <c>TableCell</c> object that represents the table cell that exists at the given column and row.</para>
        </returns>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Table table = doc.InsertTableAfter(1, 1);
          TableCell cell = table[0, 0];
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim tbl As Table = doc.InsertTableAfter(1, 1)
          Dim tc As TableCell = tbl(0, 0)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableCell">
            <Doc>
      <summary>
        <para>Represents a table cell in a table in the Word document.</para>
      </summary>
      <remarks>
        <para>New table cells are created when you create a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Table"/>. They cannot be created independent of a Table using the <c>new</c> keyword.</para>
        <para>To retrieve and manipulate a table cell, use array index notation on a <c>Table</c> object. You can also use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Element.GetElements(SoftArtisans.OfficeWriter.WordWriter.Element.Type)"/> to get all elements, of which you can check which ones are of type <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell"/>.</para>
        <para>The following sample demonstrates getting a reference to a table cell at column 3 (4th column), row 2 (3rd row).</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          Table table = (Table)doc.GetElements(Element.Type.Table)[0];
          TableCell cell = table[3, 2];
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim table As Table = doc.GetElements(Element.Type.Table)(0)
          Dim cell As TableCell = table(3, 2)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.GetPadding(SoftArtisans.OfficeWriter.WordWriter.TableCell.Location)">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents this table cell margin at a particular location in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location"/> object that represents ths location of the margin.</para>
        </param>
        <returns>
          <para>An <c>int</c> that represents this table cell margin at a particular location in twips.</para>
        </returns>
        <remarks>
          <para>Allowed locations are Top, Left, Bottom, and Right, which refer to the default margins for those sides of a table cell.</para>
          <para>By default, Top and Bottom are set to 0", and Left and Right are set to 0.08".</para>
          <para>Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Options... button &gt; Cell margins section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Padding for Left margin
          int padding = cell.GetPadding(TableCell.Location.Left);
        </code>
            <br/>
            <code>

          '--- Return Padding for Left margin
          Dim padding As Integer = cell.GetPadding(TableCell.Location.Left)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.SetPadding(SoftArtisans.OfficeWriter.WordWriter.TableCell.Location,System.Int32)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> that represents this table cell margin at a particular location in twips. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location"/> object that represents ths location of the margin.</para>
        </param>
        <param name="value">
          <para>An <c>int</c> representing the value of the margin in twips.</para>
        </param>
        <remarks>
          <para>Allowed locations are Top, Left, Bottom, and Right, which refer to the default margins for those sides of a table cell.</para>
          <para>By default, Top and Bottom are set to 0", and Left and Right are set to 0.08".</para>
          <para>Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Options... button &gt; Cell margins section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set Padding for Left margin to 1 inch
          cell.SetPadding(TableCell.Location.Left, 1440);
        </code>
            <br/>
            <code>

          '--- Set Padding for Left margin to 1 inch
          cell.SetPadding(TableCell.Location.Left, 1440)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.GetBorder(SoftArtisans.OfficeWriter.WordWriter.Border.Location)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border"/> object that lets you manipulate the border this table cell at a particular location.</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location"/> object that represents the location of the Border to return.</para>
        </param>
        <returns>
          <para>A <c>Border</c> object that represents the border for this table cell at a particular location.</para>
        </returns>
        <remarks>
          <para>Allowed locations are Top, Left, Bottom, and Right. They refer to the border for those sides of the table cell.</para>
          <para>Word equivalent: Format menu &gt; Borders and Shading... &gt; Borders tab</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set the Left Border color to blue
          cell.GetBorder(Border.Location.Left).Color = Color.Blue;
        </code>
            <br/>
            <code>

          '--- Set the Left Border color to blue
          cell.GetBorder(Border.Location.Left).Color = Color.Blue
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.ApplyFont(SoftArtisans.OfficeWriter.WordWriter.Font)">
            <Doc>
        <summary>
          <para>Applies <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Font"/> properties to all text in this TableCell. The font properties will not be applied to text inside nested tables.</para>
        </summary>
        <param name="font">
          <para>A <c>Font</c> representing the properties that should be applied to text in this TableCell.</para>
        </param>
        <example>
          <para>
            <code>
tblCell.ApplyFont(tblFont);</code>
            <br/>
            <code>
tblCell.ApplyFont(tblFont)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.ApplyParagraphFormatting(SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting)">
            <Doc>
        <summary>
          <para>Applies <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting"/> to all paragraphs in this TableCell. The ParagraphFormatting will not be applied to paragraphs inside nested tables.</para>
        </summary>
        <param name="formatting">
          <para>A <c>ParagraphFormatting</c> object containing formatting properties to apply to the cell.</para>
        </param>
        <example>
          <para>
            <code>
tblCell.ApplyParagraphFormatting(paraFormat);</code>
            <br/>
            <code>
tblCell.ApplyParagraphFormatting(paraFormat)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.Merged">
            <Doc>
        <summary>
          <para>Sets or returns whether this cell has been merged with a preceding horizontal cell.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Merged
          bool merged = cell.Merged;

          //--- Set Merged
          cell.Merged = true;
        </code>
            <br/>
            <code>

          '--- Return Merged
          Dim merged As Boolean = cell.Merged

          '--- Set Merged
          cell.Merged = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.FirstMerged">
            <Doc>
        <summary>
          <para>Returns or sets a <c>boolean</c> that represents if this is the first cell in a group of horizontally merged cells. The first cell will contain all the content.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return FirstMerged
          bool merged = cell.FirstMerged;

          //--- Set FirstMerged
          cell.FirstMerged = true;
        </code>
            <br/>
            <code>

          '--- Return FirstMerged
          Dim merged As Boolean = cell.FirstMerged

          '--- Set FirstMerged
          cell.FirstMerged = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalMerged">
            <Doc>
        <summary>
          <para>Returns or sets a <c>boolean</c> that represents if this cell is merged with one or more cells vertically. The first cell will contain all the content.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return VerticalMerged
          bool merged = cell.VerticalMerged;

          //--- Set VerticalMerged
          cell.VerticalMerged = true;
        </code>
            <br/>
            <code>

          '--- Return VerticalMerged
          Dim merged As Boolean = cell.VerticalMerged

          '--- Set VerticalMerged
          cell.VerticalMerged = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.FirstVerticalMerged">
            <Doc>
        <summary>
          <para>Sets or returns whether the current cell is the first cell in a group of vertically merged cells. The first cell will contain all the content.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return FirstVerticalMerged
          bool merged = cell.FirstVerticalMerged;

          //--- Set FirstVerticalMerged
          cell.FirstVerticalMerged = true;
        </code>
            <br/>
            <code>

          '--- Return FirstVerticalMerged
          Dim merged As Boolean = cell.FirstVerticalMerged

          '--- Set FirstVerticalMerged
          cell.FirstVerticalMerged = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.VertAlignment">
            <Doc>
        <summary>
          <para>Returns or sets a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment"/> object that represents the vertical alignment of the text in this cell.</para>
        </summary>
        <remarks>
          <para>This is set to http://wiki.softartisans.com/display/WW8/TableCell.VerticalAlignment#Top by default.</para>
          <para>MS Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Vertical alignment</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return VertAlignment
          TableCell.VerticalAlignment oVerticalAlignment = cell.VertAlignment;

          //--- Set VertAlignment
          cell.VertAlignment = TableCell.VerticalAlignment.Center;
        </code>
            <br/>
            <code>

          '--- Return VertAlignment
          Dim oVerticalAlignment As TableCell.VerticalAlignment = cell.VertAlignment

          '--- Set VertAlignment
          cell.VertAlignment = TableCell.VerticalAlignment.Center
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.NoWrap">
            <Doc>
        <summary>
          <para>Returns or sets a <c>boolean</c> that represents if Word will prevent text from wrapping in this table cell.</para>
        </summary>
        <remarks>
          <para>This is set to <c>false</c> by default.</para>
          <para>MS Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Options... button &gt; Options section &gt; Wrap text</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return NoWrap
          bool noWrap = cell.NoWrap;

          //--- Set NoWrap
          cell.NoWrap = true;
        </code>
            <br/>
            <code>

          '--- Return NoWrap
          Dim noWrap As Boolean = cell.NoWrap

          '--- Set NoWrap
          cell.NoWrap = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.PreferredWidth">
            <Doc>
        <summary>
          <para>Returns or sets an <c>int</c> that represents the preferred width of this cell. In order to set this property, the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.CellWidthUnits"/> property must first be set. The width is returned in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Size section &gt; Preferred width:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return PreferredWidth
          int preferredWidth = cell.PreferredWidth;

          //--- Set PreferredWidth to 1 inch
          cell.CellWidthUnits = TableCell.WidthUnits.Twips;
          cell.PreferredWidth = 1440;
        </code>
            <br/>
            <code>

          '--- Return PreferredWidth
          Dim preferredWidth As Integer = cell.PreferredWidth

          '--- Set PreferredWidth to 1 inch
          cell.CellWidthUnits = TableCell.WidthUnits.Twips
          cell.PreferredWidth = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.CellWidthUnits">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits"/> object that represents the cell width units for this cell.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table Properties... &gt; Cell tab &gt; Size section &gt; Measure in:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return CellWidthUnits
          TableCell.WidthUnits widthUnits = cell.CellWidthUnits;

          //--- Set CellWidthUnits
          cell.CellWidthUnits = TableCell.WidthUnits.Auto;
        </code>
            <br/>
            <code>

          '--- Return CellWidthUnits
          Dim widthUnits As TableCell.WidthUnits = cell.CellWidthUnits

          '--- Set CellWidthUnits
          cell.CellWidthUnits = TableCell.WidthUnits.Auto
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.Shading">
            <Doc>
        <summary>
          <para>Returns an <see cref="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.Shading"/> object which on which you can manipulate the shading (fill color and/or pattern) properties for this cell.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab</para>
        </remarks>
        <example>
          <para>
            <code>

          cell.Shading.BackgroundColor = Color.Gray;
        </code>
            <br/>
            <code>

          cell.Shading.BackgroundColor = Color.Gray
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location">
            <Doc>
        <summary>
          <para>Locations within a table cell for which padding values can be set.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Bottom">
            <Doc>
          <summary>Bottom of the table cell</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Left">
            <Doc>
          <summary>Left side of the table cell</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Right">
            <Doc>
          <summary>Right side of the table cell</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Top">
            <Doc>
          <summary>Top of the table cell</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Location&quot;]/Member[@signature=&quot;TableCell.Location.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Location&quot;]/Member[@signature=&quot;TableCell.Location.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Location&quot;]/Member[@signature=&quot;TableCell.Location.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Location&quot;]/Member[@signature=&quot;TableCell.Location.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.Location&quot;]/Member[@signature=&quot;TableCell.Location.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment">
            <Doc>
        <summary>
          <para>Vertical alignments for a table cell.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.Bottom">
            <Doc>
          <summary>Text is aligned from the bottom of the cell</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.Center">
            <Doc>
          <summary>Text is aligned from the center of the cell</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.Top">
            <Doc>
          <summary>Text is aligned from the top of the cell</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.VerticalAlignment.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment&quot;]/Member[@signature=&quot;TableCell.VerticalAlignment.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits">
            <Doc>
        <summary>
          <para>Units used for setting a table cell width.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Auto">
            <Doc>
          <summary>Width units are automatically chosen</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Null">
            <Doc>
          <summary>Default width unit</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Percentage">
            <Doc>
          <summary>Cell width is measured as a percentage of total width</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Twips">
            <Doc>
          <summary>Cell width is measured in twips</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.WidthUnits&quot;]/Member[@signature=&quot;TableCell.WidthUnits.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.WidthUnits&quot;]/Member[@signature=&quot;TableCell.WidthUnits.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.WidthUnits&quot;]/Member[@signature=&quot;TableCell.WidthUnits.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.WidthUnits&quot;]/Member[@signature=&quot;TableCell.WidthUnits.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCell.WidthUnits.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableCell&quot;]/Member[@signature=&quot;TableCell.WidthUnits&quot;]/Member[@signature=&quot;TableCell.WidthUnits.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType">
            <summary> Table Cell Descriptor.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.setFtsWidth(System.SByte)">
            <summary> Sets the ftsWidth field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.getFtsWidth">
            <returns>  the ftsWidth field value.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.Rgf">
            <summary> Get the rgf field for the TC record.</summary>
            <summary> Set the rgf field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.WWidth">
            <summary> Get the wWidth field for the TC record.</summary>
            <summary> Set the wWidth field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.BrcTop">
            <summary> Get the brcTop field for the TC record.</summary>
            <summary> Set the brcTop field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.BrcLeft">
            <summary> Get the brcLeft field for the TC record.</summary>
            <summary> Set the brcLeft field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.BrcBottom">
            <summary> Get the brcBottom field for the TC record.</summary>
            <summary> Set the brcBottom field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.BrcRight">
            <summary> Get the brcRight field for the TC record.</summary>
            <summary> Set the brcRight field for the TC record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FFirstMerged">
            <returns>  the fFirstMerged field value.
            </returns>
            <summary> Sets the fFirstMerged field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FMerged">
            <returns>  the fMerged field value.
            </returns>
            <summary> Sets the fMerged field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FVertical">
            <returns>  the fVertical field value.
            </returns>
            <summary> Sets the fVertical field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FBackward">
            <returns>  the fBackward field value.
            </returns>
            <summary> Sets the fBackward field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FRotateFont">
            <returns>  the fRotateFont field value.
            </returns>
            <summary> Sets the fRotateFont field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FVertMerge">
            <returns>  the fVertMerge field value.
            </returns>
            <summary> Sets the fVertMerge field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FVertRestart">
            <returns>  the fVertRestart field value.
            </returns>
            <summary> Sets the fVertRestart field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.VertAlign">
            <returns>  the vertAlign field value.
            </returns>
            <summary> Sets the vertAlign field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FFitText">
            <returns>  the fFitText field value.
            </returns>
            <summary> Sets the fFitText field value.
            
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TCAbstractType.FNoWrap">
            <returns>  the fNoWrap field value.
            </returns>
            <summary> Sets the fNoWrap field value.
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.GetVisibleCharacterRuns(System.Int32,System.Int32)">
            <summary>
            Returns a list of all the character runs within this element.
            </summary>
            <remarks>Unlike <see cref="P:SoftArtisans.OfficeWriter.WordWriter.ElementModel.InlineElements"/>, this method splits up
            character runs if they span special characters like end of table cell markers or end of
            paragraph markers. This method skips the end of cell character marker.
            </remarks>
            <param name="startIndex">The index in the document of the first character to include
            </param>
            <param name="endIndex">The index in the document of the first character not to include
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.pushbackText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.pushbackParagraphs">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>This ignores the table cell end character, in addition
            to anything in the children of this field</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.ElementModel.GetIgnoredCharacters"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.insertDataObject(SoftArtisans.OfficeWriter.Shared.DataSource,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.TopBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.BottomBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.LeftBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.RightBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.BottomPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.WidthUnitsInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.LeftPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.RightPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.TopPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableCellModel.PreferredWidthInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableCharacterTable">
            <summary> This class represents a plcf that stores the table state at a certain cp. This
            isn't documented. I reverse-engineered this structure with a little help from the
            OOo code base. Tables won't work w/o this.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting">
            <Doc>
      <summary>
        <para>The <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableFormatting"/> class is used to specify formatting that should be applied to a table. It also represents the table formatting of some named styles in the document.</para>
      </summary>
      <remarks>
        <para>There are two ways to obtain an instance of this class: Create a new normal table formatting object using <see cref="M:SoftArtisans.OfficeWriter.WordWriter.Document.CreateTableFormatting"/>. This will return a copy of a particular style's table formatting. The <c>TableFormatting</c> object that is returned can then be used in conjunction with methods in the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Element"/> class to create tables with specific formatting.</para>
        <para>The following example demonstrates both ways of getting table formatting, first by retrieving the NormalTable style's paragraph formatting from the document, second by retrieving a copy of the TableSimple1 style's paragraph formatting.</para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Get NormalTable formatting from Document
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          TableFormatting normalTableFormatting =
               doc.CreateTableFormatting();

          //--- Get paragraph formatting from SimpleTable1 Style
          WordApplication app = new WordApplication();
          Document doc = app.Create();
          TableFormatting simpleTable1Formatting =
               doc.Styles[NamedStyle.BuiltIn.SimpleTable1];
        </code>
          <br/>
          <code>

          '--- Get NormalTable formatting from Document
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim normalTableFormatting As TableFormatting = _
               doc.CreateTableFormatting()

          '--- Get paragraph formatting from SimpleTable1 Style
          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim simpleTable1Formatting As TableFormatting = _
               doc.Styles(NamedStyle.BuiltIn.SimpleTable1)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.GetDefaultBorder(SoftArtisans.OfficeWriter.WordWriter.Border.Location)">
            <Doc>
        <summary>
          <para>Returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border"/> object that represents the default border for table cells at a specified location for a table created with this formatting. Individual table cells can override these border settings. Allowed locations are: Top, Left, Bottom, Right, Vertical, and Horizontal. Top, Left, Bottom, and Right refer to the default border for those sides of a table cell. Vertical and Horizontal refer to the border between table cells.</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Border.Location"/> object that represents the border location to get the border at.</para>
        </param>
        <returns>
          <para>A <c>Border</c> object that represents the default border for table cells at a specified location for a table created with this formatting.</para>
        </returns>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Border and Shading... &gt; Borders tab (With "Apply to: Table" selected)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DefaultBorder
          Border oBorder = oTableFormatting.GetDefaultBorder(Border.Location.Top);
        </code>
            <br/>
            <code>

          '--- Return DefaultBorder
          Dim oBorder As Border = oTableFormatting.GetDefaultBorder(Border.Location.Top)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.GetDefaultPadding(SoftArtisans.OfficeWriter.WordWriter.TableCell.Location)">
            <Doc>
        <summary>
          <para>Returns an <c>int</c> that represents the default table cell margin at a particular location. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location"/> object that represents ths location of the margin.</para>
        </param>
        <returns>
          <para>An <c>int</c> that represents the default table cell margin at a particular location.</para>
        </returns>
        <remarks>
          <para>Allowed locations are Top, Left, Bottom, and Right, which refer to the default margins for those sides of a table cell.</para>
          <para>By default, Top and Bottom are set to 0", and Left and Right are set to 0.08".</para>
          <para>Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... button &gt; Default cell margins section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DefaultPadding for Left margin
          int defaultPadding =
               oTableFormatting.GetDefaultPadding(TableCell.Location.Left);
        </code>
            <br/>
            <code>

          '--- Return DefaultPadding for Left margin
          Dim defaultPadding As Integer = _
               oTableFormatting.GetDefaultPadding(TableCell.Location.Left)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.SetDefaultPadding(SoftArtisans.OfficeWriter.WordWriter.TableCell.Location,System.Int32)">
            <Doc>
        <summary>
          <para>Sets an <c>int</c> that represents the default table cell margin at a particular location. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <param name="location">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TableCell.Location"/> object that represents the location at which to set the margin.</para>
        </param>
        <param name="value">
          <para>An <c>int</c> that represents the default table cell margin at a particular location in twips.</para>
        </param>
        <remarks>
          <para>Allowed locations are Top, Left, Bottom, and Right, which refer to the default margins for those sides of a table cell.</para>
          <para>By default, Top and Bottom are set to 0", and Left and Right are set to 0.08".</para>
          <para>Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... button &gt; Default cell margins section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Set DefaultPadding for Left margin to 1 inch
          oTableFormatting.SetDefaultPadding(TableCell.Location.Left, 1440);
        </code>
            <br/>
            <code>

          '--- Set DefaultPadding for Left margin to 1 inch
          oTableFormatting.SetDefaultPadding(TableCell.Location.Left, 1440)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableFormatting&quot;]/Member[@signature=&quot;TableFormatting.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;TableFormatting&quot;]/Member[@signature=&quot;TableFormatting.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.RepeatAsHeader">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents if Word will repeat the first row of a table created with this formatting as a header across multiple pages.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return RepeatAsHeader
          bool repeatAsHeader = oTableFormatting.RepeatAsHeader;

          //--- Set RepeatAsHeader
          oTableFormatting.RepeatAsHeader = true;
        </code>
            <br/>
            <code>

          '--- Return RepeatAsHeader
          Dim repeatAsHeader As Boolean = oTableFormatting.RepeatAsHeader

          '--- Set RepeatAsHeader
          oTableFormatting.RepeatAsHeader = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.Justification">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.ParagraphFormatting.Justification"/> object that represents the justification for a table created with this formatting. Possible values: Left, Center, Right, LeftRight.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return Justification
          ParagraphFormatting.Justification oJustification =
               oTableFormatting.Justification;

          //--- Set Justification
          oTableFormatting.Justification =
               ParagraphFormatting.Justification.Center;
        </code>
            <br/>
            <code>

          '--- Return Justification
          Dim oJustification As ParagraphFormatting.Justification = _
               oTableFormatting.Justification

          '--- Set Justification
          oTableFormatting.Justification = _
               ParagraphFormatting.Justification.Center
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.CantSplit">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will attempt to keep a table created with this formatting on one page.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return CantSplit
          boolean cantSplit = oTableFormatting.CantSplit;

          //--- Set CantSplit
          oTableFormatting.CantSplit = true;
        </code>
            <br/>
            <code>

          '--- Return CantSplit
          Dim cantSplit As Boolean = oTableFormatting.CantSplit

          '--- Set CantSplit
          oTableFormatting.CantSplit = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.AutoWidth">
            <Doc>
        <summary>
          <para>Returns a <c>boolean</c> that represents whether or not this table's width will be set automatically by Word.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... &gt; Automatically resize to fit contents</para>
          <para>
            <b>Info:</b>
            <br/>
            <para>You will have to call <c>[table.SetPreferredColumnWidthUnits(i,TableCell.WidthUnits.Auto)|Table.SetPreferredColumnWidthUnits(Int32, TableCell.WidthUnits)]</c> to have each column adjusted to fit the text</para>
          </para>
        </remarks>
        <example>
          <para>
            <code>

          boolean autoWidth = oTableFormatting.AutoWidth;
        </code>
            <br/>
            <code>

          Dim autoWidth As Boolean = oTableFormatting.AutoWidth
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.LeftIndent">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the left indent for a table created with this formatting in twips. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return LeftIndent
          int leftIndent = oTableFormatting.LeftIndent;

          //--- Set LeftIndent to 1 inch
          oTableFormatting.LeftIndent = 1440;
        </code>
            <br/>
            <code>

          '--- Return LeftIndent
          Dim leftIndent As Integer = oTableFormatting.LeftIndent

          '--- Set LeftIndent to 1 inch
          oTableFormatting.LeftIndent = 1440
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.DefaultSpacing">
            <Doc>
        <summary>
          <para>Returns or sets an <c>int</c> that represents the default spacing between a table's cells that has this formatting. This is the distance in twips between the edge of a cell and the center of its border with an adjacent cell. One twip = (1/20 pt) or (1/1440 in)</para>
        </summary>
        <remarks>
          <para>By default, this is set to zero (0) for a new table.</para>
          <para>Word equivalent: Table menu &gt; Table Properties... &gt; Table tab &gt; Options... button &gt; Default cell spacing section &gt; Allow spacing between cells</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DefaultSpacing
          int defaultSpacing = oTableFormatting.DefaultSpacing;

          //--- Set DefaultSpacing to 1/2 inch
          oTableFormatting.DefaultSpacing = 720;
        </code>
            <br/>
            <code>

          '--- Return DefaultSpacing
          Dim defaultSpacing As Integer = oTableFormatting.DefaultSpacing

          '--- Set DefaultSpacing to 1/2 inch
          oTableFormatting.DefaultSpacing = 720
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormatting.DefaultShading">
            <Doc>
        <summary>
          <para>Returns an <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Shading"/> object which on which you can manipulate the default shading (fill color and/or pattern) properties of a table's cells that has this formatting.</para>
        </summary>
        <remarks>
          <para>MS Word equivalent: Format menu &gt; Borders and Shading... &gt; Shading tab</para>
        </remarks>
        <example>
          <para>
            <code>

          oTableFormatting.Shading.BackgroundColor = Color.Gray;
        </code>
            <br/>
            <code>

          oTableFormatting.Shading.BackgroundColor = Color.Gray
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModel">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType">
            <summary> Table Properties.
            NOTE: This source is automatically generated please do not modify this file.  Either subclass or
            remove the record in src/records/definitions.
            </summary>
            <author>  S. Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getRgshd">
            <summary> Get the rgshd field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setRgshd(SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor[])">
            <summary> Set the rgshd field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcBottom">
            <summary> Get the brcBottom field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcBottom(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcBottom field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcTop">
            <summary> Get the brcTop field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcTop(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcTop field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcLeft">
            <summary> Get the brcLeft field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcLeft(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcLeft field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcRight">
            <summary> Get the brcRight field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcRight(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcRight field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcVertical">
            <summary> Get the brcVertical field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcVertical(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcVertical field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.getBrcHorizontal">
            <summary> Get the brcHorizontal field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.setBrcHorizontal(SoftArtisans.OfficeWriter.WordWriter.BorderCode)">
            <summary> Set the brcHorizontal field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.Size">
            <summary> Size of record (exluding 4 byte header)</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.Jc">
            <summary> Get the jc field for the TAP record.</summary>
            <summary> Set the jc field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.DxaGapHalf">
            <summary> Get the dxaGapHalf field for the TAP record.</summary>
            <summary> Set the dxaGapHalf field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.DyaRowHeight">
            <summary> Get the dyaRowHeight field for the TAP record.</summary>
            <summary> Set the dyaRowHeight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FCantSplit">
            <summary> Get the fCantSplit field for the TAP record.</summary>
            <summary> Set the fCantSplit field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FTableHeader">
            <summary> Get the fTableHeader field for the TAP record.</summary>
            <summary> Set the fTableHeader field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FAutoFit">
            <summary> Get the fAutoFit field for the TAP record.</summary>
            <summary> Set the fAutoFit field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.Tlp">
            <summary> Get the tlp field for the TAP record.</summary>
            <summary> Set the tlp field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.ItcMac">
            <summary> Get the itcMac field for the TAP record.</summary>
            <summary> Set the itcMac field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.RgdxaCenter">
            <summary> Get the rgdxaCenter field for the TAP record.</summary>
            <summary> Set the rgdxaCenter field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.Rgtc">
            <summary> Get the rgtc field for the TAP record.</summary>
            <summary> Set the rgtc field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.Shd">
            <summary> Get the shd field for the TAP record.</summary>
            <summary> Set the shd field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.DxaAbs">
            <summary> Get the dxaAbs field for the TAP record.</summary>
            <summary> Set the dxaAbs field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.DyaAbs">
            <summary> Get the dyaAbs field for the TAP record.</summary>
            <summary> Set the dyaAbs field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.PcHorz">
            <summary> Get the pcHorz field for the TAP record.</summary>
            <summary> Set the pcHorz field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.PcVert">
            <summary> Get the pcVert field for the TAP record.</summary>
            <summary> Set the pcVert field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsWidthBefore">
            <summary> Get the ftsWidthBefore field for the TAP record.</summary>
            <summary> Set the ftsWidthBefore field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WWidthBefore">
            <summary> Get the wWidthBefore field for the TAP record.</summary>
            <summary> Set the wWidthBefore field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsWidthAfter">
            <summary> Get the ftsWidthAfter field for the TAP record.</summary>
            <summary> Set the ftsWidthAfter field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WWidthAfter">
            <summary> Get the wWidthAfter field for the TAP record.</summary>
            <summary> Set the wWidthAfter field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsWidthIndent">
            <summary> Get the ftsWidthIndent field for the TAP record.</summary>
            <summary> Set the ftsWidthIndent field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WWidthIndent">
            <summary> Get the wWidthIndent field for the TAP record.</summary>
            <summary> Set the wWidthIndent field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsWidth">
            <summary> Get the ftsWidth field for the TAP record.</summary>
            <summary> Set the ftsWidth field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WWidth">
            <summary> Get the wWidth field for the TAP record.</summary>
            <summary> Set the wWidth field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingDefaultTop">
            <summary> Get the ftsCellSpacingDefaultTop field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingDefaultTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingDefaultLeft">
            <summary> Get the ftsCellSpacingDefaultLeft field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingDefaultLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingDefaultBottom">
            <summary> Get the ftsCellSpacingDefaultBottom field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingDefaultBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingDefaultRight">
            <summary> Get the ftsCellSpacingDefaultRight field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingDefaultRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingDefaultTop">
            <summary> Get the wCellSpacingDefaultTop field for the TAP record.</summary>
            <summary> Set the wCellSpacingDefaultTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingDefaultLeft">
            <summary> Get the wCellSpacingDefaultLeft field for the TAP record.</summary>
            <summary> Set the wCellSpacingDefaultLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingDefaultBottom">
            <summary> Get the wCellSpacingDefaultBottom field for the TAP record.</summary>
            <summary> Set the wCellSpacingDefaultBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingDefaultRight">
            <summary> Get the wCellSpacingDefaultRight field for the TAP record.</summary>
            <summary> Set the wCellSpacingDefaultRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingDefaultTop">
            <summary> Get the ftsCellPaddingDefaultTop field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingDefaultTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingDefaultLeft">
            <summary> Get the ftsCellPaddingDefaultLeft field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingDefaultLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingDefaultBottom">
            <summary> Get the ftsCellPaddingDefaultBottom field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingDefaultBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingDefaultRight">
            <summary> Get the ftsCellPaddingDefaultRight field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingDefaultRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingDefaultTop">
            <summary> Get the wCellPaddingDefaultTop field for the TAP record.</summary>
            <summary> Set the wCellPaddingDefaultTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingDefaultLeft">
            <summary> Get the wCellPaddingDefaultLeft field for the TAP record.</summary>
            <summary> Set the wCellPaddingDefaultLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingDefaultBottom">
            <summary> Get the wCellPaddingDefaultBottom field for the TAP record.</summary>
            <summary> Set the wCellPaddingDefaultBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingDefaultRight">
            <summary> Get the wCellPaddingDefaultRight field for the TAP record.</summary>
            <summary> Set the wCellPaddingDefaultRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingOuterTop">
            <summary> Get the ftsCellSpacingOuterTop field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingOuterTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingOuterLeft">
            <summary> Get the ftsCellSpacingOuterLeft field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingOuterLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingOuterBottom">
            <summary> Get the ftsCellSpacingOuterBottom field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingOuterBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellSpacingOuterRight">
            <summary> Get the ftsCellSpacingOuterRight field for the TAP record.</summary>
            <summary> Set the ftsCellSpacingOuterRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingOuterTop">
            <summary> Get the wCellSpacingOuterTop field for the TAP record.</summary>
            <summary> Set the wCellSpacingOuterTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingOuterLeft">
            <summary> Get the wCellSpacingOuterLeft field for the TAP record.</summary>
            <summary> Set the wCellSpacingOuterLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingOuterBottom">
            <summary> Get the wCellSpacingOuterBottom field for the TAP record.</summary>
            <summary> Set the wCellSpacingOuterBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellSpacingOuterRight">
            <summary> Get the wCellSpacingOuterRight field for the TAP record.</summary>
            <summary> Set the wCellSpacingOuterRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingOuterTop">
            <summary> Get the ftsCellPaddingOuterTop field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingOuterTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingOuterLeft">
            <summary> Get the ftsCellPaddingOuterLeft field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingOuterLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingOuterBottom">
            <summary> Get the ftsCellPaddingOuterBottom field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingOuterBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FtsCellPaddingOuterRight">
            <summary> Get the ftsCellPaddingOuterRight field for the TAP record.</summary>
            <summary> Set the ftsCellPaddingOuterRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingOuterTop">
            <summary> Get the wCellPaddingOuterTop field for the TAP record.</summary>
            <summary> Set the wCellPaddingOuterTop field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingOuterLeft">
            <summary> Get the wCellPaddingOuterLeft field for the TAP record.</summary>
            <summary> Set the wCellPaddingOuterLeft field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingOuterBottom">
            <summary> Get the wCellPaddingOuterBottom field for the TAP record.</summary>
            <summary> Set the wCellPaddingOuterBottom field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.WCellPaddingOuterRight">
            <summary> Get the wCellPaddingOuterRight field for the TAP record.</summary>
            <summary> Set the wCellPaddingOuterRight field for the TAP record.</summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TAPAbstractType.FKeepFollow">
            <summary> Get the fKeepFollow field for the TAP record.</summary>
            <summary> Set the fKeepFollow field for the TAP record.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.Clone">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.resetColumns(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.setRgshd(System.Int32,SoftArtisans.OfficeWriter.WordWriter.ShadingDescriptor[])">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultBottomBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultBottomPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultHorzBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultLeftBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultLeftPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultRightBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultRightPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultTopBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultTopPadding">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl.DefaultVertBorder">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.GetIgnoredCharacters">
            <summary>
            Gets a list of all special (non-printable) characters that should be ignored when 
            searching.
            </summary>
            <remarks>Ignores the cell end character at the end of each row in addition to those 
            ignored by all the cells and any other children.</remarks>
            <returns>the head of an unsorted list of the character positions of any non-printable 
            characters. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.addColumns(System.Int32)">
            <summary> Appends columns to the horizontal end of the table.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.insertColumns(System.Int32,System.Int32)">
            <summary> Inserts columns at the specified index.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.deleteColumns(System.Int32,System.Int32)">
            <summary> Deletes columns startIndex to startIndex + numColumns</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.deleteRows(System.Int32,System.Int32)">
            <summary> Deletes rows startIndex to startIndex + numRows</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.addRow(SoftArtisans.OfficeWriter.Shared.DataSource,System.Int32[])">
            <summary>
            Adds a row to the end of this table and fills it with data.
            </summary>
            <param name="source">the data source from which to retrieve the data</param>
            <param name="columnIndexFilter">a list of the columns to be added</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.addRows(System.Int32)">
            <summary> Appends empty rows to the vertical end of the table. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.insertRows(System.Int32,System.Int32)">
            <summary> Inserts empty rows at the specified index</summary>
            <param name="index">the index at which to insert. Any row with an index greater
            than or equal to this index will be after the new rows</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.addRows(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.TableRow})">
            <summary>
            Adds a list of rows to the internal list of rows at the end.
            </summary>
            <param name="rows">new rows to be added to the end of this table</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableModel.addRows(System.Int32,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.TableRow})">
            <summary>
            Adds a list of rows to the internal list of rows at the specified index.
            </summary>
            <param name="index">the index at which to insert. Any row with an index greater
            than or equal to this index will be after the new rows</param>
            <param name="rows">the new rows to be inserted into this table</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TableRow.Cells">
            <method.excluded>  </method.excluded>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TableSprmUncompressor.unCompressTAPOperation(SoftArtisans.OfficeWriter.WordWriter.TableFormattingModelImpl,SoftArtisans.OfficeWriter.WordWriter.SprmOperation)">
            <summary> Used to uncompress a table property. Performs an operation defined
            by a sprm stored in a tapx.
            
            </summary>
            <param name="newTAP">The TableProperties object to perform the operation on.
            </param>
            <param name="operand">The operand that defines this operation.
            </param>
            <param name="param">The parameter for this operation.
            </param>
            <param name="varParam">Variable length parameter for this operation.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TableTagClump.GetStartTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement@)">
            <summary>
            Returns the last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>
            </summary>
            <param name="endClump"></param>
            <param name="endPath"></param>
            <returns>The last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>, or <c>null</c> if there isn't a start/end tag pair.
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump">
            <summary>
            When you have nesting or adjacent bookmarks, Word places multiple bookmarks together, but
            not always in the correct order; this class handles those bookmark tags.
            </summary>
            <remarks>Depending on how you insert the bookmarks, nested bookmarks with either no header
            or footer, could be stored as  Gs Bs ... Ge ... Be.
            
            Bookmark tags that are not bound to a repeat block, will be written out once. Those that are
            tied to a bookmark will not be written out. A tag is considered to be bound to a bookmark if
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.GetStartTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement@)"/> returns that start/end pair.</remarks>
            <seealso cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWriteOnce"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Do not call peek before calling this method.
            </summary>
            <param name="reader"></param>
            <param name="documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkStart},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
              Do not call peek before calling this method.
            </summary>
            <param name = "reader"></param>
            <param name = "startTagsBeforeThis">The start tags that should be included in this tag
              clump, even though they do not appear immediately after the start tag, fore example, in
              tables, a bookmark that is in a table cell could have its start tag before the cell, but
              we want the tag clump to be created at the start of the contents of the table  cell, so
              we will pass it the list of all the bookmarks that could end in the cell.</param>
            <param name = "documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkStart},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
              Do not call peek before calling this method.
            </summary>
            <param name = "reader"></param>
            <param name = "startTagsBeforeThis">The start tags that should be included in this tag
              clump, even though they do not appear immediately after the start tag, fore example, in
              tables, a bookmark that is in a table cell could have its start tag before the cell, but
              we want the tag clump to be created at the start of the contents of the table  cell, so
              we will pass it the list of all the bookmarks that could end in the cell.</param>
            <param name = "overridePath">In some cases you may want to change the path for all the start
              and end tags (but not this tagClump), to do this you can set this variable to whatever
              path you want, but be careful managing these children</param>
            <param name = "documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.MoveToParagraphStartTag">
            <summary>
            If one of the start tags needs to be moved to it's parent, all of the remaining ones do
            also.
            </summary>
            <remarks>If start tags can be moved to the parent, then there is no content in the
            paragraph before the bookmark tags, implying that the end tags in this clump were also
            moved to the paragraph tag, thus we do not have to worry about the end tags overlapping
            with the start tags.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.GetStartTag(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement@)">
            <summary>
            Returns the last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>
            </summary>
            <param name="endClump"></param>
            <param name="endPath"></param>
            <returns>The last start tag in this tag clump that corresponds to an end tag in 
            <paramref name="endClump"/>, or <c>null</c> if there isn't a start/end tag pair.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.StartCount">
            <summary>
            The number of start tags
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.EndCount">
            <summary>
            The number of end tags
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.EndTagsInParagraph">
            <summary>
            We move EndTags to the paragraph open tag if there is no content, this lets you know
            if the end tags are in a paragarph
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.StartPath">
            <summary>
            The path to the first bookmark in this TagClump. If there are no bookmarks found for 
            this tag clump, then this will point to the first tag after the one that the reader was
            on when the constructor was called.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.ContainedTags">
            <summary>
            The number of tags actually contained between the start and end path of this tag (aka
            the number of elements that this block will call skip on during Process)
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.PointsToActualTags">
            <summary>
            <c>true</c> if this block points to bookmark tags, <c>false</c> if there are no actual
            bookmark tags at <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.StartPath"/>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.AlreadyAdded">
            <summary>
            Denotes whether or not this has already been added as the child of a bookmark. 
            </summary>
            <remarks>This is primarily here, because this needs to be inserted in the inner most
            child with an end tag in this clump. Thus, if a block has a bookmark child, it has no
            real way of knowing whether that bookmark already added the end tags because of a nested
            bookmark. So thus it is handled by the tag clump itself. <br/>
            Once this is set to <c>true</c>, <see cref="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump.Ignore"/>, will also return <c>true</c>.
            </remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Tbkd">
            <summary>The 2008 Microsoft documentation says:
              The Tbkd structure is used by PlcftxbxBkd and by PlcfTxbxHdrBkd 
              to associate ranges of text from the Textboxes Document and the
              Header Textboxes Document with FTXBXS objects from PlcftxbxTxt
              and PlcfHdrtxbxTxt respectively.
              
            It is contained inside TbkdNode, which is in turn contained in Tbkds</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Tbkds">
            <summary>A PlexOfCps of TbkdNode objects</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Tbkds.createTerminator">
            <summary>The 2008 documentation says:
            
            "In all but the last Tbkd object,
             itxbxs MUST be a valid FTXBXS index. The final Tbkd
             is not associated with any FTXBXS object. The itxbxs
             value for the final Tbkd MUST be ignored."
            
            This function creates that object at the end.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Tbkds.updateTerminator">
            This function updates the designated unused final element in the PlexOfCps
            to still be at the end. See createTerminator() for further explanation.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TemplateDocument">
            <summary> Keeps a collection of SubDocuments and Formats
            Acts as a SubDocument factory and Format factory
            Responsible for fixing document's features.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Textboxes">
            <summary>This is a set of FTXBXSNodes, which wrap FileTextboxStory objects, which match textboxes to shapes</summary>
            
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Textboxes.updateTerminator">
            <summary>This function updates the designated unused final element in the PlexOfCps
            to still be at the end. See createTerminator() for further explanation.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Textboxes.createTerminator">
            <summary>"The last FTXBXS in the PLC MUST be a reusable structure rather than
            an actual textbox. Additional reusable FTXBXS structures can occur
            at any index in the PLC."  - 2008 Microsoft documentation
            
            This function creates this reusable structure. See the documentation for the difference
            between a reusable and a nonreusable structure.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Textboxes.ToDebugStringText(System.String,System.Int32)">
            <summary>
            Print out the text for each individual textbox
            </summary>
            <param name="text"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextPiece">
            <summary> Lightweight representation of a text piece.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.#ctor(System.Int32,System.Int32,System.SByte[],SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)">
            <summary>
            Creates a new text piece
            </summary>
            <param name="start">the start character position of this text piece</param>
            <param name="end">the end character position of this text piece</param>
            <param name="text">the actual text</param>
            <param name="pd">the piece descriptor describing this text piece</param>
            <exception cref="T:System.ArgumentException">if either 
            <see cref="!:StgFactory.UnicodeEncodingString"/> or 
            <see cref="!:StgFactory.ASCIIEncodingString"/> is not supported
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.#ctor(System.Int32,System.Int32,System.Text.StringBuilder,SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)">
            <summary>
            Creates a new text piece
            </summary>
            <param name="start">the start character position of this text piece</param>
            <param name="end">the end character position of this text piece</param>
            <param name="text">the actual text</param>
            <param name="pd">the piece descriptor describing this text piece</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.substring(System.Int32,System.Int32)">
            <summary>
            Gets a substring of this text piece
            </summary>
            <param name="start">the starting character index within this text piece</param>
            <param name="end">the end index of the string to be retrieved</param>
            <returns>the string that is between the start index (inclusive) and the end index 
            (exclusive)</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">if the given start index is less than 
            zero or if the end index is greater than or equal to the length of this text piece
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Delete(System.Int32,System.Int32)">
            <summary>
            Deletes a span of text from this text piece.
            </summary>
            <param name="index">The first character to delete</param>
            <param name="length">The number of characters to delete</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given string into this text piece.
            </summary>
            <param name="index">the index at which to insert</param>
            <param name="text">the text to insert</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than 
            the current length of this instance.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Append(SoftArtisans.OfficeWriter.WordWriter.TextPiece)">
            <summary>
            Appends another text piece onto the end of this one. The prm should be 
            the same for both text pieces, if they are note the other's will be
            ignored. It is assumed that the other text piece has a start cp equal to 
            the end cp of this one.
            </summary>
            <param name="textPiece">textPiece the other piece of text to be merged with this one.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Append(System.String)">
            <summary>
            Appends the given string to this text piece
            </summary>
            <param name="text">the string to append</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Append(System.SByte[],SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)">
            <summary>
            Appends a selection of bytes from the file to this text piece and merges in the other 
            piece descriptor. You must call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Appendable(SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)"/> first to ensure that this 
            won't cause any issues.
            </summary>
            <param name="text">the bytes containing the actual text to be added to this text piece
            </param>
            <param name="pd">the piece descriptor describing the additional bytes.</param>
            <exception cref="T:System.ArgumentException">if either 
            <see cref="!:StgFactory.UnicodeEncodingString"/> or 
            <see cref="!:StgFactory.ASCIIEncodingString"/> is not supported
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Appendable(SoftArtisans.OfficeWriter.WordWriter.POIPieceDescriptor)">
            <summary>
            Returns whether or not a text piece with the given pd can be appended to this one.
            </summary>
            <param name="pd">the piece descriptor describing a text piece to be appended</param>
            <returns><code>true</code> if this piece has the same prm as that of the given
            piece descriptor</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Item(System.Int32)">
            <summary>
            The character at the given index
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.RawBytes">
            <summary>
            The bytes of the text encoded based on <see cref="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.UsesUnicode"/>
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.PieceDescriptorBytes">
            <summary>
            The bytes describing this piece.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.PieceEncoding">
            <summary>
            The appropriate encoding string for this text piece
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.EncodedLength">
            <summary>
            The number of bytes this text piece uses when encoded.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.CharacterLength">
            <summary>
            The number of characters in this text piece
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.FcStart">
            <summary>
            The position (FC) within the main stream of the first character in this text piece
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPiece.UsesUnicode">
            <returns> If this text piece uses unicode
            </returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextPiece.Pair">
            <summary>
            A simple struct for holding two text pieces. This is primarily so that you can split
            a text piece into two without affecting the original.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.minPieceSize">
            <summary>For each piece we have to write out a piece descriptor (pcd) and FC which
            is 12 bytes. OK, I have no idea why this was 8. 
            </summary>
            <remarks>Since we have to write 12 bytes out for each piece, it's 
            probably unwise to write out a piece at the end of a span if it's less 
            than this in length. We still need to write out text pieces that are less
            than this length, thus we still want to write the text piece into a small
            span, if it fits.
            </remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.originalTextRanges">
            <summary>
            Holds a list of all the original ranges of FCs.
            </summary>
            <remarks>This holds a subset of the readConvertr (no CPs or unicode). Since these do 
            not have to keep track of CPs, any two continuous blocks can be cocatenated.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.readConverter">
            <summary>
            The converter created when the text pieces are read in, corresponding to the file 
            read in.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.writeConverter">
            <summary>
            The converter created when the text pieces are written out, corresponding to the file
            written.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.GetReadConverter">
            <summary>
            Returns the converter when reading in the table and removes internal references
            </summary>
            <remarks>This removes internal references to the returned read converter, so that
            it can potentially be picked up by garbage collection.</remarks>
            <returns>the converter created while reading the file, corresponds to the file opened,
            or <code>null</code> if this has already been called.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.GetWriteConverter">
            <summary>
            Returns the converter when writing out the table and removes internal references
            </summary>
            <remarks>This removes internal references to the returned write converter, so that
            it can potentially be picked up by garbage collection.</remarks>
            <returns>the converter created while writing out the file, corresponds to the file 
            written, or <code>null</code> if this has already been called.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Substring(System.Int32,System.Int32)">
            <summary>
            Returns the text between two character positions
            </summary>
            <param name="startCp">the starting character position</param>
            <param name="endCp">the ending character position  (exclusive)</param>
            <returns>the string of text between startCp and endCp</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.text(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Grabs the text spanning between the cp in one text piece to another cp in another text
            piece
            </summary>
            <param name="listStart">the first text piece to grab from</param>
            <param name="listEnd">the last text piece (can be the same as the first</param>
            <param name="start">the starting character position to grab</param>
            <param name="end">the ending character position to grab (exclusive)</param>
            <returns>the text between the starting character position and the ending charcter 
            postion</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.WritePieceAtEnd(SoftArtisans.OfficeWriter.WordWriter.TextPiece,SoftArtisans.OfficeWriter.WordWriter.WWOutputStream,SoftArtisans.OfficeWriter.WordWriter.PlexOfCps,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.TextRange},System.Boolean)">
            <summary>
            Writes the given text piece to the end of the given document stream and adds an 
            appropriate Piece Descriptor to the give nplex of Cps
            </summary>
            <param name="textPiece">the piece to be written to the end of the stream</param>
            <param name="docStream">the stream to which to write</param>
            <param name="textPlex">the plex of CPs of piece descriptors</param>
            <param name="newRanges">a list of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TextRange"/> that were written to the file
            </param>
            <param name="alwaysUseUnicode">if <code>true</code> the text piece will be written in unicode, 
            otherwise they will be written in cp1252 </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given text at the given cp
            </summary>
            <param name="cp">the character position at which to insert teh text</param>
            <param name="text">the text to be inserted</param>
            <exception cref="T:System.ArgumentOutOfRangeException">if the cp is invalid</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Append(System.String)">
            <summary>
            Appends the given text to the end of the entire document
            </summary>
            <param name="text">the text to be added to the document</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.delete(System.Int32,System.Int32)">
            <summary>
            Deletes a span of text from the text of this document
            </summary>
            <param name="cp">the first character position to be removed</param>
            <param name="length">the number of characters to remove</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.EndCp">
            <summary>
            The last character position in the document
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.EndFc">
            <summary>
            The last file position of the last text piece written.
            </summary>
            <remarks>You must call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.writeTo(SoftArtisans.OfficeWriter.WordWriter.WWOutputStream,System.Boolean)"/> first</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.FcRange">
            <summary>
            Simple struct for containing a range of FCs 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Rangerator">
            <summary>
            A simple "enumerator" for getting the original ranges that are worth writing text 
            pieces to.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Rangerator.#ctor(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.FcRange})">
            <summary>
            Creates a new Rangerator to enumerate over the original ranges for writing text 
            pieces out to them.
            </summary>
            <param name="originalTextRanges">the text ranges that were in the original file
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Rangerator.MoveNext(System.Int32)">
            <summary>
            Moves to the next range worth writing to.
            </summary>
            <remarks>A range is ocnsidered worth writing to if either:
            <list type="bullet">
            <item><description>The length of the range is longer than the length of the text 
            when encoded, or</description></item>
            <item><description>The length of the range is longer than the cost of writing a
            piece descriptor to the piece table (which is 12 bytes)
            </description></item></list></remarks>
            <param name="textPieceLength">the length of the text piece when encoded.</param>
            <returns><code>true</code> if a text piece of the given length can be written 
            within the original ranges; <code>false</code> if it could not and the ranges 
            have been exhausted</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.TextPieceTable.Rangerator.Current">
            <summary>
            The current FcRange to write to as per the restrictions of MoveNext
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TextRange">
            <summary>
            A simple class for maintaining the span of a range of text without actually maintaining 
            the text.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new text range with all the necessary information
            </summary>
            <param name="startFc">the first FC of the text range (inclusive)</param>
            <param name="endFc">the last FC of the text range (exclusive)</param>
            <param name="startCp">the first CP of the text range (inclusive)</param>
            <param name="endCp">the last CP of the text range (exclusive)</param>
            <param name="unicode"><code>true</code> if this text range is encoded using 
            unicode, <code>false</code> if it's encoded using Windows-1252</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.#ctor(SoftArtisans.OfficeWriter.WordWriter.TextPiece)">
            <summary>
            Creates a text range based on the given text piece.
            </summary>
            <param name="textPiece">the text piece this range should describe</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.CompareTo(SoftArtisans.OfficeWriter.WordWriter.TextRange)">
            <summary>
            Compares this TextRange to another one by their FCs.
            </summary>
            <param name="other">another text range to compare with this one.</param>
            <returns>a value less than zero if this range falls before the other in the file, zero 
            if they fall at the same location, and a positive number if this range falls after the 
            other.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.ContainsFc(System.Int32)">
            <summary>
            Returns whether or not the given file position points to a location within this text 
            range
            </summary>
            <param name="fc">the FC to search for.</param>
            <returns><code>true</code> if the given FC is within this range.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.ContainsFcAtEnd(System.Int32)">
            <summary>
            Returns whether or not the given file position points to a location
             within this text range with both ends inclusive.
            </summary>
            <remarks>
            The reason that the start is inclusive is for this situation:
            The end FC of a character run is set to the start of the next character 
            run, but if the character run ends at the end of a text piece, this means 
            that the end of the character run will point to the start of the next 
            text piece. The same can be applied to paragraph format entries.</remarks>
            <param name="fc">the FC to search for</param>
            <returns><code>true</code> if the given FC is greater than or equal to the start of
            this range and less than or equal to the end of this range</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.FcToCp(System.Int32)">
            <summary>
            Returns the character position corresponding to the given file position.
            </summary>
            <remarks>This will have strange results if the given FC is not within this
            text range, <see cref="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.ContainsFc(System.Int32)"/> or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.ContainsFcAtEnd(System.Int32)"/>
            should be called first.</remarks>
            <param name="fc">the file position to convert</param>
            <returns>the character position corresponding to the given file position</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TextRange.CpToFc(System.Int32)">
            <summary>
            Returns the file position corresponding to the given character position.
            </summary>
            <remarks>
            Note: This will have strange results if the given CP is not within this
            text range, but for efficiencies sake a containsCp method was left out.</remarks>
            <param name="cp">the character position to convert</param>
            <returns>the file position corresponding to the given character position</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.TriState">
            <summary>
            Provides a value of either true, false, or unset
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter">
            <Doc>
      <summary>
        <para>Twips are the units of measurement used by the WordWriter API. A single twip represents 1/1440 of an inch. <see cref="T:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter"/> is a utility class that converts between twips and other units of measurement.</para>
      </summary>
      <example>
        <para>
          <code>

          WordApplication wwApp = new WordApplication();
          Document doc = wwApp.Create();
          Section section = doc.CreateSectionAfter();
          section.PageWidth = TwipsConverter.FromInches(8.5);
          section.PageHeight = TwipsConverter.FromInches(11);
        </code>
          <br/>
          <code>

          Dim wwApp As New WordApplication()
          Dim doc As Document = wwApp.Create()
          Dim section As Section = doc.CreateSectionAfter()
          section.PageWidth = TwipsConverter.FromInches(8.5)
          section.PageHeight = TwipsConverter.FromInches(11)
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.ToInches(System.Int32)">
            <Doc>
        <summary>
          <para>Converts twips to inches.  A twip is 1/1440 of an inch.</para>
        </summary>
        <param name="twips">
          <para>The number of twips to convert to inches.</para>
        </param>
        <returns>
          <para>The result of the conversion (inches).</para>
        </returns>
        <example>
          <para>
            <code>
TwipsConverter.ToInches(12240);</code>
            <br/>
            <code>
TwipsConverter.ToInches(12240)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.ToCentimeters(System.Int32)">
            <Doc>
        <summary>
          <para>Converts twips to centimeters.  A twip is 1/1440 of an inch and 1/567 of a centimeter.</para>
        </summary>
        <param name="twips">
          <para>The number of twips to convert to centimeters.</para>
        </param>
        <returns>
          <para>The result of the conversion (centimeters).</para>
        </returns>
        <example>
          <para>
            <code>
TwipsConverter.ToCentimeters(12240);</code>
            <br/>
            <code>
TwipsConverter.ToCentimeters(12240)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.ToPoints(System.Int32)">
            <Doc>
        <summary>
          <para>Converts twips to points.  A twip is 1/1440 of an inch and a point is 1/72 of an inch.</para>
        </summary>
        <param name="twips">
          <para>The number of twips to convert to centimeters.</para>
        </param>
        <returns>
          <para>The result of the conversion (points).</para>
        </returns>
        <example>
          <para>
            <code>
TwipsConverter.ToPoints(12240);</code>
            <br/>
            <code>
TwipsConverter.ToPoints(12240)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.FromInches(System.Double)">
            <Doc>
        <summary>
          <para>Converts inches to twips.  A twip is 1/1440 of an inch.</para>
        </summary>
        <param name="inches">
          <para>The number of inches to convert.</para>
        </param>
        <returns>
          <para>The result of the conversion (twips).</para>
        </returns>
        <example>
          <para>
            <code>

          WordApplication wwApp = new WordApplication();
          Document doc = wwApp.Create();
          Section section = doc.CreateSectionAfter();
          section.PageWidth = TwipsConverter.FromInches(8.5);
          section.PageHeight = TwipsConverter.FromInches(11);
        </code>
            <br/>
            <code>

          Dim wwApp As New WordApplication()
          Dim doc As Document = wwApp.Create()
          Dim section As Section = doc.CreateSectionAfter()
          section.PageWidth = TwipsConverter.FromInches(8.5)
          section.PageHeight = TwipsConverter.FromInches(11)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.FromCentimeters(System.Double)">
            <Doc>
        <summary>
          <para>Converts centimeters to twips.  A twip is 1/567 of a centimeter.</para>
        </summary>
        <param name="cm">
          <para>The number of centimeters to convert.</para>
        </param>
        <returns>
          <para>The result of the conversion (twips).</para>
        </returns>
        <example>
          <para>
            <code>

          WordApplication wwApp = new WordApplication();
          Document doc = wwApp.Create();
          Section section = doc.CreateSectionAfter();
          section.PageWidth = TwipsConverter.FromCentimeters(21.59);
          section.PageHeight = TwipsConverter.FromCentimeters(27.94);
        </code>
            <br/>
            <code>

          Dim wwApp As New WordApplication()
          Dim doc As Document = wwApp.Create()
          Dim section As Section= doc.CreateSectionAfter()
          section.PageWidth = TwipsConverter.FromCentimeters(21.59)
          section.PageHeight = TwipsConverter.FromCentimeters(27.94)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.TwipsConverter.FromPoints(System.Double)">
            <Doc>
        <summary>
          <para>Converts points to twips.  1 point = 1/72 inch = 20 twips.<br/>1 inch = 72 points = 1440 twips</para>
        </summary>
        <param name="pts">
          <para>The number of points to convert.</para>
        </param>
        <returns>
          <para>The result of the conversion (twips).</para>
        </returns>
        <example>
          <para>
            <code>

          WordApplication wwApp = new WordApplication();
          Document doc = wwApp.Create();
          Section section = doc.CreateSectionAfter();
          section.PageWidth = TwipsConverter.FromPoints(612);
          section.PageHeight = TwipsConverter.FromPoints(792);
        </code>
            <br/>
            <code>

          Dim wwApp As New WordApplication()
          Dim doc As Document = wwApp.Create()
          Dim section As Section = doc.CreateSectionAfter()
          section.PageWidth = TwipsConverter.FromPoints(612)
          section.PageHeight = TwipsConverter.FromPoints(792)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Units">
            <Doc>
      <summary>
        <para>The different types of units used by WordWriter</para>
      </summary>
      <remarks>
        <para>Not all units are supported by all methods/properties, check the documentation before selecting units.</para>
      </remarks>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Units.Null">
            <Doc>
        <summary>Default unit; associated size is ignored</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Units.Auto">
            <Doc>
        <summary>Size is automatically chosen; associated size is ignored</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Units.Percent">
            <Doc>
        <summary>Size is measured as a percent of the total available width</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Units.Twips">
            <Doc>
        <summary>Size is measured in twips</summary>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord">
            <summary> This record is used whenever a escher record is encountered that
            we do not explicitly support.
            
            </summary>
            <author>  Glen Stampoultzis (glens at apache.org)
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord.thedata">
            <summary>The data for this record not including the the 8 byte header </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord.fillFields(System.SByte[],System.Int32,SoftArtisans.OfficeWriter.Shared.EscherRecordFactory)">
            <summary> This method deserializes the record from a byte array.
            
            </summary>
            <param name="data">         The byte array containing the escher record information
            </param>
            <param name="offset">       The starting offset into <code>data</code>.
            </param>
            <param name="recordFactory">May be null since this is not a container record.
            </param>
            <returns> The number of bytes read from the byte array.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord.serialize(System.Int32,System.SByte[],SoftArtisans.OfficeWriter.Shared.EscherSerializationListener)">
            <summary> Writes this record and any contained records to the supplied byte
            array.
            
            </summary>
            <returns>  the number of bytes written.
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord.RecordSize">
            <summary> Returns the number of bytes that are required to serialize this record.
            
            </summary>
            <returns> Number of bytes
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.UnknownEscherRecord.RecordName">
            <summary> The short name for this record</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.UnparsedPlexNode">
            <summary> Summary description for UnparsedPlexNode.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.UnsignedInt32i">
            <summary> <p>Title: </p>
            <p>Description: </p>
            <p>Copyright: Copyright (c) 2002 SoftArtisans</p>
            <p>Company: SoftArtisans</p>
            </summary>
            <author>  Denis Levin
            </author>
            <version>  1.0
            </version>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.UnsyncByteArrayInputStream.DoRead``1(``0[],System.Int32,System.Int32)">
            <summary>
            Read bytes from a stream
            </summary>
            <typeparam name="T"></typeparam>
            <param name="aBuffer">This must be either byte[] or sbyte[]</param>
            <param name="aOffset"></param>
            <param name="aLength"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization">
            <summary>
            This provides space-efficient serialization to ValueType objects (int, byte, float, etc)
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization.SerializeRow(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.MarkerData[])">
            <summary>
            Write a row of cells to the outputStream
            </summary>
            <param name="outputStream">destination for serialization</param>
            <param name="cells">data to serialize</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.ValueTypeSerialization.DeserializeRow(System.IO.Stream)">
            <summary>
            Convert some data in a stream to a row of cells
            </summary>
            <param name="inputStream">The input stream</param>
            <returns>a row of cells</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.VariancePopulationBinding">
            <summary>
            A Binding to the DataRows for getting the variance of all the numbers in a column, as an
            entire population. 
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.Formulas.VarianceSampleBinding">
            <summary>
            A Binding to the DataRows for getting the variance of all the numbers in a column,
            as a sample. 
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.VariantHelper.VT_FILETIME">
            <summary> <p>[P] FILETIME. The FILETIME structure holds a date and time
            associated with a file. The structure identifies a 64-bit
            integer specifying the number of 100-nanosecond intervals which
            have passed since January 1, 1601. This 64-bit value is split
            into the two dwords stored in the structure.</p>
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Watermark">
            <Doc>
      <summary>
        <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Watermark"/> object represents a document's watermark, which is an image or text that when printed appears in the background of a document.  The property <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.Watermark"/> returns a <c>Watermark</c> object.</para>
      </summary>
      <example>
        <para>
          <code>

WordApplication app = new WordApplication();
Document doc = app.Create();
Watermark wmark = doc.Watermark;
</code>
          <br/>
          <code>

Dim app As New WordApplication()
Dim doc As Document = app.Create()
Dim wmark As Watermark = doc.Watermark
</code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.ClearWatermark">
            <Doc>
        <summary>
          <para>Clears all properties assigned to the watermark.<br/>Call this method to remove a watermark from the document.</para>
        </summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.WatermarkType">
            <Doc>
        <summary>
          <para>Returns the watermark's type, which may be image, text, or none.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          Watermark.Type markType = wmark.WatermarkType;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          Dim markType As Watermark.Type = wmark.WatermarkType
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Color">
            <Doc>
        <summary>
          <para>Sets or returns the color of the watermark.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;

          //--- Get Color
          System.Drawing.Color wmarkColor = wmark.Color;

          //--- Set Color
          wmark.Color = System.Drawing.Color.Blue;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark

          '--- Get Color
          Dim wmarkColor As System.Drawing.Color = wmark.Color

          '--- Set Color
          wmark.Color = System.Drawing.Color.Blue
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Image">
            <Doc>
        <summary>
          <para>Sets or returns an image to use as the watermark.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Image = File.Open("somepic.gif");
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Image = File.Open("somepic.gif")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Scale">
            <Doc>
        <summary>
          <para>Sets or returns the size of a watermark image as a percentage of its actual size in the source file.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Image = File.Open("somepic.gif");
          wmark.Scale = 75;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Image = File.Open("somepic.gif")
          wmark.Scale = 75
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Washout">
            <Doc>
        <summary>
          <para>Sets or returns whether an image watermark will be faded or not.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Image = File.Open("somepic.gif");
          wmark.Washout = true;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Image = File.Open("somepic.gif")
          wmark.Washout = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Text">
            <Doc>
        <summary>
          <para>Sets or returns text to use as the document's watermark.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Text = "CONFIDENTIAL";
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Text = "CONFIDENTIAL"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.FontName">
            <Doc>
        <summary>
          <para>Sets or returns the font of watermark text.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Text = "CONFIDENTIAL";
          wmark.FontName = "Arial";
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Text = "CONFIDENTIAL"
          wmark.FontName = "Arial"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Size">
            <Doc>
        <summary>
          <para>Sets or returns the size of watermark text.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Text = "CONFIDENTIAL";
          wmark.Size = 36;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Text = "CONFIDENTIAL"
          wmark.Size = 36
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.WatermarkLayout">
            <Doc>
        <summary>
          <para>Sets or returns the layout of watermark text.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Text = "CONFIDENTIAL";
          wmark.WatermarkLayout = Watermark.Layout.Diagonal;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Text = "CONFIDENTIAL"
          wmark.WatermarkLayout = Watermark.Layout.Diagonal
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Semitransparent">
            <Doc>
        <summary>
          <para>Sets or returns whether a text watermark will be semitransparent or not.</para>
        </summary>
        <example>
          <para>
            <code>

          WordApplication app = new WordApplication();
          Document doc = app.Create();
          Watermark wmark = doc.Watermark;
          wmark.Text = "CONFIDENTIAL";
          wmark.Semitransparent = true;
        </code>
            <br/>
            <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Create()
          Dim wmark As Watermark = doc.Watermark
          wmark.Text = "CONFIDENTIAL"
          wmark.Semitransparent = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout">
            <Doc>
        <summary>
          <para>Used to specify the layout for a text watermark.</para>
        </summary>
        <example>
          <para>
            <code>

            WordApplication app = new WordApplication();
            Document doc = app.Create();
            Watermark wmark = doc.Watermark;
            wmark.Text = "CONFIDENTIAL";
            wmark.WatermarkLayout = Watermark.Layout.Diagonal;
          </code>
            <br/>
            <code>

            Dim app As New WordApplication()
            Dim doc As Document = app.Create()
            Dim wmark As Watermark = doc.Watermark
            wmark.Text = "CONFIDENTIAL"
            wmark.WatermarkLayout = Watermark.Layout.Diagonal
          </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.Diagonal">
            <Doc>
          <summary>Text is diagonal</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.Horizontal">
            <Doc>
          <summary>Text is horizontal</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Layout&quot;]/Member[@signature=&quot;Watermark.Layout.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Layout&quot;]/Member[@signature=&quot;Watermark.Layout.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Layout&quot;]/Member[@signature=&quot;Watermark.Layout.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Layout&quot;]/Member[@signature=&quot;Watermark.Layout.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Layout.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Layout&quot;]/Member[@signature=&quot;Watermark.Layout.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type">
            <Doc>
        <summary>
          <para>Used to specify a type of watermark.</para>
        </summary>
        <example>
          <para>
            <code>

            WordApplication app = new WordApplication();
            Document doc = app.Create();
            Watermark wmark = doc.Watermark;
            Watermark.Type markType = wmark.WatermarkType;
          </code>
            <br/>
            <code>

            Dim app As New WordApplication()
            Dim doc As Document = app.Create()
            Watermark wmark = doc.Watermark
            Watermark.Type markType = wmark.WatermarkType
          </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.Image">
            <Doc>
          <summary>Image Watermark</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.None">
            <Doc>
          <summary>No Watermark</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.Thick">
            <Doc>
          <summary>Text Watermark</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Type&quot;]/Member[@signature=&quot;Watermark.Type.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Type&quot;]/Member[@signature=&quot;Watermark.Type.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Type&quot;]/Member[@signature=&quot;Watermark.Type.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Type&quot;]/Member[@signature=&quot;Watermark.Type.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.Watermark.Type.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;Watermark&quot;]/Member[@signature=&quot;Watermark.Type&quot;]/Member[@signature=&quot;Watermark.Type.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WeakReferenceCache">
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WeakReferenceCache.findIndex(SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <param name="ref">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WeakReferenceCache.WeakReferenceCacheEnumerator.Reset">
            <summary>
            Reset is not supported for this IEnumerator, throws a NotSupportedException
            </summary>
            <remarks>
            Quote from IEnumerator.Reset().  The Reset method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a NotSupportedException.
            </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WeakReferenceCache.WeakReferenceCacheEnumerator.cleanup">
            <summary>
            Removes any elements that were found to be null references while iterating through
            </summary>
            <remarks>This should only be called after done iterating through the elements, or 
            the next call to MoveNext() or Current will throw an exception</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication">
            <Doc>
      <summary>
        <para>
          <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/> is the main class for pure code-based Word document generation (for information about template-based workbook generation, see <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> ). This class is an engine used to open, create, and write (save to disk or stream to a browser) Word documents. A single instance of <c>WordApplication</c> can generate multiple documents.</para>
      </summary>
      <remarks>
        <para>A generated document is represented by the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> class.</para>
        <para>The <c>WordApplication</c> class is in the <c>SoftArtisans.OfficeWriter.WordWriter</c> namespace. The class can can be referenced as <c>SoftArtisans.OfficeWriter.WordWriter</c>. To minimize typing and errors, import the namespace to the aspx page, and reference the class as <c>WordApplication</c>, without the namespace prefix. If you are coding directly in the .aspx page, following the <c>Page</c> directive, include:</para>
        <para>If you are coding in the code-behind page (.aspx.cs or .aspx.vb), include a <c>using</c> or <c>Imports</c> statement at the top of the code behind page:</para>
        <para>
          <code>
using SoftArtisans.OfficeWriter.WordWriter;</code>
        </para>
        <para>
          <code>
Imports SoftArtisans.OfficeWriter.WordWriter</code>
        </para>
      </remarks>
      <example>
        <para>
          <code>

          //--- Create an instance of the WordApplication class
          WordApplication oWordApplication = new WordApplication();
        </code>
          <br/>
          <code>

          '--- Create an instance of the WordApplication class
          Dim oWordApplication As New WordApplication()
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordApplication.mModel">
            <summary> TODO: add description
            
            
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.#ctor">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/> object</para>
        </summary>
        <example>
          <para>
            <code>
WordApplication wa = new WordApplication();
</code>
            <br/>
            <code>
Dim wa As New WordApplication()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Create">
            <Doc>
        <summary>
          <para>Creates and returns a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> based on the Normal style.</para>
        </summary>
        <returns>
          <para>A new document based on the Normal style.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>Thrown if an error occurs creating the document.</para>
        </exception>
        <remarks>
          <para>MS Word equivalent: File &gt; New... &gt; Blank Document</para>
        </remarks>
        <example>
          <para>
            <code>
Document doc = app.Create();</code>
            <br/>
            <code>
Dim doc As Document = app.Create()</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Opens and returns an existing <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> from the specified <see cref="T:System.IO.Stream"/>.</para>
        </summary>
        <param name="stream">
          <para>Stream to read the document from.</para>
        </param>
        <returns>
          <para>The document contained in the specified stream.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>Thrown if there is an error opening the document.</para>
        </exception>
        <remarks>
          <para>Though the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object currently supports Office Open XML (Word 2007) format files, <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.IO.Stream)"/> does not yet support them.</para>
        </remarks>
        <example>
          <para>
            <code>
Document doc = app.Open(strm);</code>
            <br/>
            <code>
Dim doc As Document = app.Open(strm)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.String)">
            <Doc>
        <summary>
          <para>Opens and returns an existing <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> from disk.</para>
        </summary>
        <param name="fileName">
          <para>The complete path and filename of the document to open from disk.</para>
        </param>
        <returns>
          <para>The document that is opened from disk.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>Thrown if an error occurs while opening the document.</para>
        </exception>
        <remarks>
          <para>Though the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object currently supports Office Open XML (Word 2007) format files, <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.IO.Stream)"/> does not yet support them.</para>
        </remarks>
        <example>
          <para>
            <code>
Document doc = app.Open("@C:\sample.doc");</code>
            <br/>
            <code>
Dim doc As Document = app.Open("C:\sample.doc")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(SoftArtisans.OfficeWriter.WordWriter.WordTemplate)">
            <Doc>
        <summary>
          <para>Takes a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object representing a template Word file, and opens the file as a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> object.</para>
        </summary>
        <param name="wwt">
          <para>A <c>WordTemplate</c> object representing a template Word file.</para>
        </param>
        <returns>
          <para>The Word file that was passed from <c>WordTemplate</c> to <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/>.</para>
        </returns>
        <exception cref="T:System.Exception">
          <para>Thrown if an error occurs while opening the template.</para>
        </exception>
        <remarks>
          <para>Though the <c>WordTemplate</c> object currently supports Office Open XML (Word 2007) format files, <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Open(System.IO.Stream)"/> does not yet support them.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate wTempl = new WordTemplate();
          ...
          wTempl.Process();
          WordApplication wApp = new WordApplication();
          Document doc = wApp.Open(wTempl);
          ...
        </code>
            <br/>
            <code>

          Dim wTempl As New WordTemplate()
          ...
          wTempl.Process()
          Dim wApp As New WordApplication()
          Dim doc As Document = wApp.Open(wTempl)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Save(SoftArtisans.OfficeWriter.WordWriter.Document,System.IO.Stream)">
            <Doc>
        <summary>
          <para>Writes a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> to a stream in the form of a Microsoft Word document.</para>
        </summary>
        <param name="doc">
          <para>The <c>Document</c> to save.</para>
        </param>
        <param name="out">
          <para>The <see cref="T:System.IO.Stream"/> to write the file to.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>Thrown if there is a problem saving the file.</para>
        </exception>
        <remarks>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Preserve"/> property is used to specify the way WordWriter will save the document. When the <c>preserve</c> property is set to true, WordWriter attempts to preserve all formatting and features that it doesn't directly support. This includes Fields, Footnotes, Hyperlinks, Comments, and Anchored Images. When the <c>preserve</c> property is false, only those features directly supported by WordWriter will be preserved. This includes all Tables, Lists, Headers and Footers.</para>
        </remarks>
        <example>
          <para>
            <code>
app.Save(doc, strm);</code>
            <br/>
            <code>
app.Save(doc, strm)</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Save(SoftArtisans.OfficeWriter.WordWriter.Document,System.String)">
            <Doc>
        <summary>
          <para>Writes a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> to a file.</para>
        </summary>
        <param name="doc">
          <para>The <c>Document</c> to save.</para>
        </param>
        <param name="fileName">
          <para>The full filename to save the <c>Document</c> to.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>Thrown if there is an error saving the file.</para>
        </exception>
        <remarks>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Preserve"/> property is used to specify the way WordWriter will save the document. When the <c>preserve</c> property is set to true, WordWriter attempts to preserve all formatting and features that it doesn't directly support. This includes Fields, Footnotes, Hyperlinks, Comments, and Anchored Images. When the <c>preserve</c> property is false, only those features directly supported by WordWriter will be preserved. This includes all Tables, Lists, Headers and Footers.</para>
        </remarks>
        <example>
          <para>
            <code>

          app.Preserve = true;
          app.Save(doc, "@C:\sample.doc");
        </code>
            <br/>
            <code>

          app.Preserve = True
          app.Save(doc, "C:\sample.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Save(SoftArtisans.OfficeWriter.WordWriter.Document,System.Web.HttpResponse,System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>Streams a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> to an HttpResponse with the option of having it open in the user's web browser. The fileName specified will appear in the browser window. In addition, the content-type to use when streaming the file is specified.</para>
        </summary>
        <param name="doc">
          <para>The <c>Document</c> to save.</para>
        </param>
        <param name="response">
          <para>The HTTPResponse to write the document to.</para>
        </param>
        <param name="fileName">
          <para>The filename to display in the browser window.</para>
        </param>
        <param name="openInBrowser">
          <para>Whether to open the document in the browser window (true) or have it open in Word (false).</para>
        </param>
        <exception cref="T:System.Exception">
          <para>Thrown if there is an error streaming the document.</para>
        </exception>
        <remarks>
          <para>For the document to open in the browser window, the "Browse in same window" option must be enabled for .doc file types on the client machine.</para>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Preserve"/> property is used to specify the way WordWriter will save the document. When the <c>preserve</c> property is set to true, WordWriter attempts to preserve all formatting and features that it doesn't directly support. This includes Fields, Footnotes, Hyperlinks, Comments, and Anchored Images. When the <c>preserve</c> property is false, only those features directly supported by WordWriter will be preserved. This includes all Tables, Lists, Headers and Footers.</para>
        </remarks>
        <example>
          <para>
            <code>

          oWordApplication.Preserve = true;
          oWordApplication.Save(oDocument, Page.Response, "sample.doc", true);
        </code>
            <br/>
            <code>

          oWordApplication.Preserve = True
          oWordApplication.Save(oDocument, Page.Response, "sample.doc", True)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Save(SoftArtisans.OfficeWriter.WordWriter.Document,System.Web.HttpResponse,System.String,System.Boolean,System.String)">
            <Doc>
        <summary>
          <para>Streams a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> to an HttpResponse with the option of having it open in the user's web browser. The fileName specified will appear in the browser window. In addition, the content-type to use when streaming the file is specified.</para>
        </summary>
        <param name="doc">
          <para>The <c>Document</c> to save.</para>
        </param>
        <param name="response">
          <para>The HTTPResponse to write the document to.</para>
        </param>
        <param name="fileName">
          <para>The filename to display in the browser window.</para>
        </param>
        <param name="openInBrowser">
          <para>Whether to open the document in the browser window (true) or have it open in Word (false).</para>
        </param>
        <param name="contentType">
          <para>The content-type to stream the file as.</para>
        </param>
        <exception cref="T:System.Exception">
          <para>Thrown if there is an error streaming the document.</para>
        </exception>
        <remarks>
          <para>For the document to open in the browser window, the "Browse in same window" option must be enabled for .doc file types on the client machine.</para>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Preserve"/> property is used to specify the way WordWriter will save the document. When the <c>preserve</c> property is set to true, WordWriter attempts to preserve all formatting and features that it doesn't directly support. This includes Fields, Footnotes, Hyperlinks, Comments, and Anchored Images. When the <c>preserve</c> property is false, only those features directly supported by WordWriter will be preserved. This includes all Tables, Lists, Headers and Footers.</para>
        </remarks>
        <example>
          <para>
            <code>

          app.Preserve = true;
          app.Save(doc, Page.Response, "sample.doc", false, "application/x-msdownload");
        </code>
            <br/>
            <code>

          app.Preserve = True
          app.Save(doc, Page.Response, "sample.doc", False, "application/x-msdownload")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.LicenseKey">
            <Doc>
        <summary>
          <para>Sets or returns the license key used for this instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/>. This property is mainly used for debugging purposes.  For managing your license keys, please use the License Key Manager that is installed with OfficeWriter.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return license key
          string key = oWordApplication.LicenseKey;

          //--- Set license key
          oWordApplication.LicenseKey = "XXXXXX-XXXX-XXXX-XXXXXX";
        </code>
            <br/>
            <code>

          '--- Return license key
          Dim key As String = oWordApplication.LicenseKey

          '--- Set license key
          oWordApplication.LicenseKey = "XXXXXX-XXXX-XXXX-XXXXXX"
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Version">
            <Doc>
        <summary>
          <para>Returns the exact version of WordWriter. The format of the version string returned is:</para>
        </summary>
        <remarks>
          <para>
            <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Version"/> is a <b>Read Only</b> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          string ver = oWordApplication.Version;
        </code>
            <br/>
            <code>

          Dim ver As String = oWordApplication.Version
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.Preserve">
            <Doc>
        <summary>
          <para>Sets or returns a boolean that represents whether or not WordWriter will preserve feature of an existing document that it does not natively support. Setting this to false can result in smaller file sizes, but features that are not natively supported by WordWriter will be stripped out.  This is set to true by default.</para>
        </summary>
        <remarks>
          <para>The main advantage to setting the <c>preserve</c> property to false is that it can significantly reduce the file size of the resulting Word document. This is recommended if it is known that only supported features are in the document, especially when creating large documents.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return Preserve
          bool preserve = oWordApplication.Preserve;

          //--- Set Preserve
          oWordApplication.Preserve = false;
        </code>
            <br/>
            <code>

          '--- Return Preserve
          Dim preserve As Boolean = oWordApplication.Preserve

          '--- Set Preserve
          oWordApplication.Preserve = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplication.AlwaysUseUnicode">
            <Doc>
        <summary>
          <para>Returns a boolean that represents whether or not WordWriter will write all text using unicode.  A value of <c>false</c> can result in smaller file sizes but text that is not part of cp1252 (Windows-1252) will be unreadable.  This is set to <c>true</c> by default. It is recommended that you should set this to <c>false</c> if it is known that only characters supported by Windows-1252 are in the document, especially when creating large documents.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return AlwaysUseUnicode
          bool alwaysUseUnicode = oWordApplication.AlwaysUseUnicode;

          //--- Set AlwaysUseUnicode
          oWordApplication.AlwaysUseUnicode = false;
        </code>
            <br/>
            <code>

          '--- Return AlwaysUseUnicode
          Dim alwaysUseUnicode As Boolean = oWordApplication.AlwaysUseUnicode

          '--- Set AlwaysUseUnicode
          oWordApplication.AlwaysUseUnicode = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.create">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.open(System.IO.Stream)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.checkLicenseKey">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.open(System.String)">
            <summary>
            An overload of open that takes a filepath instead. This just
            opens the file and calls open on the resulting stream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.save(SoftArtisans.OfficeWriter.WordWriter.Document,System.IO.Stream)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.LicenseKeyObject">
            <summary>
            This getter performs lazy instantiation. First time this is
            called. The license key is validated.
            </summary>
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.LicenseKeyException"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.LicenseKeyAsString">
            <summary>
            This getter performs lazy instantiation.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.AlwaysUseUnicode">
            <summary>
            A boolean that represents whether or not WordWriter will write all text in unicode.
            </summary>
            <remarks>If this is <code>true</code> WordWriter will write all text in unicode 
            (UTF-16LE); if it's <code>false</code> all text will be written in cp1252 
            (windows-1252), which results in a smaller file, but removes most international 
            characters. This is set to <code>true</code> by default.</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordApplicationModel.MinimizeFileSize">
            <summary>
            A Boolean that represents whethre or not WordWriter will do its best to minimize the 
            file size.
            </summary>
            <remarks>If this is <code>true</code> WordWriter will result in smaller file sizes, 
            but will run slower and consume more memory. This is set to <code>false</code> by
            default.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking">
            <Doc>
      <summary>
        <para>This class is used to get and set Word change tracking settings for a document.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking"/> object. You must use  <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.ChangeTracking"/> to retrieve WordChangeTracking properties for a document.</para>
        <para>The following sample gets the <c>WordChangeTracking</c> object of a document so you can start working with its properties.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          WordChangeTracking changeTracking = doc.ChangeTracking;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim changeTracking As WordChangeTracking = doc.ChangeTracking
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordChangeTracking&quot;]/Member[@signature=&quot;WordChangeTracking.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordChangeTracking&quot;]/Member[@signature=&quot;WordChangeTracking.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.LockRevisionMarkingState">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not the current revision tracking state is locked.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return LockRevisionMarkingState
          bool lockRevisionMarkingState = changeTracking.LockRevisionMarkingState;

          //--- Set LockRevisionMarkingState
          changeTracking.LockRevisionMarkingState = true;
        </code>
            <br/>
            <code>

          '--- Return LockRevisionMarkingState
          Dim lockRevisionMarkingState As Boolean = changeTracking.LockRevisionMarkingState

          '--- Set LockRevisionMarkingState
          changeTracking.LockRevisionMarkingState = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.TrackChanges">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will track changes for this document.</para>
        </summary>
        <remarks>
          <para>This is set to false by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Track Changes</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return TrackChanges
          bool trackChanges = changeTracking.TrackChanges;

          //--- Set TrackChanges
          changeTracking.TrackChanges = true;
        </code>
            <br/>
            <code>

          '--- Return TrackChanges
          Dim trackChanges As Boolean = changeTracking.TrackChanges

          '--- Set TrackChanges
          changeTracking.TrackChanges = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.DisplayRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will display revisions for this document.</para>
        </summary>
        <remarks>
          <para>This is set to true by default if TrackChanges is set to true.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DisplayRevisions
          bool displayRevisions = changeTracking.DisplayRevisions;

          //--- Set DisplayRevisions
          changeTracking.DisplayRevisions = false;
        </code>
            <br/>
            <code>

          '--- Return DisplayRevisions
          Dim displayRevisions As Boolean = changeTracking.DisplayRevisions

          '--- Set DisplayRevision
          changeTracking.DisplayRevisions = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.PrintRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will print revision tracking markup when this document is printed.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return PrintRevisions
          bool printRevisions = changeTracking.PrintRevisions;

          //--- Set PrintRevisions
          changeTracking.PrintRevisions = true;
        </code>
            <br/>
            <code>

          '--- Return PrintRevisions
          Dim printRevisions As Boolean = changeTracking.PrintRevisions

          '--- Set PrintRevisions
          changeTracking.PrintRevisions = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.ShowMarkupRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show revision markup in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShowMarkupRevisions
          bool showMarkupRevisions = changeTracking.ShowMarkupRevisions;

          //--- Set ShowMarkupRevisions
          changeTracking.ShowMarkupRevisions = false;
        </code>
            <br/>
            <code>

          '--- Return ShowMarkupRevisions
          Dim showMarkupRevisions As Boolean = changeTracking.ShowMarkupRevisions

          '--- Set ShowMarkupRevisions
          changeTracking.ShowMarkupRevisions = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.ShowAnnotationRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show annotations in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShowAnnotationRevisions
          bool showAnnotationRevisions = changeTracking.ShowAnnotationRevisions;

          //--- Set ShowAnnotationRevisions
          changeTracking.ShowAnnotationRevisions = false;
        </code>
            <br/>
            <code>

          '--- Return ShowAnnotationRevisions
          Dim showAnnotationRevisions As Boolean = changeTracking.ShowAnnotationRevisions

          '--- Set ShowAnnotationRevisions
          changeTracking.ShowAnnotationRevisions = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.ShowInsertDeleteRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show insert and delete revisions in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Track changes tab &gt; Markup section &gt; Insertions: and Deletions:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShowInsertDeleteRevisions
          bool showInsertDeleteRevisions = changeTracking.ShowInsertDeleteRevisions;

          //--- Set ShowInsertDeleteRevisions
          changeTracking.ShowInsertDeleteRevisions = false;
        </code>
            <br/>
            <code>

          '--- Return ShowInsertDeleteRevisions
          Dim showInsertDeleteRevisions As Boolean = changeTracking.ShowInsertDeleteRevisions

          '--- Set ShowInsertDeleteRevisions
          changeTracking.ShowInsertDeleteRevisions = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.ShowFormattingRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show formatting revisions in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to false by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; Track changes tab &gt; Markup section &gt; Formatting:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShowFormattingRevisions
          bool showFormattingRevisions = changeTracking.ShowFormattingRevisions;

          //--- Set ShowFormattingRevisions
          changeTracking.ShowFormattingRevisions = true;
        </code>
            <br/>
            <code>

          '--- Return ShowFormattingRevisions
          Dim showFormattingRevisions As Boolean = changeTracking.ShowFormattingRevisions

          '--- Set ShowFormattingRevisions
          changeTracking.ShowFormattingRevisions = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordChangeTracking.ShowInkRevisions">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will show ink revisions in this document.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return ShowInkRevisions
          bool showInkRevisions = changeTracking.ShowInkRevisions;

          //--- Set ShowInkRevisions
          changeTracking.ShowInkRevisions = true;
        </code>
            <br/>
            <code>

          '--- Return ShowInkRevisions
          Dim showInkRevisions As Boolean = changeTracking.ShowInkRevisions

          '--- Set ShowInkRevisions
          changeTracking.ShowInkRevisions = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getColor">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.get97Color(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getColor(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getIco24(System.Drawing.Color)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getIco97(System.Drawing.Color@)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getHSBModel(System.Drawing.Color@)">
            <param name="testColor">
            </param>
            <returns>
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getBlue(System.Drawing.Color)">
            <param name="testColor">
            </param>
            <returns>
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getGreen(System.Drawing.Color)">
            <param name="testColor">
            </param>
            <returns>
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.getRed(System.Drawing.Color)">
            <param name="testColor">
            </param>
            <returns>
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordColor.transposeIco(System.Int32)">
            <summary>
            Switches the first two bytes of the icon integer with the last two bytes of the icon integer. 
            Also negates the alpha component because in .NET 0xff is considered opaque, but in word 00 is.
            </summary>
            <param name="ico"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings">
            <Doc>
      <summary>
        <para>This class is used to get and set Word hyphen settings for a document.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <c>WordHyphenSettings</c> object. You must use the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.HyphenSettings"/> property to retrieve WordHyphenSettings properties for a document.</para>
        <para>The following sample gets the <c>WordHyphenSettings</c> object of a document so you can start working with these properties.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          WordHyphenSettings hyphenSettings = doc.HyphenSettings;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim hyphenSettings As WordHyphenSettings = doc.HyphenSettings
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordHyphenSettings&quot;]/Member[@signature=&quot;WordHyphenSettings.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordHyphenSettings&quot;]/Member[@signature=&quot;WordHyphenSettings.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.CapitalHyphenation">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word is allowed to hyphenate words that are capitalized in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Language &gt; Hyphenation... &gt; Hyphenate words in CAPS</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return CapitalHyphenation
          bool capitalHyphenation = hyphenSettings.CapitalHyphenation;

          //--- Set CapitalHyphenation
          hyphenSettings.CapitalHyphenation = false;
        </code>
            <br/>
            <code>

          '--- Return CapitalHyphenation
          Dim capitalHyphenation As Boolean = hyphenSettings.CapitalHyphenation

          '--- Set CapitalHyphenation
          hyphenSettings.CapitalHyphenation = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.AutoHyphen">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will automatically hyphenate this document.</para>
        </summary>
        <remarks>
          <para>This option is set to false by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Language &gt; Hyphenation... &gt; Automatically hyphenate document</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AutoHyphen
          bool autoHyphen = hyphenSettings.AutoHyphen;

          //--- Set AutoHyphen
          hyphenSettings.AutoHyphen = true;
        </code>
            <br/>
            <code>

          '--- Return AutoHyphen
          Dim autoHyphen As Boolean = hyphenSettings.AutoHyphen

          '--- Set AutoHyphen
          hyphenSettings.AutoHyphen = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.HyphenationWidth">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the hyphenation width in twips for this document. The hyphenation width is the amount of space to leave between the end of the last word in a line and the right margin. To reduce the number of hyphens, make the hyphenation zone wider. To reduce the raggedness of the right margin, make the hyphenation zone narrower. One twip = (1/20 pt) or (1/1440 in).</para>
        </summary>
        <remarks>
          <para>This option is set to .25 inches (360 twips) by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Language &gt; Hyphenation... &gt; Hyphenation zone:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return HyphenationWidth
          int hyphenationWidth = hyphenSettings.HyphenationWidth;

          //---- Set HyphenationWidth to .5 inches (720 twips)
          hyphenSettings.HyphenationWidth = 720;
        </code>
            <br/>
            <code>

          '--- Return HyphenationWidth
          Dim hypheationWidth As Boolean = hyphenSettings.HyphenationWidth

          '--- Set HyphenationWidth to .5 inches (720 twips)
          hyphenSettings.HyphenationWidth = 720
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordHyphenSettings.AllowedConsecutiveHyphens">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the number of consecutive lines that can be auto-hyphenated by Word in this document.</para>
        </summary>
        <remarks>
          <para>This option is set to No limit by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Language &gt; Hyphenation... &gt; Limit consecutive hyphens to:</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return AllowedConsecutiveHyphens
          int allowedHyphens = hyphenSettings.AllowedConsecutiveHyphens;

          //--- Set AllowedConsecutiveHyphens
          hyphenSettings.AllowedConsecutiveHyphens = 1;
        </code>
            <br/>
            <code>

          '--- Return AllowedConsecutiveHyphens
          Dim allowedHyphens As Boolean = hyphenSettings.AllowedConsecutiveHyphens

          '--- Set AllowedConsecutiveHyphens
          hyphenSettings.AllowedConsecutiveHyphens = 1
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat">
            <Doc>
      <summary>
        <para>This class is used to enumerate the set of Word's built-in number formats Word. It is used for setting how List elements, footnote numbers, and endnote numbers will appear.</para>
      </summary>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Arabic">
            <Doc>
        <summary>Arabic Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ArabicAbjad">
            <Doc>
        <summary>Arabic Alphabet, Abjad sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ArabicAlifBaTah">
            <Doc>
        <summary>Arabic Alphabet, Alif Ba Ta sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ArabicLeadingZero">
            <Doc>
        <summary>Standard Arabic Numbers with Leading Zeros for Single Digit Values</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Bullet">
            <Doc>
        <summary>Simple Bullets, no numbers</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.CardinalText">
            <Doc>
        <summary>English Cardinal Text</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Chinese1">
            <Doc>
        <summary/>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Chinese2">
            <Doc>
        <summary/>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Chinese3">
            <Doc>
        <summary/>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Chinese4">
            <Doc>
        <summary>Chinese Numerals with Parentheses; reverts to Arabic after 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseDoubleByte1">
            <Doc>
        <summary>Chinese Double Byte Numerals, Additive</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseDoubleByte2">
            <Doc>
        <summary>Chinese Double Byte Formal Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseDoubleByte3">
            <Doc>
        <summary>Chinese Double Byte Numerals, Additive</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseDoubleByte4">
            <Doc>
        <summary>Double Byte Arabic Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseZodiac1">
            <Doc>
        <summary>Chinese Zodiac Elements; reverts to Arabic after 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseZodiac2">
            <Doc>
        <summary>Chinese Zodiac Animals; reverts to Arabic after 12</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ChineseZodiac3">
            <Doc>
        <summary>Chinese Zodiac Pairs (Element, Animal); repeats after 60</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Circle">
            <Doc>
        <summary/>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.DoubleByteArabic">
            <Doc>
        <summary>Double Byte Arabic Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.DoubleByteChar">
            <Doc>
        <summary>Double Byte Arabic Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.DoubleByteKatakanaAiueo">
            <Doc>
        <summary>Double Byte Katakana, a i u e o sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.DoubleByteKatakanaIroha">
            <Doc>
        <summary>Double Byte Katakana, i ro ha sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HebrewNonStandard">
            <Doc>
        <summary>Hebrew Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HewbrewBiblical">
            <Doc>
        <summary>Hebrew Alphabetical Numbers</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HindiCardinals">
            <Doc>
        <summary>Hindi Cardinals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HindiConsonants">
            <Doc>
        <summary>Hindi Consonants, Devanagari script</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HindiNumbers">
            <Doc>
        <summary>Hindi Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.HindiVowels">
            <Doc>
        <summary>Hindi Vowels, Devanagari script</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Kanji3">
            <Doc>
        <summary>Japanese Formal Kanji (Daiji) Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Kanji4">
            <Doc>
        <summary>Japanese Kanji Numerals, Base 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KanjiDigit">
            <Doc>
        <summary>Japanese Kanji Numerals, Additive</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KanjiNoDigit">
            <Doc>
        <summary>Japanese Kanji Numerals, Base 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KatakanaAiueo">
            <Doc>
        <summary>Japanese Katakana Alphabet, a i u e o sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KatakanaIroha">
            <Doc>
        <summary>Japanese Katakana Alphabet, traditional i ro ha sequence</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Korean1">
            <Doc>
        <summary>Korean Consonants; repeats after 14</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Korean2">
            <Doc>
        <summary>Korean Consonants with first Vowel; repeats after 14</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KoreanDoubleByte1">
            <Doc>
        <summary>Double Byte Sino-Korean</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KoreanDoubleByte2">
            <Doc>
        <summary>Double Byte Sino-Korean, base 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KoreanDoubleByte3">
            <Doc>
        <summary>Double Byte Native Korean</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.KoreanDoubleByte4">
            <Doc>
        <summary>Double Byte Sino-Korean Hanja</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Lowercase">
            <Doc>
        <summary>Lower Case Roman Alphabet</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Ordinal">
            <Doc>
        <summary>English Ordinals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.OrdinalText">
            <Doc>
        <summary>English Ordinal Text</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.PageNumFormat">
            <Doc>
        <summary>Arabic Numerals with Dashes</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.RomanLower">
            <Doc>
        <summary>Lower Case Roman Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.RomanUpper">
            <Doc>
        <summary>Upper Case Roman Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.RussianLower">
            <Doc>
        <summary>Russian Cyrillic Alphabet Lower Case</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.RussianUpper">
            <Doc>
        <summary>Russian Cyrillic Alphabet Upper Case</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.SingleByteChar">
            <Doc>
        <summary>Double Byte Arabic Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.TaiwanDoubleByte1">
            <Doc>
        <summary>Taiwanese Double Byte Numerals, Additive</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.TaiwanDoubleByte2">
            <Doc>
        <summary>Taiwanese Double Byte Formal Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.TaiwanDoubleByte3">
            <Doc>
        <summary>Taiwanese Double Byte Numerals, Additive</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.TaiwanDoubleByte4">
            <Doc>
        <summary>Taiwanese Double Byte Numerals, Base 10</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ThaiCardinals">
            <Doc>
        <summary>Thai Cardinals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ThaiLetters">
            <Doc>
        <summary>Thai Alphabet</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ThaiNumbers">
            <Doc>
        <summary>Thai Numerals</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Uppercase">
            <Doc>
        <summary>Upper Case Roman Alphabet</summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.VietnameseCardianls">
            <Doc>
        <summary>Vietnamese Cardinals</summary>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordNumberFormat&quot;]/Member[@signature=&quot;WordNumberFormat.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordNumberFormat&quot;]/Member[@signature=&quot;WordNumberFormat.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordNumberFormat&quot;]/Member[@signature=&quot;WordNumberFormat.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordNumberFormat&quot;]/Member[@signature=&quot;WordNumberFormat.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordNumberFormat.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordNumberFormat&quot;]/Member[@signature=&quot;WordNumberFormat.Value&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordFKP.createFormatEntry(System.Int32)">
            <summary> finds and returns FormatEntry for the FKPs entry where aFC belongs to.</summary>
            <throws>  SAException if aFC doesn't belong to this FKP </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordFKP.addFormatEntry(SoftArtisans.OfficeWriter.WordWriter.FormatEntry)">
            <summary> adds a new format entry to the end of the FKP
            updates the final FC.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordFKP.getIndexForFC(System.Int64)">
            <summary> finds the index of the FKP entry for the given FC.</summary>
            <throws>  SAException if FC doesn't belong to the FKP. </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordRecordFKP.UnusedSize">
            <summary> returns space unused in this FKP
            can only be calculated in the subclass
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordCHPX.#ctor">
            <summary> Default constructor.
            Used when the record is built from scratch
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordCHPX.createFormatEntry(System.Int32)">
            <summary> finds and returns FormatEntry for the FKPs entry where aFC belongs to.</summary>
            <throws>  SAException if aFC doesn't belong to this FKP </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordCHPX.addFormatEntry(SoftArtisans.OfficeWriter.WordWriter.FormatEntry)">
            <summary> adds a new format entry to the end of the FKP
            updates the final FC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordRecordCHPX.UnusedSize">
            <summary> returns space unused in this FKP
            can only be calculated in the subclass
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordRecordCLX">
            <summary> Summary description for WordRecordCLX.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordRecordPadding">
            <summary> Summary description for WordRecordPadding.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordPAPX.#ctor">
            <summary> Default constructor.
            Used when the record is built from scratch
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordPAPX.createFormatEntry(System.Int32)">
            <summary> finds and returns FormatEntry for the FKPs entry where aFC belongs to.</summary>
            <throws>  SAException if aFC doesn't belong to this FKP </throws>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordRecordPAPX.addFormatEntry(SoftArtisans.OfficeWriter.WordWriter.FormatEntry)">
            <summary> adds a new format entry to the end of the FKP
            updates the final FC.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordRecordPAPX.UnusedSize">
            <summary> returns space unused in this FKP
            can only be calculated in the subclass
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordRecordSED">
            <summary> Summary description for WordRecordSED.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate">
            <Doc>
      <summary>
        <para>The WordTemplate object represents a WordWriter template. A WordWriter template is a file created in Microsoft Word that contains merge fields.</para>
      </summary>
      <remarks>
        <para>The <c>WordTemplate</c> object is in the SoftArtisans.OfficeWriter.WordWriter namespace. The object can be referenced as <c>SoftArtisans.WordWriter.WordTemplate</c>. To minimize typing and errors, import the namespace to the aspx page, and reference the object as <c>WordTemplate</c>, without the namespace prefix.</para>
      </remarks>
      <example>
        <para>If you are coding directly in the .aspx page, following the Page directive, include:<br/><code>
&lt;%@ Import Namespace="SoftArtisans.OfficeWriter.WordWriter" %&gt;</code><br/>If you are coding in the "code behind" page (.aspx.vb or .aspx.cs), include an <c>Imports</c> or <c>using</c> statement at the top of the "code behind" page:<br/><code>
using SoftArtisans.OfficeWriter.WordWriter;
</code><br/><code>
Imports SoftArtisans.OfficeWriter.WordWriter
</code><br/>To create an instance of the WordTemplate object use:<br/><code>
WordTemplate wt = new WordTemplate();
</code><br/><code>
Dim wt As New WordTemplate()
</code></para>
      </example>
    </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS">
            <Doc>
        <summary>
          <para>Used by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/> to indicate that as much of the data source should be imported as possible.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.threadInUse">
            <summary>
            Denotes if WordTemplate is already processing in another thread.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.#ctor">
            <Doc>
        <summary>
          <para>Creates a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object.</para>
        </summary>
        <example>
          <para>
            <code>
WordTemplate wt = new WordTemplate();
</code>
            <br/>
            <code>
Dim wlt As New WordTemplate()
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])">
            <Doc>
        <summary>
          <para>Sets a list of bookmarks to be removed from the document.</para>
        </summary>
        <param name="bookmarks">
          <para>An array of strings containing the names of all the bookmarks to be removed</para>
        </param>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>BookmarksToRemove</c> will throw this exception if a bookmark in the list has been set as a <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/></para>
        </exception>
        <exception cref="!:NullArgumentException">
          <para>
            <c>BookmarksToRemove</c> will throw this exception if <c>bookmarks</c> is null.</para>
        </exception>
        <remarks>
          <para>
            <b>This feature is available in OOXML files (DOCX/DOCM) only.</b>
          </para>
          <para>Removing a bookmark will remove anything that is inside that bookmark.</para>
        </remarks>
        <example>
          <para>
            <code>

WordTemplate wt = new WordTemplate();
wt.Open(@"c:\templates\Template.docx");
string [] bookmarks = {"Bookmark1", "AroundTable"};
wt.BookmarksToRemove(bookmarks);
wt.Process();
wt.Save(@"c:\reports\Report.docx");
</code>
          </para>
          <para>
            <code>
Dim wt As New WordTemplate()
wt.Open("c:\templates\Template.docx")
Dim bookmarks = New String() {"Bookmark1", "AroundTable"};
wt.BookmarksToRemove(bookmarks);
wt.Process()
wt.Save("c:\reports\Report.docx")
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.MergeFieldsToIgnore(System.String[])">
            <Doc>
        <summary>
          <para>Sets a list of mergefields to be ignored during processing.</para>
        </summary>
        <param name="mergefields">
          <para>An array of strings containing the names of all the mergefields to be ignored.</para>
        </param>
        <exception cref="!:NullArgumentException">
          <para>
            <c>MergeFieldsToIgnore</c> will throw this exception if <c>mergefields</c> is null.</para>
        </exception>
        <remarks>
          <para>
            <b>This feature is available in OOXML files (DOCX/DOCM) only.</b>
            <br/>The MergeField name must match exactly, including case and options.</para>
        </remarks>
        <example>
          <para>
            <code>

WordTemplate wt = new WordTemplate();
wt.Open(@"c:\templates\Template.docx");
string [] mergefields = {"DataSet1.MergeField1", "MergeField2(image)"};
wt.MergeFieldsToIgnore(mergefields);
wt.Process();
wt.Save(@"c:\reports\Report.docx");
</code>
          </para>
          <para>
            <code>
Dim wt As New WordTemplate()
wt.Open("c:\templates\Template.docx")
Dim mergefields = New String() {"DataSet1.MergeField1", "MergeField2(image)"};
wt.MergeFieldsToIgnore(mergefields);
wt.Process()
wt.Save("c:\reports\Report.docx")
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)">
            <Doc>
        <summary>
          <para>Opens the WordWriter template specified by the <c>templateFileName</c> parameter.</para>
        </summary>
        <param name="templateFileName">
          <para>The complete path and file name of the template Word file.</para>
        </param>
        <exception cref="T:System.ArgumentNullException"/>
        <exception cref="T:System.IO.FileNotFoundException"/>
        <remarks>
          <para>A WordWriter template is a file created in Microsoft Word that contains merge fields. WordWriter supports Microsoft Word 97, 2000, 2002 (XP), 2003, and 2007. Do not use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/> to open files created in earlier versions of Microsoft Word.</para>
        </remarks>
        <example>
          <para>
            <code>
oWW.Open(@"c:\templates\StringTemplate.doc"); </code>
            <br/>
            <code>
oWW.Open("c:\templates\StringTemplate.doc")</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(SoftArtisans.OfficeWriter.WordWriter.WordApplication,SoftArtisans.OfficeWriter.WordWriter.Document)">
            <Doc>
        <summary>
          <para>Passes a document from <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/> to <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.</para>
        </summary>
        <param name="aApp">
          <para>The instance of <c>WordApplication</c> that was used to create the document.</para>
        </param>
        <param name="aDoc">
          <para>A <see cref="T:SoftArtisans.OfficeWriter.WordWriter.Document"/> object representing the Word file created with <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordApplication"/>.</para>
        </param>
        <remarks>
          <para>You can use <c>WordApplication</c> to create a document with merge fields (a template) and pass the file to <c>WordTemplate</c> to populate the merge fields.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordApplication wwApp = new WordApplication();
          Document doc = wwApp.Create();
          WordTemplate wwTmpl = New WordTemplate();
          wwTmpl.Open(wwApp, doc);
        </code>
            <br/>
            <code>

          Dim wwApp As New WordApplication()
          Dim doc As Document = wwApp.Create()
          Dim wwTmpl As New WordTemplate()
          wwTmpl.Open(wwApp, doc)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Opens a WordWriter template from a <see cref="T:System.IO.Stream"/>. A WordWriter template is a file created in Microsoft Word that contains merge fields.</para>
        </summary>
        <param name="templateStream">
          <para>A <c>System.IO.Stream</c> object, or a class derived from System.IO.Stream (for example, System.IO.FileStream).</para>
        </param>
        <exception cref="T:System.ArgumentNullException"/>
        <remarks>
          <para>WordWriter supports Microsoft Word 97, 2000, 2002 (XP), 2003, and 2007. Do not use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/> to open files created in earlier versions of Microsoft Word.</para>
        </remarks>
        <example>
          <para>
            <code>
//--- FileStream and FileMode are in System.IO
FileStream oFileStream = new FileStream(@"c:\templates\StringTemplate.doc",
FileMode.Open);
oWW.Open(oFileStream);
</code>
            <br/>
            <code>
'--- FileStream and FileMode are in System.IO
Dim oFileStream As New FileStream("c:\templates\StringTemplate.doc", _
    FileMode.Open, FileAccess.Read)
oWW.Open(oFileStream)
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.IO.Stream,System.Boolean)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordTemplate&quot;]/Member[@signature=&quot;WordTemplate.Open(System.IO.Stream, Boolean)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)">
            <Doc>
        <summary>Sets a main document data source to a one-dimensional object array. The method imports a single row of data to the specified set of main document merge fields.</summary>
        <param name="data">An object array of values to use as a data source. WordWriter will insert these values in the template's merge fields.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template</param>
        <param name="name">A string that matches the data source name.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>The method's third parameter - <c>name</c> - specifies the data source name for the set of merge fields. For example, if the main document contains the following sets of merge fields: </para>
          <list type="table">
            <item>
              <term>Â«Customer.FirstNameÂ»</term>
              <description>Â«Order.OrderIdÂ»</description>
            </item>
            <item>
              <term>Â«Customer.LastNameÂ»</term>
              <description>Â«Order.DateÂ»</description>
            </item>
          </list>
          <para>For the first set of merge fields, set <c>name</c> to "Customer," and for the second, set <c>name</c> to "Order."</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/> takes an object array of values and a string array of field names. The two arrays must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in a set (merge fields that share the same data source name or number) may not exceed the number of values in the data source defined by <c>SetDataSource</c>. However, the number of values in the data source may be greater than the number of merge fields in the set.</para>
          <para>This method may be called once for each set of merge fields in the main document.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create a string array of field names.
          //--- The field names must be the same as the merge field
          //--- names in the template.
          string[] arrFields = {"CompanyName",
               "StreetAddr",
               "City",
               "State",
               "ZipCode"};

          //--- Create an object array of values
          //--- Ordinal numbers match those of the fields array
          object[] arrValues = {"SoftArtisans",
               "1330 Beacon Street",
               "Brookline",
               "MA",
               "02446"};
          oWW.SetDataSource(arrValues, arrFields, "data");
        </code>
            <br/>
            <code>

          '--- Create a string array of field names.
          '--- The field names  must be the same as the merge field
          '--- names in the template.
          Dim arrFields As String() = {"CompanyName", _
               "StreetAddr", _
               "City", _
               "State", _
               "ZipCode"}
          '--- Create an object array of values
          '--- Ordinal numbers match those of the fields array
          Dim arrValues As Object() = {"SoftArtisans", _
               "1330 Beacon Street", _
               "Brookline", _
               "MA", _
               "02446"}
          oWW.SetDataSource(arrValues, arrFields, "data")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet,System.String)">
            <Doc>
        <summary>Sets a main document data source to an ADO.NET DataSet. A DataSet contains a collection of DataTables. If you set a main document data source to a DataSet, WordWriter will get the first row of the first DataTable in the DataSet.</summary>
        <param name="ds">An ADO.NET DataSet to use as the template's data source. WordWriter will use the first row of the first DataTable in the DataSet as the data source.</param>
        <param name="name">Specifies the data source name for the set of merge fields.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in a set (merge fields that share the same data source name or number) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the set.</para>
          <para>This method may be called once for each set of merge fields in the main document.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, " +
               "TitleOfCourtesy, Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an instance of the OleDbDataAdapter
          //--- object.
          OleDbDataAdapter oAdpt = new OleDbDataAdapter(strSQL, oConn);

          //--- Create a DataSet and fill it with the data
          //--- returned by the SQL database query.
          DataSet oDS = new DataSet();
          oAdpt.Fill(oDS);

          //--- Pass the DataSet to SetDataSource. WordWriter
          //--- will use the first DataTable in the DataSet as
          //--- the data source.
          oWW.SetDataSource(oDS, "Employee");
          ...
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an instance of the OleDbDataAdapter
          '--- object.
          Dim oAdpt As New OleDbDataAdapter(strSQL, oConn)

          '--- Create a DataSet and fill it with the data
          '--- returned by the SQL database query.
          Dim oDS As New DataSet()
          oAdpt.Fill(oDS)

          '--- Pass the DataSet to SetDataSource. WordWriter
          '--- will use the first DataTable in the DataSet as
          '--- the data source.
          oWW.SetDataSource(oDS, "Employee")
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet)">
            <Doc>
        <summary>Sets a template's data source to an ADO.NET DataSet. A DataSet contains a collection of DataTables. If you set a template's data source to a DataSet, WordWriter will get the first row of the first DataTable in the DataSet.</summary>
        <param name="ds">An ADO.NET DataSet to use as the template's data source. WordWriter will use the first row of the first DataTable in the DataSet as the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the template may not exceed the number of values in the data source. However, the number of values in the data source may be greater than the number of merge fields in the template.</para>
          <para>Do not call this method more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. To set multiple main document data sources, use the following methods:<br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader,System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, " +
               "TitleOfCourtesy, Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an instance of the OleDbDataAdapter
          //--- object.
          OleDbDataAdapter oAdpt = new OleDbDataAdapter(strSQL, oConn);

          //--- Create a DataSet and fill it with the data
          //--- returned by the SQL database query.
          DataSet oDS = new DataSet();
          oAdpt.Fill(oDS);

          //--- Pass the DataSet to SetDataSource. WordWriter
          //--- will use the first DataTable in the DataSet as
          //--- the data source.
          oWW.SetDataSource(oDS);
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an instance of the OleDbDataAdapter
          '--- object.
          Dim oAdpt As New OleDbDataAdapter(strSQL, oConn)

          '--- Create a DataSet and fill it with the data
          '--- returned by the SQL database query.
          Dim oDS As New DataSet()
          oAdpt.Fill(oDS)

          '--- Pass the DataSet to SetDataSource. WordWriter
          '--- will use the first DataTable in the DataSet as
          '--- the data source.
          oWW.SetDataSource(oDS)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable,System.String)">
            <Doc>
        <summary>Sets a main document data source to an ADO.NET DataTable. If the specified DataTable contains more than one row, WordWriter will use the first row as the data source.</summary>
        <param name="dt">An ADO.NET DataTable to use as the data source. WordWriter will use the first row of the DataTable as the data source.</param>
        <param name="name">Specifies the data source name for the set of merge fields.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the template may not exceed the number of values in the data source. However, the number of values in the data source may be greater than the number of merge fields in the template.</para>
          <para>This method may be called once for each set of merge fields in the main document.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, " +
               "TitleOfCourtesy, Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an instance of the OleDbDataAdapter
          //--- object.
          OleDbDataAdapter oAdpt = new OleDbDataAdapter(strSQL, oConn);

          //--- Create a DataTable and fill it with the data
          //--- returned by the SQL database query.
          DataTable oDT = new DataTable();
          oAdpt.Fill(oDT);

          //--- Pass the DataTable to SetDataSource.
          oWW.SetDataSource(oDT, "Employee");
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an instance of the OleDbDataAdapter
          '--- object.
          Dim oAdpt As New OleDbDataAdapter(strSQL, oConn)

          '--- Create a DataTable and fill it with the data
          '--- returned by the SQL database query.
          Dim oDT As New DataTable()
          oAdpt.Fill(oDT)

          '--- Pass the DataTable to SetDataSource.
          oWW.SetDataSource(oDT, "Employee")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable)">
            <Doc>
        <summary>Sets a template's data source to an ADO.NET DataTable. If the specified DataTable contains more than one row, WordWriter will use the first row as the data source.</summary>
        <param name="dt">An ADO.NET DataTable to use as the data source. WordWriter will use the first row of the DataTable as the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the template may not exceed the number of values in the data source. However, the number of values in the data source may be greater than the number of merge fields in the template.</para>
          <para>Do not call this method more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. To set multiple main document data sources, use the following methods:<br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader,System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, TitleOfCourtesy, " +
               "Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an instance of the OleDbDataAdapter
          //--- object.
          OleDbDataAdapter oAdpt = new OleDbDataAdapter(strSQL, oConn);

          //--- Create a DataTable and fill it with the data
          //--- returned by the SQL database query.
          DataTable oDT = new DataTable();
          oAdpt.Fill(oDT);

          //--- Pass the DataTable to SetDataSource.
          oWW.SetDataSource(oDT);
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an instance of the OleDbDataAdapter
          '--- object.
          Dim oAdpt As New OleDbDataAdapter(strSQL, oConn)

          '--- Create a DataTable and fill it with the data
          '--- returned by the SQL database query.
          Dim oDT As New DataTable()
          oAdpt.Fill(oDT)

          '--- Pass the DataTable to SetDataSource.
          oWW.SetDataSource(oDT)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader)">
            <Doc>
        <summary>Sets a template's data source to an an IDataReader interface, which may be either a SqlDataReader, OleDbDataReader or an AdomdDataReader. If the specified DataReader returns more than one row, WordWriter will use the first row as the data source.</summary>
        <param name="dr">A SqlDataReader, OleDbDataReader or an AdomdDataReader to use as the data source. WordWriter will use the first row of the DataReader as the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the template may not exceed the number of values in the data source. However, the number of values in the data source may be greater than the number of merge fields in the template.</para>
          <para>Do not call this method more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. To set multiple main document data sources, use the following methods:<br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader,System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, " +
               "TitleOfCourtesy, Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an OleDbCommand
          OleDbCommand oCmd = new OleDbCommand(strSQL, oConn);

          //--- Get an OleDbDataReader
          oConn.Open();
          OleDbDataReader oReader =
               oCmd.ExecuteReader(CommandBehavior.CloseConnection);

          //--- Pass the DataReader to SetDataSource.
          oWW.SetDataSource(oReader);

          //--- Close the reader (should do this in a finally block)
          oReader.Close();
          ...
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an OleDbCommand
          Dim oCmd As New OleDbCommand(strSQL, oConn)

          '--- Get an OleDbDataReader
          oConn.Open()
          Dim oReader As OleDbDataReader = _
               oCmd.ExecuteReader(CommandBehavior.CloseConnection)

          '--- Pass the DataReader to SetDataSource.
          oWW.SetDataSource(oReader)

          '--- Close the reader (should do this in a finally block)
          oReader.Close()
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader,System.String)">
            <Doc>
        <summary>Sets a main document data source to an an IDataReader interface, which may be either a SqlDataReader, OleDbDataReader, or an AdomdDataReader. If the specified DataReader returns more than one row, WordWriter will use the first row as the data source.</summary>
        <param name="dr">A SqlDataReader, OleDbDataReader or an AdomdDataReader to use as the data source. WordWriter will use the first row of the DataReader as the data source.</param>
        <param name="name">Specifies the data source name for the set of merge fields.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the template may not exceed the number of values in the data source. However, the number of values in the data source may be greater than the number of merge fields in the template.</para>
          <para>This method may be called once for each set of merge fields in the main document.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\temp\template.doc");
          string strSQL = "SELECT LastName, FirstName, " +
               "TitleOfCourtesy, Address, City, Region, PostalCode " +
               "FROM Employees WHERE EmployeeID=1";

          //--- Create an OLEDB connection.
          OleDbConnection oConn = new OleDbConnection(strConnString);

          //--- Create an OleDbCommand
          OleDbCommand oCmd = new OleDbCommand(strSQL, oConn);

          //--- Get an OleDbDataReader
          oConn.Open();
          OleDbDataReader oReader =
               oCmd.ExecuteReader(CommandBehavior.CloseConnection);

          //--- Pass the DataReader to SetDataSource.
          oWW.SetDataSource(oReader, "Employee");

          //--- Close the reader (should do this in a finally block)
          oReader.Close();
          ...
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\temp\template.doc")
          Dim strSQL As String = "SELECT LastName, FirstName, " &amp; _
               "TitleOfCourtesy, Address, City, Region, PostalCode " &amp; _
               "FROM Employees WHERE EmployeeID=1"

          '--- Create an OLEDB connection.
          Dim oConn As New OleDbConnection(strConnString)

          '--- Create an OleDbCommand
          Dim oCmd As New OleDbCommand(strSQL, oConn)

          '--- Get an OleDbDataReader
          oConn.Open()
          Dim oReader As OleDbDataReader = _
               oCmd.ExecuteReader(CommandBehavior.CloseConnection)

          '--- Pass the DataReader to SetDataSource.
          oWW.SetDataSource(oReader, "Employee")

          '--- Close the reader (should do this in a finally block)
          oReader.Close()
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[])">
            <Doc>
        <summary>Sets a main document data source to a one-dimensional object array. The method imports a single row of data to the specified set of main document merge fields.</summary>
        <param name="data">An object array of values to use as a data source. WordWriter will insert these values in the template's merge fields.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/> takes an object array of values and a string array of field names. The two arrays must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in a set (merge fields that share the same data source name or number) may not exceed the number of values in the data source defined by <c>SetDataSource</c>. However, the number of values in the data source may be greater than the number of merge fields in the set.</para>
          <para>This method may be called once for each set of merge fields in the main document.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create a string array of field names.
          //--- The field names must be the same as the merge field
          //--- names in the template.
          string[] arrFields = {"CompanyName",
               "StreetAddr",
               "City",
               "State",
               "ZipCode"};

          //--- Create an object array of values
          //--- Ordinal numbers match those of the fields array
          object[] arrValues = {"SoftArtisans",
               "1330 Beacon Street",
               "Brookline",
               "MA",
               "02446"};
          oWW.SetDataSource(arrValues, arrFields);
        </code>
            <br/>
            <code>

          '--- Create a string array of field names.
          '--- The field names  must be the same as the merge field
          '--- names in the template.
          Dim arrFields As String() = {"CompanyName", _
               "StreetAddr", _
               "City", _
               "State", _
               "ZipCode"}

          '--- Create an object array of values
          '--- Ordinal numbers match those of the fields array
          Dim arrValues As Object() = {"SoftArtisans", _
               "1330 Beacon Street", _
               "Brookline", _
               "MA", _
               "02446"}
          oWW.SetDataSource(arrValues, arrFields)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object,System.String)">
            <Doc>
        <summary>Sets the data source for the specified main document merge field to an object. The <b>main document</b> is the part of the document that is not within a repeat block.</summary>
        <param name="value">An object to use as a data source. WordWriter will insert this value in the specified merge field.</param>
        <param name="name">The name of the the merge field at which to insert the value.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>The data marker requires a #1 on the template. For example, to use the sample code below, you must have a merge field on the template with the data marker "FirstName.#1".</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate template = new WordTemplate();
          template.Open(Request.PhysicalApplicationPath + "file.doc");
          string name = txtName.Text;
          template.SetDataSource(name,"FirstName");
          template.Process();
          template.Save(Response,"file.doc",false);
          ...
        </code>
            <br/>
            <code>

          Dim template As New WordTemplate()
          template.Open(Request.PhysicalApplicationPath &amp; "file.doc")
          Dim name As String = txtName.Text
          template.SetDataSource(name, "FirstName")
          template.Process()
          template.Save(Response, "file.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.ICollection,System.String[])">
            <Doc>
        <summary>Sets an <see cref="T:System.Collections.ICollection"/> as a data source to bind to a specified set of main document merge fields.</summary>
        <param name="dataSource">An <c>ICollection</c> to use as the data source.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>This method takes a collection of values and an array of field names. The two must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
        </remarks>
        <example>
          <para>
            <code>

          wordTempl.SetDataSource(collValues, arrNames);
        </code>
            <br/>
            <code>

          wordTempl.SetDataSource(collValues, arrNames)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.ICollection,System.String[],System.String)">
            <Doc>
        <summary>Sets an <see cref="T:System.Collections.ICollection"/> collection as a data source to bind to a specified set of main document merge fields.</summary>
        <param name="dataSource">An <c>ICollection</c> to use as the data source.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="dataSourceName">Specifies the data source name for the set of merge fields.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>This method takes a collection of values and an array of field names. The two must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
        </remarks>
        <example>
          <para>
            <code>

          wordTempl.SetDataSource(collValues, arrNames, "Products");
        </code>
            <br/>
            <code>

          wordTempl.SetDataSource(collValues, arrNames, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.IEnumerator,System.String[])">
            <Doc>
        <summary>Sets an <see cref="T:System.Collections.IEnumerator"/> collection as a data source to bind to a specified set of main document merge fields.</summary>
        <param name="dataSource">An <c>IEnumerator</c> collection to use as the data source.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>This method takes a collection of values and an array of field names. The two must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
        </remarks>
        <example>
          <para>
            <code>

          wordTempl.SetDataSource(collValues, arrNames);
        </code>
            <br/>
            <code>

          wordTempl.SetDataSource(collValues, arrNames)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.IEnumerator,System.String[],System.String)">
            <Doc>
        <summary>Sets an <see cref="T:System.Collections.IEnumerator"/> collection as a data source to bind to a specified set of main document merge fields.</summary>
        <param name="dataSource">An <c>IEnumerator</c> collection to use as the data source.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="dataSourceName">Specifies the data source name for the set of merge fields.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>This method takes a collection of values and an array of field names. The two must contain the same number of elements. Each name in the array of field names must be the same as the corresponding merge field name in the template.</para>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
        </remarks>
        <example>
          <para>
            <code>

          wordTempl.SetDataSource(collValues, arrNames, "Products");
        </code>
            <br/>
            <code>

          wordTempl.SetDataSource(collValues, arrNames, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.IDictionary)">
            <Doc>
        <summary>Sets a template's main document data source to an <see cref="T:System.Collections.IDictionary"/> collection. An <c>IDictionary</c> represents a collection of key-and-value pairs.</summary>
        <param name="dataSource">An <c>IDictionary</c> collection of key-and-value pairs.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
          <para>Do not call this method more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. To set multiple main document data sources, use the following methods:<br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataSet,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.DataTable,System.String)"/><br/><br/><see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Data.IDataReader,System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetDataSource(coll);
        </code>
            <br/>
            <code>

          wTempl.SetDataSource(coll)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Collections.IDictionary,System.String)">
            <Doc>
        <summary>Sets a template's main document data source to an <see cref="T:System.Collections.IDictionary"/> collection. An <c>IDictionary</c> represents a collection of key-and-value pairs.</summary>
        <param name="dataSource">An <c>IDictionary</c> collection of key-and-value pairs.</param>
        <param name="datSourceName">The name of the set of template merge fields at which to insert the values imported from the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>Each merge field in a WordWriter template must bind to a data source field/value pair. The number of merge fields in the main template document (the part of the document that is not within a repeat block) may not exceed the number of values in the data source defined by <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/>. However, the number of values in the data source may be greater than the number of merge fields in the main template document.</para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetDataSource(coll, "Products");
        </code>
            <br/>
            <code>

          wTempl.SetDataSource(coll, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Process">
            <Doc>
        <summary>
          <para>The <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Process"/> method enters data source values in a template's merge fields, and creates an image of the output file (the new document) in memory.</para>
        </summary>
        <remarks>
          <para>The save method can then save the output file to disk, stream it to the browser, or both.</para>
          <para>Call <c>Process</c> after <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDataSource(System.Object[],System.String[],System.String)"/> and before <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/>.</para>
          <para>You can only call <c>Process</c> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.</para>
        </remarks>
        <example>
          <para>Generate a single Word file:<br/><code>
            //--- Create an object array of values
            //--- and a string array of field names to pass to
            //--- SetDataSource.
            Object[] arrValue = {"SoftArtisans WordWriter"};
            string[] arrName = {"ProductName"};

            //--- Create an instance of WordTemplate.
            WordTemplate oWW = new WordTemplate();

            //--- Open a template file.
            oWW.Open(Server.MapPath(@"../StringVarTemplate.doc"));

            //--- Set the file's data source by passing
            //--- SetDataSource an array of values and an
            //--- array of merge field names.
            oWW.SetDataSource(arrValue, arrName);

            //--- Call Process() to populate the template with
            //--- the new data.
            oWW.Process();

            //--- After processing the template, call Save() and pass it
            //--- Page.Response to stream the generated file to the browser.
            oWW.Save(Page.Response, "StringVarOutput.doc", false);
</code><br/><code>

            '--- Create an object array of values
            '--- and a string array of field names to pass to
            '--- SetDataSource.
            Dim arrValue As Object() = {"SoftArtisans WordWriter"}
            Dim arrName As String() = {"ProductName"}

            '--- Create an instance of WordTemplate.
            Dim oWW As New WordTemplate()

            '--- Open a template file.
            oWW.Open(Server.MapPath("./StringVarTemplate.doc"))

            '--- Set the file's data source by passing
            '--- SetDataSource an array of values and an
            '--- array of merge field names.
            oWW.SetDataSource(arrValue, arrName)

            '--- Call Process() to populate the template with
            '--- the new data.
            oWW.Process()

            '--- After processing the template, call Save() and pass it
            '--- Page.Response to stream the generated file to the browser.
            oWW.Save(Page.Response, "StringVarOutput.doc", False)
</code></para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarkFieldMarkers(System.String)">
            <Doc>
        <summary>
          <para>Returns the names of all merge fields in the specified bookmark.</para>
        </summary>
        <param name="aBookmark"/>
        <returns>
          <para>The names of all merge fields in the specified bookmark.</para>
        </returns>
        <remarks>
          <para>Bookmarks are used to define repeat blocks.   A repeat block is a fragment in the template document that contains merge fields and that will be repeated for each row in a data source.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create the WordTemplate object.
          WordTemplate oWW = new WordTemplate();

          //--- Open a template using a string.
          oWW.Open(@"C:\template.doc");

          //--- Get all the bookmark names in the document.
          String[] allBookmarks = oWW.Bookmarks;

          //--- Get all the merge fields in the first bookmark.
          String[] someFields = oWW.BookmarkFieldMarkers(allBookmarks[0]);
        </code>
            <br/>
            <code>

          '--- Create the WordTemplate object.
          Dim oWW As New WordTemplate()

          '--- Open a template using a string.
          oWW.Open("C:\template.doc")

          '--- Get all the bookmark names in the document.
          Dim allBookmarks As String() = oWW.Bookmarks

          '--- Get all the merge fields in the first bookmark.
          Dim someFields As String() = oWW.BookmarkFieldMarkers(allBookmarks(0))
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.checkIsGlobalRepeatBlockSet">
            @property 
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ToArray(System.Collections.IEnumerator)">
            <summary>
            Convert an IEnumberable to an array
            </summary>
            <param name="dataSource">an IEnumerable</param>
            <returns>the array</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)">
            <Doc>
        <summary>
          <para>Sends the generated Word binary file to the specified <see cref="T:System.IO.Stream"/> or, a class derived from <c>System.IO.Stream</c> (for example, <see cref="T:System.IO.FileStream"/>).</para>
        </summary>
        <param name="oStreamObj">
          <para>A <c>System.IO.Stream</c> object (for example, <c>Response.OutputStream</c>) or, a class derived from <c>System.IO.Stream</c> (for example, <c>System.IO.FileStream</c>)</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <remarks>
          <para>If you pass <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> a <c>System.IO.FileStream</c>, WordWriter will save the generated file on the server. If you pass <c>Save</c> <c>Response.OutputStream</c>, WordWriter will stream the the generated file to the client.</para>
          <para>You can call <c>Save</c> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Open a FileStream object, pass it to
          //--- the Save method, and close the FileStream object.
          FileStream oFileStream = new FileStream(@"c:\temp\StreamOutput.doc", FileMode.Create);
          oWW.Save(oFileStream);

          //--- Could put this in a finally block
          if(oFileStream!=null)
               oFileStream.Close();
        </code>
            <br/>
            <code>

          '--- Open a FileStream  object, pass it to
          '--- the Save method, and close the FileStream object.
          Dim oFileStream As New FileStream("c:\temp\StreamOutput.doc", _
               FileMode.Create)
          oWW.Save(oFileStream)

          '--- Could put this in a finally block
          If Not oFileStream Is Nothing Then
               oFileStream.Close()
          End If
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.String)">
            <Doc>
        <summary>Saves the generated Word file on the server.</summary>
        <param name="strFilePath">Specifies a complete path and file name for the generated file. WordWriter will save the file to this location. If a file with the same name exists, it will be overwritten by the new Word file.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. This allows you to save more than one copy of a generated file and/or save the file on the server and stream it to the client.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.Open(@"c:\templates\Template.doc");
          oWW.SetDataSource(arrValue, arrName);
          oWW.Process();
          oWW.Save(@"c:\reports\Report.doc");
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.Open("c:\templates\Template.doc")
          oWW.SetDataSource(arrValue, arrName)
          oWW.Process()
          oWW.Save("c:\reports\Report.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.Web.HttpResponse)">
            <Doc>
        <summary>
          <para>If you pass <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> an <see cref="T:System.Web.HttpResponse"/> object object, WordWriter will stream the generated file to the client. If the user chooses to open (rather than save) the file, it will open in the browser window.</para>
        </summary>
        <param name="response">
          <para>The page's <c>HttpResponse</c> object.</para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <remarks>You can call <c>Save</c> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client. </remarks>
        <example>
          <para>
            <code>

          ...
          WordTemplate oWW = new WordTemplate();
          oWW.Open(Server.MapPath(@"./StringVarTemplate.doc"));
          oWW.SetDataSource(MyDataTable);
          oWW.Process();
          oWW.Save(Page.Response);
        </code>
            <br/>
            <code>

          ...
          Dim oWW As New WordTemplate()
          oWW.Open(Server.MapPath("./StringVarTemplate.doc"))
          oWW.SetDataSource(MyDataTable)
          oWW.Process()
          oWW.Save(Page.Response)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.Web.HttpResponse,System.String,System.Boolean)">
            <Doc>
        <summary>
          <para>If you pass <c>save</c> an HttpServletResponse object, WordWriter will stream the generated file to the client. This method allows you to specify a default client-side file name, and whether the file should be opened in the browser window or in Microsoft Word.</para>
        </summary>
        <param name="response">
          <para>The <see cref="T:System.Web.HttpResponse"/> instance of the page.</para>
        </param>
        <param name="attachmentName">
          <para>Specifies a name for the generated Word file; this name will be displayed in the download dialog when the file is streamed to the browser.</para>
        </param>
        <param name="openInBrowser">
          <para>If <c>openInBrowser</c> is set to <c>true</c>, and the user chooses to open the file, the file will open in the browser window. If <c>openInBrowser</c> is set to <c>false</c>, and the user chooses to open the file, the file will open in Microsoft Word. By default, the file will open in the browser window. </para>
          <para>
            <b>Note:</b>
            <br/>
            <para>Not all browsers can embed a Word file in the browser window.</para>
          </para>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>Save</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> more than once for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. This allows you to save more than one copy of a generated file, and/or both save the file on the server and stream it to the client. </para>
        </remarks>
        <example>Stream to the client and open in MS Word<br/><para>When you pass an HttpResponse object to <c>Save</c>, WordWriter will stream the generated Word file to the client. The browser will display a File Download dialog asking the user to open or save the file. The method's second parameter specifies a file name to display in the File Download dialog. If the method's third parameter - http://wiki.softartisans.com/display/WW8/#param-openInBrowser - is False and the user chooses to open the Word file, the file will open in Microsoft Word. <br/><code>
oWW.Save(Page.Response, "StringVarOutput.doc", false);</code><br/><code>
oWW.Save(Page.Response, "StringVarOutput.doc", False)</code></para>Stream to the client and open in the browser window<br/><para>When you pass an HttpResponse object to <c>Save</c>, WordWriter will stream the generated Word file to the client. The browser will display a File Download dialog asking the user to open or save the file. The method's second parameter specifies a file name to display in the File Download dialog. If the method's third parameter - <c>OpenInBrowser</c> - is True and the user chooses to open the Word file, the file will open in the browser window.<br/><code>
            oWW.Save(Page.Response, "StringVarOutput.doc", true);
</code><br/><code>
            oWW.Save(Page.Response, "StringVarOutput.doc", True)
</code></para></example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the entire page as a repeat block, adding a new page when needed. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="dataSource">An ICollection to use as the data source.<br/></param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page.  Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>&amp;nbsp;Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>
          wt.SetMailMerge(coll);
        </code>
            <br/>
            <code>

          wt.SetMailMerge(coll)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.IEnumerator)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="dataSource">An IEnumerator collection to use as a data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          wt.SetMailMerge(coll);
        </code>
            <br/>
            <code>

          wt.SetMailMerge(coll)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.DataSet)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="table">An ADO.NET DataSet to use as a data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataAdapter adapter = new OleDbDataAdapter();
          adapter.SelectCommand = cmd;

          //--- Dump the data into a DataSet
          DataSet ds = new DataSet();
          adapter.Fill(ds);
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataSet
          wt.SetMailMerge(ds);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" &amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") + ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim adapter As New OleDbDataAdapter()
          adapter.SelectCommand = cmd

          '--- Dump the data into a DataSet
          Dim ds As New DataSet()
          adapter.Fill(ds)
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataSet
          wt.SetMailMerge(ds)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.DataSet,System.Int32)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="ds">An ADO.NET DataSet to use as a data source.</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataAdapter adapter = new OleDbDataAdapter();
          adapter.SelectCommand = cmd;

          //--- Dump the data into a DataSet
          DataSet ds = new DataSet();
          adapter.Fill(ds);
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataSet
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(ds, WordTemplate.ALL_ROWS);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>
          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") &amp; ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim adapter As New OleDbDataAdapter()
          adapter.SelectCommand = cmd

          '--- Dump the data into a DataSet
          Dim ds As New DataSet()
          adapter.Fill(ds)
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataSet
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(ds, WordTemplate.ALL_ROWS)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.DataTable)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="dt">An ADO.NET DataTable to use as a data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataAdapter adapter = new OleDbDataAdapter();
          adapter.SelectCommand = cmd;

          //--- Dump the data into a DataTable
          DataTable dt = new DataTable();
          adapter.Fill(dt);
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataTable
          wt.SetMailMerge(dt);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
          ...
        </code>
            <br/>
            <code>

          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" &amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") &amp; ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim adapter As New OleDbDataAdapter()
          adapter.SelectCommand = cmd

          '--- Dump the data into a DataTable
          Dim dt As New DataTable()
          adapter.Fill(dt)
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataTable
          wt.SetMailMerge(dt)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.DataTable,System.Int32)">
            <Doc>
        <summary>Sets the MailMerge's data source to a DataTable. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="dt">An ADO.NET DataTable to use as a data source.</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataAdapter adapter = new OleDbDataAdapter();
          adapter.SelectCommand = cmd;

          //--- Dump the data into a DataTable
          DataTable dt = new DataTable();
          adapter.Fill(dt);
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataTable
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(dt, WordTemplate.ALL_ROWS);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" &amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") &amp; ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim adapter As New OleDbDataAdapter()
          adapter.SelectCommand = cmd

          '--- Dump the data into a DataTable
          Dim dt As New DataTable()
          adapter.Fill(dt)
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataTable
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(dt, WordTemplate.ALL_ROWS)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.IDataReader)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="dr">A SqlDataReader, OleDbDataReader, or AdomdDataReader to use as the data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          //--- Place all of the data in a DataReader object
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataReader dr = cmd.ExecuteReader();
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataReader
          wt.SetMailMerge(dr);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" &amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") &amp; ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          '--- Place all of the data in a DataReader object
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim dr As OleDbDataReader = cmd.ExecuteReader()
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataReader
          wt.SetMailMerge(dr)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Data.IDataReader,System.Int32)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields.</summary>
        <param name="dr">A SqlDataReader, OleDbDataReader, or AdomdDataReader to use as the data source.</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create connection string for Excel file data
          string connString =
               "Provider=Microsoft.Jet.OLEDB.4.0;" +
               "Data Source=" + Server.MapPath("data/MailMergeData.xls") + ";" +
               "Extended Properties=Excel 8.0;";

          //--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          //--- Place all of the data in a DataReader object
          OleDbConnection conn = new OleDbConnection(connString);
          conn.Open();
          OleDbCommand cmd = new OleDbCommand("SELECT * FROM [Sheet1$]", conn);
          OleDbDataReader dr = cmd.ExecuteReader();
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the DataReader
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(dr, WordTemplate.ALL_ROWS);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          '--- Create connection string for Excel file data
          Dim connString As String = _
               "Provider=Microsoft.Jet.OLEDB.4.0;" &amp; _
               "Data Source=" &amp; Server.MapPath("data/MailMergeData.xls") &amp; ";" &amp; _
               "Extended Properties=Excel 8.0;"

          '--- Use OleDb to get all data from Sheet1 of the MailMergeData.xls spreadsheet
          '--- Place all of the data in a DataReader object
          Dim conn As New OleDbConnection(connString)
          conn.Open()
          Dim cmd As New OleDbCommand("SELECT * FROM [Sheet1$]", conn)
          Dim dr As OleDbDataReader = cmd.ExecuteReader()
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template\MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the DataReader
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          wt.SetMailMerge(dr, WordTemplate.ALL_ROWS)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Object[0:,0:],System.String[])">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="table">The two-dimensional(rectangular) array of objects to use as the data source.</param>
        <param name="columnNames">The one-dimensional array of strings that represent the field names to be replaced by the data. These names must match the column names from your data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          //--- A 2-D rectangular array of values
          object[,] data = new object[,]{
               {"Knoxville","Tennessee"},
               {"Boston","Massachusetts"},
               {"Washington","DC"},
               {"Seattle","Washington"},
               {"Chicago", "Illinois"},
               {"New York","New York"},
               {"Atlanta", "Georgia"},
               {"Los Angeles", "California"},
               {"Houston", "Texas"}
          };

          //--- names array, elements correspond to merge field names
          string[] names = new string[]{"City","State"};
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the 2-D rectangular data array
          wt.SetMailMerge(data, names);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          ...
          '--- A 2-D rectangular array of values
          Dim data(,) As Object = { _
               {"Knoxville", "Tennessee"}, _
               {"Boston", "Massachusetts"}, _
               {"Washington", "DC"}, _
               {"Seattle", "Washington"}, _
               {"Chicago", "Illinois"}, _
               {"New York", "New York"}, _
               {"Atlanta", "Georgia"}, _
               {"Los Angeles", "California"}, _
               {"Houston", "Texas"} _
          }

          '--- names array, elements correspond to merge field names
          Dim names() As String = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the 2-D rectangular data array
          wt.SetMailMerge(data, names)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Object[0:,0:],System.String[],System.Int32,System.Boolean)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="table">The two-dimensional (rectangular) array of objects to use as the data source.</param>
        <param name="columnNames">The one-dimensional array of strings that represent the field names to be replaced by the data. These names must match the column names from your data source. <br/></param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/> . <br/></param>
        <param name="transpose">If transpose is set to <c>true</c>, the array is treated as Object[column, row]. If transpose is set to <c>false</c>, the array is treated as Object[row, column].</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          //--- A 2-D rectangular array of values
          //--- This is a "transposed" array with columns in the first
          //--- dimension and rows in the second
          object[,] data = new object[,]{
               {"Knoxville", "Boston",
               "Washington", "Seattle",
                "Chicago", "New York",
               "Atlanta", "Los Angeles",
               "Houston"},
               {"Tennessee", "Massachusetts",
               "DC", "Washington",
               "Illinois", "New York",
               "Georgia", "California",
               "Texas"}
               };

          //--- Names array, elements correspond to merge field names
          string[] names = new string[]{"City","State"};
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the 2-D rectangular data array
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          //--- Transpose is set to true to handle the transposed array
          wt.SetMailMerge(data, names, WordTemplate.ALL_ROWS, true);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          ...
          '--- A 2-D rectangular array of values
          '--- This is a "transposed" array with columns in the first
          '--- dimension and rows in the second
          Dim data(,) As Object = { _
               {"Knoxville", "Boston", _
               "Washington", "Seattle", _
               "Chicago", "New York", _
               "Atlanta", "Los Angeles", _
               "Houston"}, _
               {"Tennessee", "Massachusetts", _
               "DC", "Washington", _
               "Illinois", "New York", _
               "Georgia", "California", _
               "Texas"} _
               }

          '--- names array, elements correspond to merge field names
          Dim names() As String = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the 2-D rectangular data array
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          '--- Transpose is set to true to handle the transposed array
          wt.SetMailMerge(data, names, WordTemplate.ALL_ROWS, True)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Object[],System.String[])">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="data">The one-dimensional array of objects to use as the data source.</param>
        <param name="fieldNames">The one-dimensional array of strings that represent the field names to be replaced by the data. These names must match the column names from your data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          //--- A one-dimensional array of values
          object[] data = new object[]{"Knoxville","Tennessee"};

          //--- Names array, elements correspond to merge field names
          string[] names = new string[]{"City","State"};
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the one-dimensional data array
          wt.SetMailMerge(data, names);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          ...
          '--- A one-dimensional arrray of values
          Dim data() As Object = {"Knoxville", "Tennessee"}

          '--- names array, elements correspond to merge field names
          Dim names() As String = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the one-dimensional array
          wt.SetMailMerge(data, names)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Object[][],System.String[])">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="jaggedArray">The jagged array (array-of-arrays) to use as the data source.</param>
        <param name="columnNames">The one-dimensional array of strings that represent the field names to be replaced by the data. These names must match the column names from your data source.</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page.Â  Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          //--- A 2-D jagged array of values
          object[][] data = new object[][]{
               new string[]{"Knoxville","Tennessee"},
               new string[]{"Boston","Massachusetts"},
               new string[]{"Washington","DC"},
               new string[]{"Seattle","Washington"},
               new string[]{"Chicago", "Illinois"},
               new string[]{"New York","New York"},
               new string[]{"Atlanta", "Georgia"},
               new string[]{"Los Angeles", "California"},
               new string[]{"Houston", "Texas"}
               };

          //--- Names array, elements correspond to merge field names
          string[] names = new string[]{"City", "State"};
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the 2-D jagged data array
          wt.SetMailMerge(data, names);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          ...
          '--- A 2-D jagged array of values
          Dim data()() As Object = { _
               New Object() {"Knoxville", "Tennessee"}, _
               New Object() {"Boston", "Massachusetts"}, _
               New Object() {"Washington", "DC"}, _
               New Object() {"Seattle", "Washington"}, _
               New Object() {"Chicago", "Illinois"}, _
               New Object() {"New York", "New York"}, _
               New Object() {"Atlanta", "Georgia"}, _
               New Object() {"Los Angeles", "California"}, _
               New Object() {"Houston", "Texas"} _
               }

          '--- names array, elements correspond to merge field names
          Dim names() As String = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the 2-D jagged data array
          wt.SetMailMerge(data, names)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Object[][],System.String[],System.Int32,System.Boolean)">
            <Doc>
        <summary>Sets the MailMerge's data source to a two-dimensional (rectangular) array of objects. A MailMerge by default treats the page content as a repeat block, repeating the page content for each row unless NEXT fields are used. If the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/> property is set to true, the NEXT field can also be used to indicate that the next row of data should be inserted instead of the current row at the next occurence of the merge fields. This should largely imitate the behavior of a Microsoft Word Mail merge.</summary>
        <param name="jaggedArray">The jagged array (array-of-arrays) to use as the data source.</param>
        <param name="columnNames">The one-dimensional array of strings that represent the field names to be replaced by the data. These names must match the column names from your data source.</param>
        <param name="maxRows">Specifies the maximum number of rows to import from the data source. To import the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.<br/></param>
        <param name="transpose">If transpose is set to <c>true</c>, the array is treated as Object[column][row]. If transpose is set to <c>false</c>, the array is treated as Object[row][column].</param>
        <exception cref="T:System.ArgumentNullException">
          <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Save(System.IO.Stream)"/> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> once for each instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>.  If you are using the Word 2003 binary template file type (.doc/.dot), you can call SetMailMerge or SetRepeatBlock, but not both.</para>
          <para>Additionally, only the page content is repeated for each row, not the entire page itself.  If you wish to have the page itself repeat for each row, you will need to remember to place a page break at the bottom of the page. Alternatively, you can create a hidden page break at the top of the page as follows:</para>
          <list type="bullet">
            <item>
              <description>Put the cursor at the top of the document</description>
            </item>
            <item>
              <description>Go to Page Layout and open the paragraph formatting dialog</description>
            </item>
            <item>
              <description>On the Line and Page Breaks tab,&amp;nbsp; select "Page Break Before"</description>
            </item>
          </list>
          <para>Merge Fields for using the SetMailMerge method must not specify a data source -- the data source is implied, and using a data source name will cause WordTemplate to throw an error.  Valid merge field formats for use with SetMailMerge include field names (<b>&amp;laquo;fieldname&amp;raquo;</b>) and field ordinals (<b>&amp;laquo;#1&amp;raquo;</b>).</para>
          <para>
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetMailMerge(System.Collections.ICollection)"/> will now work with headers and footers.  A section break is required instead of a page break if each header or footer will be different.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          //--- A 2-D jagged array of values
          //--- This is a "transposed" array with columns in the first
          //--- dimension and rows in the second
          object[][] data = new object[][]{
               new string[]{"Knoxville", "Boston",
               "Washington", "Seattle",
               "Chicago", "New York",
               "Atlanta", "Los Angeles",
               "Houston"},
               new string[]{"Tennessee", "Massachusetts",
               "DC", "Washington",
               "Illinois", "New York",
               "Georgia", "California",
               "Texas"}
               };

          //--- Names array, elements correspond to merge field names
          string[] names = new string[] { "City", "State" };
          WordTemplate wt = new WordTemplate();
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"));

          //--- Set the mail merge
          //--- The data source is the 2-D jagged data array
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          //--- Transpose is set to true to handle the transposed array
          wt.SetMailMerge(data, names, WordTemplate.ALL_ROWS, true);
          wt.Process();
          wt.Save(Page.Response, "output.doc", false);
        </code>
            <br/>
            <code>

          '--- A 2-D jagged array of values
          '--- This is a "transposed" array with columns in the first
          '--- dimension and rows in the second
          Dim data()() As Object = { _
               New Object() {"Knoxville", "Boston", _
              "Washington", "Seattle", _
               "Chicago", "New York", _
               "Atlanta", "Los Angeles", _
               "Houston"}, _
               New Object() {"Tennessee", "Massachusetts", _
               "DC", "Washington", _
               "Illinois", "New York", _
               "Georgia", "California", _
               "Texas"} _
               }

          '--- names array, elements correspond to merge field names
          Dim names() As String = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open(Server.MapPath("template/MergeFieldTest.doc"))

          '--- Set the mail merge
          '--- The data source is the jagged data array
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          '--- Transpose is set to true to handle the transposed array
          wt.SetMailMerge(data, names, WordTemplate.ALL_ROWS, True)
          wt.Process()
          wt.Save(Page.Response, "output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an <see cref="T:System.Collections.ICollection"/>. </summary>
        <param name="dataSource">An <c>ICollection</c> to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file.  To see a list of template bookmark names: <br/></para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source.  In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter http://wiki.softartisans.com/display/WW8/#param-bookmark must exist in the template.  All merge fields in the repeat block will bind to the specified data source.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Collections.ICollection,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetRepeatBlock(coll, "Products");
        </code>
            <br/>
            <code>

          wTempl.SetRepeatBlock(coll, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an <see cref="T:System.Collections.ICollection"/>. </summary>
        <param name="dataSource">An <c>ICollection</c> to use as the data source.</param>
        <param name="field">The name of the merge field at which to insert the values.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file.  To see a list of template bookmark names: <br/></para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source.  In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter http://wiki.softartisans.com/display/WW8/#param-bookmark must exist in the template.  All merge fields in the repeat block will bind to the specified data source.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Collections.ICollection,+String,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetRepeatBlock(coll, "ProductID", "Products");
        </code>
            <br/>
            <code>

          wTempl.SetRepeatBlock(coll, "ProductID", "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.IEnumerator,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an <see cref="T:System.Collections.IEnumerator"/> collection. </summary>
        <param name="dataSource">An <c>IEnumerator</c> collection to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file.  To see a list of template bookmark names: <br/></para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source.  In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter http://wiki.softartisans.com/display/WW8/#param-bookmark must exist in the template.  All merge fields in the repeat block will bind to the specified data source.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Collections.IEnumerator,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetRepeatBlock(coll, "Products");
        </code>
            <br/>
            <code>

          wTempl.SetRepeatBlock(coll, "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.IEnumerator,System.String,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an <see cref="T:System.Collections.IEnumerator"/> collection. </summary>
        <param name="dataSource">An <c>IEnumerator</c> collection to use as the data source.</param>
        <param name="field">The name of the merge field at which to insert the values.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file.  To see a list of template bookmark names: <br/></para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source.  In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter http://wiki.softartisans.com/display/WW8/#param-bookmark must exist in the template.  All merge fields in the repeat block will bind to the specified data source.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Collections.IEnumerator,+String,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          wTempl.SetRepeatBlock(coll, "ProductID", "Products");
        </code>
            <br/>
            <code>

          wTempl.SetRepeatBlock(coll, "ProductID", "Products")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.DataSet,System.String)">
            <Doc>
        <summary>
          <para>Sets the specified repeat block's data source to an ADO.NET DataSet. A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
        </summary>
        <param name="ds">
          <para>The DataSet to use as the data source.</para>
        </param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names:</para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</para>
        </exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataSet to <c>SetRepeatBlock</c>, WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.DataSet,+String)</para>
        </remarks>
        <example>
          <para>
            <code>
          //--- A dataset with the data to be repeated
          DataSet ds = GetDataSet();
          WordTemplate oWW = new WordTemplate();
          oWW.Open("c:\\template.doc");

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "ds" is the DataSet containing the data to be
          //--- imported and repeated in the repeat block
          //--- The first DataTable in the DataSet will be used
          oWW.SetRepeatBlock(ds, "Page");
          oWW.Process();
          oWW.Save(Page.Response, "Output.doc", false);
</code>
            <br/>
            <code>
          '--- A dataset with the data to be repeated
          Dim ds As DataSet = GetDataSet()
          Dim oWW As New WordTemplate()
          oWW.Open("c:\template.doc")

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "ds" is the DataSet containing the data to be
          '--- imported and repeated in the repeat block
          '--- The first DataTable in the DataSet will be used
          oWW.SetRepeatBlock(ds, "Page")
          oWW.Process()
          oWW.Save(Page.Response, "Output.doc", False)
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.DataSet,System.String,System.Int32)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an ADO.NET DataSet. </summary>
        <param name="ds">The DataSet to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <param name="maxRows">Specifies the maximum number of repetitions to write to the file. If Next fields are enabled (see <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/>), then the number of rows imported from the data source is <c>maxRows\*(numberOfNextFields\+1)</c>. If Next fields are not enabled the number of rows imported is equal to the number of repetitions written out. To write the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataSet to <c>SetRepeatBlock</c> - by either setting <c>maxRows</c> to 0 or passing an empty DataSet - WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.DataSet,+String,+Int32)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A dataset with the data to be repeated
          DataSet ds = GetDataSet();
          WordTemplate oWW = new WordTemplate();
          oWW.Open("c:\\template.doc");

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "ds" is the DataSet containing the data to be
          //--- imported and repeated in the repeat block
          //--- The first DataTable in the DataSet will be used
          //--- Set MaxRows to 10.  No matter how many DataRows
          //--- are in the DataSet, only 10 will be imported
          oWW.SetRepeatBlock(ds, "Page", 10);
          oWW.Process();
          oWW.Save(Page.Response, "Output.doc", false);
        </code>
            <br/>
            <code>

          '--- A dataset with the data to be repeated
          Dim ds As DataSet = GetDataSet()
          Dim oWW As New WordTemplate()
          oWW.Open("c:\template.doc")

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "ds" is the DataSet containing the data to be
          '--- imported and repeated in the repeat block
          '--- The first DataTable in the DataSet will be used
          '--- Set MaxRows to 10.  No matter how many DataRows
          '--- are in the DataSet, only 10 will be imported
          oWW.SetRepeatBlock(ds, "Page", 10)
          oWW.Process()
          oWW.Save(Page.Response, "Output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.DataTable,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an ADO.NET DataTable. </summary>
        <param name="dt">The DataTable to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataTable to <c>SetRepeatBlock</c>, WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.DataTable,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A DataTable with the data to be repeated
          DataTable ds = GetDataTable();
          WordTemplate oWW = new WordTemplate();
          oWW.Open("c:\\template.doc");

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "dt" is the DataTable containing the data to be
          //--- imported and repeated in the repeat block
          oWW.SetRepeatBlock(dt, "Page");
          oWW.Process();
          oWW.Save(Page.Response, "Output.doc", false);
        </code>
            <br/>
            <code>

          '--- A DataTable with the data to be repeated
          Dim ds As DataTable = GetDataTable()
          Dim oWW As New WordTemplate()
          oWW.Open("c:\template.doc")

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "dt" is the DataTable containing the data to be
          '--- imported and repeated in the repeat block
          oWW.SetRepeatBlock(dt, "Page")
          oWW.Process()
          oWW.Save(Page.Response, "Output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.DataTable,System.String,System.Int32)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an ADO.NET DataTable. </summary>
        <param name="dt">The DataTable to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <param name="maxRows">Specifies the maximum number of repetitions to write to the file. If Next fields are enabled (see <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/>), then the number of rows imported from the data source is <c>maxRows\*(numberOfNextFields\+1)</c>. If Next fields are not enabled the number of rows imported is equal to the number of repetitions written out. To write the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataTable to <c>SetRepeatBlock</c> - by either setting <c>maxRows</c> to 0 or passing an empty DataTable - WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.DataTable,+String,+Int32)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A DataTable with the data to be repeated
          DataTable ds = GetDataTable();
          WordTemplate oWW = new WordTemplate();
          oWW.Open("c:\\template.doc");

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "dt" is the DataTable containing the data to be
          //--- imported and repeated in the repeat block
          //--- Set MaxRows to 10.  Only 10 rows from the DataTable
          //--- will be imported
          oWW.SetRepeatBlock(dt, "Page", 10);
          oWW.Process();
          oWW.Save(Page.Response, "Output.doc", false);
        </code>
            <br/>
            <code>

          '--- A DataTable with the data to be repeated
          Dim ds As DataTable = GetDataTable()
          Dim oWW As New WordTemplate()
          oWW.Open("c:\template.doc")

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "dt" is the DataTable containing the data to be
          '--- imported and repeated in the repeat block
          '--- Set MaxRows to 10.  Only 10 rows from the DataTable
          '--- will be imported
          oWW.SetRepeatBlock(dt, "Page", 10)
          oWW.Process()
          oWW.Save(Page.Response, "Output.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.IDataReader,System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an IDataReader interface, which may be either a SqlDataReader, OleDbDataReader or an AdomdDataReader. </summary>
        <param name="dr">a SqlDataReader, OleDbDataReader, or an AdomdDataReader to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataReader to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.IDataReader,+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get a DataReader
          //--- WordWriter accepts OleDbDataReader, SqlDataReader, and AdomdDataReader
          OleDbDataReader dr = GetOleDbDataReader();
          WordTempalte oWW = new WordTemplate();
          oWW.Open(Page.MapPath("./template.doc"));

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "dr" is the DataReader containing information to be
          //--- imported and repeated in the repeat block
          oWW.SetRepeatBlock(dr, "Page");
          oWW.Process();
          oWW.Save(Page.Response, "EmployeeOutput.doc", false);

          //--- Close the DataReader in a finally block
          dr.Close();
  
          private OleDbDataReader GetOleDbDataReader()
          {
               OleDbConnection Conn = new OleDbConnection(connString);

               //--- SQL Query for categories.
               string CategorySQL = "SELECT CategoryID, CategoryName," +
                    "Description FROM Categories";
               Conn.Open();
               return new OleDbCommand(CategorySQL, Conn).ExecuteReader(
                    CommandBehavior.CloseConnection);
          }
        </code>
            <br/>
            <code>

          '--- Get a DataReader
          '--- WordWriter accepts OleDbDataReader, SqlDataReader, and AdomdDataReader
          Dim dr As OleDbDataReader = GetOleDbDataReader()
          Dim oWW As New WordTemplate()
          oWW.Open(Page.MapPath("./template.doc"))

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "dr" is the DataReader containing information to be
          '--- imported and repeated in the repeat block
          oWW.SetRepeatBlock(dr, "Page")
          oWW.Process()
          oWW.Save(Page.Response, "EmployeeOutput.doc", False)

          '--- Close the DataReader in a finally block
          dr.Close()

          Private Function GetOleDbDataReader() As OleDbDataReader
               Dim Conn As New OleDbConnection(connString)

               '--- SQL Query for categories.
               Dim CategorySQL As String = "SELECT CategoryID, CategoryName," &amp; _
                    "Description FROM Categories"
               Conn.Open()
               Return New OleDbCommand(CategorySQL, Conn).ExecuteReader( _
                    CommandBehavior.CloseConnection)
          End Function
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Data.IDataReader,System.String,System.Int32)">
            <Doc>
        <summary>Sets the specified repeat block's data source to an IDataReader interface, which may be either a SqlDataReader, OleDbDataReader, or an AdomdDataReader. </summary>
        <param name="dr">a SqlDataReader, OleDbDataReader or and AdomdDataReader to use as the data source.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names:</para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <param name="maxRows">Specifies the maximum number of repetitions to write to the file. If Next fields are enabled (see <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/>), then the number of rows imported from the data source is <c>maxRows\*(numberOfNextFields\+1)</c>. If Next fields are not enabled the number of rows imported is equal to the number of repetitions written out. To write the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty DataReader to <c>SetRepeatBlock</c> - by either setting <c>maxRows</c> to 0 or passing an empty DataReader - WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(System.Data.IDataReader,+String,+Int32)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Get a DataReader
          //--- WordWriter accepts OleDbDataReader, SqlDataReader, and AdomdDataReader
          OleDbDataReader dr = GetOleDbDataReader();
          WordTempalte oWW = new WordTemplate();
          oWW.Open(Page.MapPath("./template.doc"));

          //--- Set a data source for the repeat block
          //--- defined by the bookmark "Page"
          //--- "dr" is the DataReader containing information to be
          //--- imported and repeated in the repeat block
          //--- Set MaxRows to 10.  Only 10 rows from the DataReader
          //--- will be imported
          oWW.SetRepeatBlock(dr, "Page", 10);
          oWW.Process();
          oWW.Save(Page.Response, "EmployeeOutput.doc", false);

          //--- Close the DataReader in a finally block
          dr.Close();
 
          private OleDbDataReader GetOleDbDataReader()
          {
               OleDbConnection Conn = new OleDbConnection(connString);

               //--- SQL Query for categories.
               string CategorySQL = "SELECT CategoryID, CategoryName," +
                    "Description FROM Categories";
               Conn.Open();
               return new OleDbCommand(CategorySQL, Conn).ExecuteReader(
                    CommandBehavior.CloseConnection);
          }
        </code>
            <br/>
            <code>

          '--- Get a DataReader
          '--- WordWriter accepts OleDbDataReader, SqlDataReader, and AdomdDataReader
          Dim dr As OleDbDataReader = GetOleDbDataReader()
          Dim oWW As New WordTemplate()
          oWW.Open(Page.MapPath("./template.doc"))

          '--- Set a data source for the repeat block
          '--- defined by the bookmark "Page"
          '--- "dr" is the DataReader containing information to be
          '--- imported and repeated in the repeat block
          '--- Set MaxRows to 10.  Only 10 rows from the DataReader
          '--- will be imported
          oWW.SetRepeatBlock(dr, "Page", 10)
          oWW.Process()
          oWW.Save(Page.Response, "EmployeeOutput.doc", False)

          '--- Close the DataReader in a finally block
          dr.Close()

          Private Function GetOleDbDataReader() As OleDbDataReader
               Dim Conn As New OleDbConnection(connString)

               '--- SQL Query for categories.
               Dim CategorySQL As String = "SELECT CategoryID, CategoryName," &amp; _
                    "Description FROM Categories"
               Conn.Open()
               Return New OleDbCommand(CategorySQL, Conn).ExecuteReader( _
                    CommandBehavior.CloseConnection)
          End Function
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Object[0:,0:],System.String[],System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to a multidimensional (rectangular) array of objects. </summary>
        <param name="table">An object array of values to use as a data source. WordWriter will insert these values in the repeat block's merge fields. Objects in the array must not be arrays themselves. Objects in the array can be null. Each object in the data source array must have a corresponding field name in the array of field names.</param>
        <param name="columnNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty data source to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(Object(,),+String(),+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A 2-D rectangular array of values
          string[,] ValuesArr = {{"Boston", "MA"},
               {"Miami", "FL"},
               {"Merchantville", "NJ"}};

          //--- Names array, elements correspond to merge field names
          string[] NamesArr = {"City", "State"};
          WordTemplate wt = new WordTemplate();
          wt.Open("template.doc");

          //--- Set the repeat block defined by the bookmark "Block"
          //--- The data source is the 2-D rectangular ValuesArr array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block");
          wt.Process();
          wt.Save("out.doc");
        </code>
            <br/>
            <code>

          '--- A 2-D rectangular array of values
          Dim ValuesArr As String(,)  = {{"Boston", "MA"}, _
               {"Miami", "FL"}, _
               {"Merchantville", "NJ"}}

          '--- Names array, elements correspond to merge field names
          Dim NamesArr As String() = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open("template.doc")

          '--- Set the repeat block defined by the bookmark "Block"
          '--- The data source is the 2-D rectangular ValuesArr array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block")
          wt.Process()
          wt.Save("out.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Object[0:,0:],System.String[],System.String,System.Int32,System.Boolean)">
            <Doc>
        <summary>Sets the specified repeat block's data source to a multidimensional (rectangular) array of objects. </summary>
        <param name="table">An object array of values to use as a data source. WordWriter will insert these values in the repeat block's merge fields. Objects in the array must not be arrays themselves. Objects in the array can be null. Each object in the data source array must have a corresponding field name in the array of field names. By default, the first dimension corresponds to row and the second to column (that is, Object[row,column]).</param>
        <param name="columnNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <param name="maxRows">Specifies the maximum number of repetitions to write to the file. If Next fields are enabled (see <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/>), then the number of rows imported from the data source is <c>maxRows\*(numberOfNextFields\+1)</c>. If Next fields are not enabled the number of rows imported is equal to the number of repetitions written out. To write the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <param name="transpose">If transpose is set to <c>true</c>, the array is treated as Object[column][row]. If transpose is set to <c>false</c>, the array is treated as Object[row][column].</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty data source to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(Object(,),+String(),+String,+Int32,+Boolean)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A 2-D rectangular array of values
          //--- This is a "transposed" array with columns in the first
          //--- dimension and rows in the second
          string[,] ValuesArr = {{"Boston", "Miami", "Merchantville"},
               {"MA", "FL", "NJ"}};

          //--- Names array, elements correspond to merge field names
          string[] NamesArr = {"City", "State"};
          WordTemplate wt = new WordTemplate();
          wt.Open("template.doc");

          //--- Set the repeat block defined by the bookmark "Block"
          //--- The data source is the 2-D rectangular ValuesArr array
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          //--- Transpose is true to handle the transposed array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block",
               WordTemplate.ALL_ROWS, true);
          wt.Process();
          wt.Save("out.doc");
        </code>
            <br/>
            <code>

          '--- A 2-D rectangular array of values
          '--- This is a "transposed" array with columns in the first
          '--- dimension and rows in the second
          Dim ValuesArr As String(,) = {{"Boston", "Miami", "Merchantville"}, _
               {"MA", "FL", "NJ"}}

          '--- Names array, elements correspond to merge field names
          Dim NamesArr As String() = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open("template.doc")

          '--- Set the repeat block defined by the bookmark "Block"
          '--- The data source is the 2-D rectangular ValuesArr array
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          '--- Transpose is true to handle the transposed array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block", _
               WordTemplate.ALL_ROWS, True)
          wt.Process()
          wt.Save("out.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Object[],System.String[],System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to a 1-dimensional array of objects. </summary>
        <param name="data">An object array of values to use as a data source. WordWriter will insert these values in the repeat block's merge fields. Objects in the array must not be arrays themselves. Objects in the array can be null. Each object in the data source array must have a corresponding field name in the array of field names.</param>
        <param name="fieldNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template. The array of data source values and the array of field names must contain the same number of elements.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty data source to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(Object(),+String(),+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          string[] NamesArr = {"CompanyName", "ProductName", "URL"};
          object[] ValuesArr = {"SoftArtisans", "WordWriter",
               "http://www.softartisans.com"};
          WordTemplate WordTempl = new WordTemplate();
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"));

          //--- Set the data source of the repeat block "ProductInfo"
          //--- by passing the value array and the name array initialized above.
          WordTempl.SetRepeatBlock(ValuesArr, NamesArr, "ProductInfo");
          WordTempl.Process();
          WordTempl.Save(Page.Response, "BasicGenerated.doc", false);
        </code>
            <br/>
            <code>

          Dim NamesArr As String() = {"CompanyName", "ProductName", "URL"}
          Dim ValuesArr As Object() = {"SoftArtisans", "WordWriter", _
               "http://www.softartisans.com"}
          Dim WordTempl As new WordTemplate()
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"))

          '--- Set the data source of the repeat block "ProductInfo"
          '--- by passing the value array and the name array initialized above.
          WordTempl.SetRepeatBlock(ValuesArr, NamesArr, "ProductInfo")
          WordTempl.Process()
          WordTempl.Save(Page.Response, "BasicGenerated.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Object[][],System.String[],System.String)">
            <Doc>
        <summary>Sets the specified repeat block's data source to a jagged array (array-of-arrays) of objects. </summary>
        <param name="jaggedArray">An jagged array of objects to use as a data source.  the first dimension corresponds to row and the second to column (that is, Object[row][column]). WordWriter will insert these values in the repeat block's merge fields.</param>
        <param name="columnNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty data source to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.<br/>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(Object()(),+String(),+String)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A 2-D jagged array of values
          string[][] ValuesArr = new string[][] {
               new string[] {"Boston", "MA"},
               new string[] {"Miami", "FL"},
               new string[] {"Merchantville", "NJ"}
               };

          //--- Names array, elements correspond to merge field names
          string[] NamesArr = {"City", "State"};
          WordTemplate wt = new WordTemplate();
          wt.Open("template.doc");

          //--- Set the repeat block defined by the bookmark "Block"
          //--- The data source is the 2-D rectangular ValuesArr array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block");
          wt.Process();
          wt.Save("out.doc");
        </code>
            <br/>
            <code>

          '--- A 2-D jagged array of values
          Dim ValuesArr()() As String = { _
               New String() {"Boston", "MA"}, _
               New String(){"Miami", "FL"}, _
               New String() {"Merchantville", "NJ"} _
               }

          '--- Names array, elements correspond to merge field names
          Dim NamesArr As String() = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open("template.doc")

          '--- Set the repeat block defined by the bookmark "Block"
          '--- The data source is the 2-D rectangular ValuesArr array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block")
          wt.Process()
          wt.Save("out.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Object[][],System.String[],System.String,System.Int32,System.Boolean)">
            <Doc>
        <summary>Sets the specified repeat block's data source to a jagged array (array-of-arrays) of objects. </summary>
        <param name="jaggedArray">An jagged array of objects to use as a data source.  the first dimension corresponds to row and the second to column (that is, Object[row][column]). WordWriter will insert these values in the repeat block's merge fields.</param>
        <param name="columnNames">A string array of data source field names. These must be the same as the corresponding merge field names in the template.</param>
        <param name="bookmark">
          <para>The bookmark name of the template repeat block. The bookmark passed to <c>SetRepeatBlock</c> must exist in the template Word file. To see a list of template bookmark names: </para>
          <list type="number">
            <item>
              <description>Open the template in Microsoft Word.</description>
            </item>
            <item>
              <description>Open the <b>Edit</b> menu.</description>
            </item>
            <item>
              <description>Select <b>Go To...</b></description>
            </item>
            <item>
              <description>Select <b>Bookmark</b>.</description>
            </item>
            <item>
              <description>Under <b>Enter bookmark name</b>, open the drop-down list of bookmark names.</description>
            </item>
          </list>
        </param>
        <param name="maxRows">Specifies the maximum number of repetitions to write to the file. If Next fields are enabled (see <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields"/>), then the number of rows imported from the data source is <c>maxRows\*(numberOfNextFields\+1)</c>. If Next fields are not enabled the number of rows imported is equal to the number of repetitions written out. To write the maximum rows available, use the constant <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ALL_ROWS"/>.</param>
        <param name="transpose">If transpose is set to <c>true</c>, the array is treated as Object[column][row]. If transpose is set to <c>false</c>, the array is treated as Object[row][column].</param>
        <exception cref="T:System.ArgumentNullException">
          <c>SetRepeatBlock</c> will throw this exception if <c>null</c> (C#) or <c>Nothing</c> (VB.NET) is passed to the method.</exception>
        <exception cref="T:System.ArgumentException"/>
        <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">
          <para>
            <c>SetRepeatBlock</c> will throw this exception if the <c>bookmark</c> has been set to be  <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.BookmarksToRemove(System.String[])"/>.</para>
        </exception>
        <remarks>
          <para>A repeat block is a fragment in the template document that will be repeated for each row in a data source. In the template document, repeat blocks are defined by Word bookmarks that contain merge fields.</para>
          <para>You can call <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetRepeatBlock(System.Collections.ICollection,System.String)"/> several times for a single instance of <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/>. The repeat block specified by the parameter <c>bookmark</c> must exist in the template.</para>
          <para>If you pass an empty data source to <c>SetRepeatBlock</c> WordWriter will not include the specified repeat block in the generated Word file.</para>
          <para>Not all Word features can be included in a repeat block:</para>
          <para>To see a full chart of limitations, go to our online documentation:</para>
          <para>http://wiki.softartisans.com/display/WW8/WordTemplate.SetRepeatBlock(Object()(),+String(),+String,+Int32,+Boolean)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- A 2-D jagged array of values
          //--- This is a "transposed" array with columns in the first
          //--- dimension and rows in the second
          string[][] ValuesArr = new string[][] {
               new string[] {"Boston", "Miami", "Merchantville"},
               new string[] {"MA", "FL", "NJ"}
               };

          //--- Names array, elements correspond to merge field names
          string[] NamesArr = {"City", "State"};
          WordTemplate wt = new WordTemplate();
          wt.Open("template.doc");

          //--- Set the repeat block defined by the bookmark "Block"
          //--- The data source is the 2-D rectangular ValuesArr array
          //--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          //--- Transpose is true to handle the transposed array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block",
               WordTemplate.ALL_ROWS, true);
          wt.Process();
          wt.Save("out.doc");
        </code>
            <br/>
            <code>

          '--- A 2-D jagged array of values
          '--- This is a "transposed" array with columns in the first
          '--- dimension and rows in the second
          Dim ValuesArr()() As String = { _
               New String() {"Boston", "Miami", "Merchantville"}, _
               New String(){"MA", "FL", "NJ"} _
               }

          '--- Names array, elements correspond to merge field names
          Dim NamesArr As String() = {"City", "State"}
          Dim wt As New WordTemplate()
          wt.Open("template.doc")

          '--- Set the repeat block defined by the bookmark "Block"
          '--- The data source is the 2-D rectangular ValuesArr array
          '--- MaxRows is set to ALL_ROWS, which allows all rows to be imported
          '--- Transpose is true to handle the transposed array
          wt.SetRepeatBlock(ValuesArr, NamesArr, "Block", _
               WordTemplate.ALL_ROWS, True)
          wt.Process()
          wt.Save("out.doc")
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SetDocumentProperty(SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty,System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordTemplate&quot;]/Member[@signature=&quot;WordTemplate.SetDocumentProperty(DocumentProperties.BuiltInProperty, Object)&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.CultureInfo">
            <Doc>
        <summary>
          <para>The <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.CultureInfo"/> property allows you to override the server's default locale when generating a new Word file.  For example, to generate a US English document on a French operating system, you could use <c>CultureInfo</c> to set the Word file's <see cref="T:System.Globalization.CultureInfo"/> to US English.</para>
        </summary>
        <remarks>
          <para>Set <c>CultureInfo</c> to a <see cref="T:System.Globalization.CultureInfo"/> object. This object represents information about a culture including its alphabet, calendar, and date formats. When setting <c>CultureInfo</c>, import the <see cref="N:System.Globalization"/> namespace to the ASP.NET page, for example, to import the namespace to a code-behind page, use:<br/><code>using System.Globalization;</code><br/><code>
Imports System.Globalization</code></para>
          <para>
            <c>CultureInfo</c> must include both language and country (for example "fr-BE" for French-Belgium).</para>
          <para>See <see cref="T:System.Globalization.CultureInfo"/> for more information about the class, its members, and a list of CultureInfo codes.</para>
        </remarks>
        <example>
          <para>
            <code>
          using System.Globalization;
          ...
          string[] NamesArr = {"Name", "Company", "DateTime"};
          object[] ValuesArr = {Name, Company, DateTime.Now};
          ...
          WordTemplate WordTempl = new WordTemplate();

          //--- Create a new CultureInfo object and
          //--- set WordTemplate's CultureInfo property
          CultureInfo enUS = new CultureInfo("en-US");
          WordTempl.CultureInfo = enUS;
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"));
          WordTempl.SetDataSource(ValuesArr, NamesArr);
          WordTempl.Process();
          WordTempl.Save(Page.Response, "BasicGenerated.doc", false);
          ...
</code>
            <br/>
            <code>
          Imports System.Globalization
          ...
          Dim NamesArr As String() = {"Name", "Company", "DateTime"}
          Dim ValuesArr As Object() = {Name, Company, DateTime.Now}
          ...
          Dim WordTempl As New WordTemplate()

          '--- Create a new CultureInfo object and
          '--- set WordTemplate's CultureInfo property
          Dim enUS As New CultureInfo("en-US")
          WordTempl.CultureInfo = enUS
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"))
          WordTempl.SetDataSource(ValuesArr, NamesArr)
          WordTempl.Process()
          WordTempl.Save(Page.Response, "BasicGenerated.doc", False)
          ...
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Version">
            <Doc>
        <summary>
          <para>Returns the exact version of WordWriter.</para>
        </summary>
        <remarks>
          <para>The format of the version string returned is:<br/><code>

            SoftArtisans.ProductName Major.Minor.Patch.Build
            (mmddyyyy-hhmmss-buildMachineId)
          </code></para>
          <list type="table">
            <listHeader>
              <term>Place Holder </term>
              <description>Description </description>
            </listHeader>
            <item>
              <term>ProductName </term>
              <description>A product name like "SoftArtisans.WordWriter." Note: the product name may be different depending on what license key is in effect. </description>
            </item>
            <item>
              <term>Major </term>
              <description>Major release number. </description>
            </item>
            <item>
              <term>Minor </term>
              <description>Minor release number. </description>
            </item>
            <item>
              <term>Patch </term>
              <description>Patch or bug fix number. </description>
            </item>
            <item>
              <term>Build </term>
              <description>Build number. </description>
            </item>
            <item>
              <term>mmddyyyy </term>
              <description>Date the build was compiled. </description>
            </item>
            <item>
              <term>hhmmss </term>
              <description>Time the build was compiled. </description>
            </item>
            <item>
              <term>buildMachineId </term>
              <description>Unique computer ID for the computer on which this product was compiled. </description>
            </item>
          </list>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          string Version = WordTempl.Version;
          string[] NamesArr = {"WordWriterVersion", "DateTime"};
          object[] ValuesArr = {Version, DateTime.Now};
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"));
          WordTempl.SetDataSource(ValuesArr, NamesArr);
          WordTempl.Process();
          WordTempl.Save(Page.Response, "BasicGenerated.doc", false);
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          Dim Version As String = WordTempl.Version
          Dim NamesArr As String() = {"WordWriterVersion", "DateTime"}
          Dim ValuesArr As Object() = {Version, DateTime.Now}
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"))
          WordTempl.SetDataSource(ValuesArr, NamesArr)
          WordTempl.Process()
          WordTempl.Save(Page.Response, "BasicGenerated.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.LicenseKey">
            <Doc>
        <summary>
          <para>Sets or returns the registered 23-character license key that enables WordWriter.</para>
        </summary>
        <remarks>
          <para>The key contains information about WordWriter, including product name, platform, and version. Only the 23-character key is stored in the registry. To determine which licensed version is currently installed on the server, run LicenseManager.exe (in OfficeWriter\WordWriter) and enter the license key retrieved by the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.LicenseKey"/> property.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"));
          string key = WordTempl.LicenseKey;
          string[] NamesArr = {"LicenseKey", "DateTime"};
          object[] ValuesArr = {key, DateTime.Now};
          WordTempl.SetDataSource(ValuesArr, NamesArr);
          WordTempl.Process();
          WordTempl.Save(Page.Response, "BasicGenerated.doc", false);
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"))
          Dim key As String = WordTempl.LicenseKey
          Dim NamesArr As String() = {"LicenseKey", "DateTime"}
          Dim ValuesArr As Object() = {key, DateTime.Now}
          WordTempl.SetDataSource(ValuesArr, NamesArr)
          WordTempl.Process()
          WordTempl.Save(Page.Response, "BasicGenerated.doc", False)
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.SaveExtension">
            <Doc>
        <summary>
          <para>The extension that should be used when saving this template; based on the input file.</para>
        </summary>
        <remarks>
          <para>The extension does not include the dot, such as "docx" or "dotm". Until a file is opened this will be null.</para>
        </remarks>
        <example>
          <para>
            <code>
wordTemplate.Save("output." + wordTemplate.SaveExtension);
</code>
            <br/>
            <code>
wordTemplate.Save("output." &amp; wordTemplate.SaveExtension);
</code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.ContentType">
            <Doc>
        <summary>Sets or returns the content-type header that will be sent to the browser with the generated Word document.</summary>
        <remarks>
          <para>ContentType must not be used before <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/> is called, as the content-type of the file cannot be known until after the file is opened.  Getting or setting ContentType before calling Open will throw an exception.</para>
        </remarks>
        <example>
          <para>
            <code>

          ...
          WordTemplate WordTempl = new WordTemplate();
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"));
          WordTempl.SetDataSource(MyDataTable);

          //--- Set the ContentType
          //--- ContentType is application/vns.ms-word by default for
          //--- .doc files, while the default ContentType for
          //--- .docx files is
          //--- application/vnd.openxmlformats-officedocument.wordprocessingml.document
          //--- and for .docm files is
          //--- application/vnd.ms-word.document.macroEnabled.12
          WordTempl.ContentType = "application/unknown";
          WordTempl.Process();
          WordTempl.Save(Page.Response, "BasicGenerated.doc", false);
          ...
        </code>
            <br/>
            <code>

          ...
          Dim WordTempl As New WordTemplate()
          WordTempl.Open(Page.MapPath("./BasicTemplate.doc"))
          WordTempl.SetDataSource(MyDataTable)

          '--- Set the ContentType
          '--- ContentType is application/vns.ms-word by default for
          '--- .doc files, while the default ContentType for
          '--- .docx files is
          '--- application/vnd.openxmlformats-officedocument.wordprocessingml.document
          '--- and for .docm files is
          '--- application/vnd.ms-word.document.macroEnabled.12
          WordTempl.ContentType = "application/unknown"
          WordTempl.Process()
          WordTempl.Save(Page.Response, "BasicGenerated.doc", False)
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Bookmarks">
            <Doc>
        <summary>
          <para>Returns the names of all bookmarks in a WordWriter template.</para>
        </summary>
        <remarks>
          <para>Bookmarks are used to define repeat blocks.   A repeat block is a fragment in the template document that contains merge fields and that will be repeated for each row in a data source.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create the WordTemplate object.
          WordTemplate oWW = new WordTemplate();

          //--- Open a template using a string.
          oWW.Open("C:\template.doc");

          //--- Get all the bookmark names in the document.
          String[] allBookmarks = oWW.Bookmarks;
        </code>
            <br/>
            <code>

          '--- Create the WordTemplate object.
          Dim oWW As New WordTemplate()

          '--- Open a template using a string.
          oWW.Open("C:\template.doc")

          '--- Get all the bookmark names in the document.
          Dim allBookmarks As String() = oWW.Bookmarks
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.DataSourceSeparator">
            <Doc>
        <summary>Use <see cref="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.DataSourceSeparator"/> to set the character that separates a data source name from a column name in a data marker. '.' is the default data source separator.</summary>
        <remarks>
          <para>The <c>DataSourceSeparator</c> property must be set <b>before</b> <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/> is called because the merge field collection is parsed when the document is opened.</para>
          <para>The following characters cannot be used as data source separators: <code>
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_@$#()[],</code><br/>The space character cannot be used as a data source separator.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate oWW = new WordTemplate();
          oWW.DataSourceSeparator = "-";
          oWW.Open("Template.doc");
          ...
        </code>
            <br/>
            <code>

          Dim oWW As New WordTemplate()
          oWW.DataSourceSeparator = "-"
          oWW.Open("Template.doc")
          ...
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.FieldMarkers">
            <Doc>
        <summary>Returns the names of all merge fields in the main document.</summary>
        <remarks>
          <para>The main document is any part of the template that is not within a repeat block. (A repeat block is a fragment in the template document - defined by a Word bookmark - that contains merge fields and that will be repeated for each row in a data source.)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Create the WordTemplate object.
          WordTemplate oWW = new WordTemplate();

          //--- Open a template using a string.
          oWW.Open(@"C:\template.doc");

          //--- Get all the merge fields in the document.
          String[] allMergefields = oWW.FieldMarkers;
        </code>
            <br/>
            <code>

          '--- Create the WordTemplate object.
          Dim oWW As New WordTemplate()

          '--- Open a template using a string.
          oWW.Open("C:\template.doc")

          '--- Get all the merge fields in the document.
          Dim allMergefields As String() = oWW.FieldMarkers
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.EnableNEXTFields">
            <Doc>
        <summary>Gets or sets whether NEXT fields should be enabled in the WordTemplate. If NEXT fields are enabled, the data source will move to the next row of data when merge field is repeated in the template file.</summary>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.EnableNEXTFields = true;
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.EnableNEXTFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.PreserveFields">
            <Doc>
        <summary>Gets or sets whether merge fields and next fields should be preserved after processing the WordTemplate. </summary>
        <remarks>
          <para>If set to <c>true</c>, all merge fields and next fields on the template will be preserved by the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object after processing and will be available for future use. If set to <c>false</c>, the merge fields and next fields will be replaced with data during processing and will not be available for future use.  PreserveFields must be set before calling <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.PreserveFields = true;
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.PreserveFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.UpdateIfFields">
            <Doc>
        <summary>Gets or sets whether IF fields should be evaluated server-side in the WordTemplate. </summary>
        <remarks>
          <para>If set to <c>true</c>, all IF fields on the template will be evaluated on the server side by the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object.  If set to <c>false</c>, the IF fields will not be evaluated without user action.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.UpdateIfFields = true;
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.UpdateIfFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.UnlinkIfFields">
            <Doc>
        <summary>Gets or sets whether IF fields should be evaluated server-side in the WordTemplate. </summary>
        <remarks>
          <para>If set to <c>true</c>, all IF fields on the template will be evaluated on the server side by the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object.  If set to <c>false</c>, the IF fields will not be evaluated without user action.</para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.UpdateIfFields = true;
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.UpdateIfFields = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.LineBreaksToParagraphs">
            <Doc>
        <summary>Gets or sets whether line breaks in data will result in a new paragraph after processing the WordTemplate. &amp;nbsp;This property only has an affect on OOXML Word documents (.docx, .dotx, etc).</summary>
        <remarks>
          <para>If set to <c>true</c>, new lines in data will be treated as new paragraphs by the <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordTemplate"/> object when inserting into the document. If set to <c>false</c>, new lines in data will be inserted as soft-breaks in Word. Â LineBreaksToParagraphs must be set before calling <see cref="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplate.Open(System.String)"/></para>
        </remarks>
        <example>
          <para>
            <code>

          WordTemplate WordTempl = new WordTemplate();
          WordTempl.LineBreaksToParagraphs = true;
        </code>
            <br/>
            <code>

          Dim WordTempl As New WordTemplate()
          WordTempl.LineBreaksToParagraphs = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordTemplateDocumentPropertiesBag.SetDocumentProperty(SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty,System.Object)">
            <summary>
            This method sets or adds the document property. Any exsiting properties will be overwritten
            </summary>
            <param name="property">Property Name</param>
            <param name="value">Property Value</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateReader">
            <summary>
            The reader used for reading in xml from word files.
            </summary>
            <remarks>
            <para>
            The main reason for this class, is so that it's easy for the reader used by the actual
            template and that used by any unit tests is the same (plus, we don't have to redo
            settings every place an xml file is opened)</para>
            <para>The reason <see cref="T:System.Xml.XmlTextReader"/> is used directly rather than using 
            <see cref="M:System.Xml.XmlReader.Create(System.IO.Stream)"/>, is because if you want to write a fragment during
            tests, it would force the namespaces to be in all the unit test xml, and, since there's
            no clear advantage to using the Create method, This just uses the text reader directly
            </para>
            </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateReader.Create(System.IO.Stream)">
            <summary>
            Creates an XmlReader for reading in a document part from word file.
            </summary>
            <param name="xml">A stream containing an xml word part. This must be complete elements,
            although more than one root element is allowed</param>
            <returns>An xml reader processing the given stream</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateReader.Create(System.String)">
            <summary>
            Creates an XmlReader prime for testing
            </summary>
            <param name="xml">A piece of xml. This must be complete elements, although more than one
            root element is allowed</param>
            <returns>An xml reader processing the given xml</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateWriter">
            <summary>
            The writer used for writing out word template xml.
            </summary>
            <remarks>
            <para>
            The main reason for this class, is so that it's easy for the writer used by the actual
            template and that used by any unit tests is the same (plus, we don't have to redo
            settings every place an xml file is opened)</para>
            <para>The reason <see cref="T:System.Xml.XmlTextWriter"/> is used directly rather than using 
            <see cref="M:System.Xml.XmlWriter.Create(System.IO.Stream)"/>, is because if you want to write a fragment during
            tests, it would force the namespaces to be written out in all the unit test xml, and,
            since there's no clear advantage to using the Create method, This just uses the text
            writer directly
            </para></remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateWriter.Create(System.IO.Stream)">
            <summary>
            Returns a writer that writes to the given stream.
            </summary>
            <param name="outputStream">A stream to which xml will be written</param>
            <returns>A writer for writing xml to the given stream</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateWriter.Create(System.Text.StringBuilder)">
            <summary>
            Returns a writer that writes to the given string builder. This will not encode unicode. 
            </summary>
            <param name="sb">A string builder to which xml will be written</param>
            <returns>A writer for writing xml to the given string builder</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WordTemplateWriter.FilterOneDepth(System.Xml.XmlReader,System.Xml.XmlWriter,System.String[])">
            <summary>
            Writes the node currently positioned under the reader to the writer except the immediate
            children with one of the specified names.
            </summary>
            <remarks>Descendants that are not immediate children will be copied, so if you have 
            <code>
            &lt;x&gt;
              &lt;y&gt;
                &lt;z /&gt;
              &lt;/y&gt;
            &lt;/x&gt;
            </code> and run this method with z in the names, you will get the same output, as if z
            was not in the list of names. This utilizes <see cref="P:System.Xml.XmlReader.Name"/>, so care should
            be taken with the empty string and anything that may fall into the various node types.
            Attributes will never be filtered.</remarks>
            <param name="reader">The source xml. After this method is called, this will point to the
            end tag of the node that it was pointing to originally.</param>
            <param name="writer">The destination xml</param>
            <param name="names">Any node (and it's children) whose name is in this list, will be
            excluded from writing</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings">
            <Doc>
      <summary>
        <para>This class is used manipulate the View settings for a document.</para>
      </summary>
      <remarks>
        <para>You cannot create a new <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings"/> object. You must use the <see cref="P:SoftArtisans.OfficeWriter.WordWriter.Document.ViewSettings"/> property to retrieve WordViewSettings properties for a document.</para>
        <para>The following sample gets the <c>WordViewSettings</c> object of a document.</para>
      </remarks>
      <example>
        <para>
          <code>

          WordApplication app = new WordApplication();
          Document doc = app.Open(@"C:\sample.doc");
          WordViewSettings viewSettings = doc.ViewSettings;
        </code>
          <br/>
          <code>

          Dim app As New WordApplication()
          Dim doc As Document = app.Open("C:\sample.doc")
          Dim viewSettings As WordViewSettings = doc.ViewSettings
        </code>
        </para>
      </example>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.DisplayHidden">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will display hidden contents in a document. When set to true, Word displays text formatted as hidden with a dotted underline. When you print hidden text, the dotted underline does not appear.</para>
        </summary>
        <example>
          <para>
            <code>

          //--- Return DisplayHidden
          bool displayHidden = viewSettings.DisplayHidden;

          //--- Set DisplayHidden
          viewSettings.DisplayHidden = true;
        </code>
            <br/>
            <code>

          '--- Return DisplayHidden
          Dim displayHidden As Boolean = viewSettings.DisplayHidden

          '--- Set DisplayHidden
          viewSettings.DisplayHidden = True
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.DisplayFieldResults">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether Word will display field results (true) or just the field text itself (false) in a document. For example, when set to true you will see the full contents of a mergefield instead of just the text value inside it.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; View tab &gt; Show section &gt; Field codes</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DisplayFieldResults
          bool displayFieldResults = oWordViewettings.DisplayFieldResults;

          //--- Set DisplayFieldResults
          viewSettings.DisplayFieldResults = false;
        </code>
            <br/>
            <code>

          '--- Return DisplayFieldResults
          Dim displayFieldResults As Boolean = viewSettings.DisplayFieldResults

          '--- Set DisplayFieldResults
          viewSettings.DisplayFieldResults = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ShadeFormFields">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will shade form fields in a document.</para>
        </summary>
        <remarks>
          <para>This option is set to true by default.</para>
          <para>MS Word equivalent: Tools menu &gt; Options... &gt; View tab &gt; Show section &gt; Field shading</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ShadeFormFields
          bool shadeFormFields = viewSettings.ShadeFormFields;

          //--- Set ShadeFormFields
          viewSettings.ShadeFormFields = false;
        </code>
            <br/>
            <code>

          '--- Return ShadeFormFields
          Dim shadeFormFields As Boolean = viewSettings.ShadeFormFields

          '--- Set ShadeFormFields
          viewSettings.ShadeFormFields = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.DocumentView">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType"/> object that represents the type of view this document will be displayed in when opened by Word. Possible values: Normal, Outline, Page.</para>
        </summary>
        <remarks>
          <para>This option is set to http://wiki.softartisans.com/display/WW8/WordViewSettings.ViewType#Page by default.</para>
          <para>MS Word equivalent: View menu &gt; (Top section)</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DocumentView
          WordViewSettings.ViewType oViewType = viewSettings.DocumentView;

          //--- Set DocumentView
          viewSettings.DocumentView = WordViewSettings.ViewType.Outline;
        </code>
            <br/>
            <code>

          '--- Return DocumentView
          Dim oViewType As WordViewSettings.ViewType = viewSettings.DocumentView

          '--- Set ShadeFormFields
          viewSettings.DocumentView = WordViewSettings.ViewType.Outline
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomPercentage">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> that represents the zoom percentage this document will be displayed with when opened by Word. Possible values: Normal, Outline, Page.</para>
        </summary>
        <remarks>
          <para>This option is set to <c>100</c> % by default.</para>
          <para>MS Word equivalent: View menu &gt; Zoom... &gt; Zoom to section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return ZoomPercentage
          int zoomPercentage = viewSettings.ZoomPercentage;

          //--- Set ZoomPercentage
          viewSettings.ZoomPercentage = 50;
        </code>
            <br/>
            <code>

          '--- Return ZoomPercentage
          Dim zoomPercentage As Integer = viewSettings.ZoomPercentage

          '--- Set ZoomPercentage
          viewSettings.ZoomPercentage = 50
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.Zoom">
            <Doc>
        <summary>
          <para>Sets or returns a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType"/> object that represents the zoom type the document will be displayed with when opened by Word. Possible values: None, FullPage, PageWidth).</para>
        </summary>
        <remarks>
          <para>This option is set to http://wiki.softartisans.com/display/WW8/WordViewSettings.ZoomType#None by default.</para>
          <para>MS Word equivalent: View menu &gt; Zoom... &gt; Zoom to section</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DisplayOutlineLevels
          int displayOutlineLevels = viewSettings.DisplayOutlineLevels;

          //--- Set ZoomType
          viewSettings.DisplayOutlineLevels = 4;
        </code>
            <br/>
            <code>

          '--- Return DisplayOutlineLevels
          Dim displayOutlineLevels As Integer = viewSettings.DisplayOutlineLevels

          '--- Set DisplayOutlineLevels
          viewSettings.DisplayOutlineLevels = 4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.DisplayedOutlineLevels">
            <Doc>
        <summary>
          <para>Sets or returns an <c>int</c> object that represents the number of heading levels that will be displayed by Word in the outline view for this document. This can be set to a number between 1 and 9.</para>
        </summary>
        <remarks>
          <para>This option is set to <c>9</c> (all levels) by default.</para>
          <para>MS Word equivalent: Outlining toolbar &gt; Show Level</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return DisplayOutlineLevels
          int displayOutlineLevels = viewSettings.DisplayOutlineLevels;

          //--- Set ZoomType
          viewSettings.DisplayOutlineLevels = 4;
        </code>
            <br/>
            <code>

          '--- Return DisplayOutlineLevels
          Dim displayOutlineLevels As Integer = viewSettings.DisplayOutlineLevels

          '--- Set DisplayOutlineLevels
          viewSettings.DisplayOutlineLevels = 4
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.IncludeHeaderInBorder">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will display the header inside the page border for a document.</para>
        </summary>
        <remarks>
          <para>This option is set to <c>true</c> by default.</para>
          <para>MS Word equivalent: Format menu &gt; Border and Shading... &gt; Page Border tab &gt; Options... button &gt; Options section &gt; Surround header</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return IncludeHeaderInBorder
          bool includeHeader = viewSettings.IncludeHeaderInBorder;

          //--- Set IncludeHeaderInBorder
          viewSettings.IncludeHeaderInBorder = false;
        </code>
            <br/>
            <code>

          '--- Return IncludeHeaderInBorder
          Dim includeHeader As Boolean = viewSettings.IncludeHeaderInBorder

          '--- Set IncludeHeaderInBorder
          viewSettings.IncludeHeaderInBorder = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.IncludeFooterInBorder">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will display the footer inside the page border for a document.</para>
        </summary>
        <remarks>
          <para>This option is set to <c>true</c> by default.</para>
          <para>MS Word equivalent: Format menu &gt; Border and Shading... &gt; Page Border tab &gt; Options... button &gt; Options section &gt; Surround footer</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return IncludeHeaderInBorder
          bool includeHeader = viewSettings.IncludeHeaderInBorder;

          //--- Set IncludeHeaderInBorder
          viewSettings.IncludeHeaderInBorder = false;
        </code>
            <br/>
            <code>

          '--- Return IncludeHeaderInBorder
          Dim includeHeader As Boolean = viewSettings.IncludeHeaderInBorder

          '--- Set IncludeHeaderInBorder
          viewSettings.IncludeHeaderInBorder = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.EnvelopeVisible">
            <Doc>
        <summary>
          <para>Sets or returns a <c>boolean</c> that represents whether or not Word will display an envelope overlay with this document (if there is one).</para>
        </summary>
        <remarks>
          <para>This option is set to <c>false</c> by default.</para>
        </remarks>
        <example>
          <para>
            <code>

          //--- Return IncludeFooterInBorder
          bool includeFooter = viewSettings.IncludeFooterInBorder;

          //--- Set IncludeFooterInBorder
          viewSettings.IncludeFooterInBorder = false;
        </code>
            <br/>
            <code>

          '--- Return IncludeFooterInBorder
          Dim includeFooter As Boolean = viewSettings.IncludeFooterInBorder

          '--- Set IncludeFooterInBorder
          viewSettings.IncludeFooterInBorder = False
        </code>
          </para>
        </example>
      </Doc>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType">
            <Doc>
        <summary>
          <para>View types (modes) in Word for a document.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.Normal">
            <Doc>
          <summary>Document opens in default viewing settings</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.Outline">
            <Doc>
          <summary>Document opens in Outline view</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.Page">
            <Doc>
          <summary>Document opens in Page view</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ViewType&quot;]/Member[@signature=&quot;WordViewSettings.ViewType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ViewType&quot;]/Member[@signature=&quot;WordViewSettings.ViewType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ViewType&quot;]/Member[@signature=&quot;WordViewSettings.ViewType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ViewType&quot;]/Member[@signature=&quot;WordViewSettings.ViewType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ViewType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ViewType&quot;]/Member[@signature=&quot;WordViewSettings.ViewType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType">
            <Doc>
        <summary>
          <para>Zoom types (modes) in Word for a document.</para>
        </summary>
      </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.FullPage">
            <Doc>
          <summary>Document opens zoomed out so that the full page is visible</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.None">
            <Doc>
          <summary>Document opens to default zoom level</summary>
        </Doc>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.PageWidth">
            <Doc>
          <summary>Document opens zoomed in so that the page width matches the window width</summary>
        </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.ToString">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType.ToString()&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.findByValue(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType.findByValue(Int32)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.Equals(System.Object)">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType.Equals(Object)&quot;]/Doc"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.GetHashCode">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType.GetHashCode()&quot;]/Doc"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordViewSettings.ZoomType.Value">
            <!-- No matching elements were found for the following include tag --><include file="WordWriter.api.xml" path="API/Member[@signature=&quot;WordViewSettings&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType&quot;]/Member[@signature=&quot;WordViewSettings.ZoomType.Value&quot;]/Doc"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordWriterException">
            <Doc>
      <summary>
        <para>WordWriterException is thrown by the Element.Search() and Element.SearchAndReplace() methods.</para>
      </summary>
    </Doc>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordWriterException.#ctor(System.Exception)">
            <param name="cause">The exception that caused this exception.
             This will be appended to this exceptions stack trace
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag">
            <summary> Summary description for WordWriterPropertyBag.</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag.setLicenseKey(System.String)">
            <summary> Attempt to set a license key, and optionally the current date. Format
            is: XXXXXX-XXXX-XXXX-XXXXXX or: XXXXXX-XXXX-XXXX-XXXXXX DD MM YYYY
            
            </summary>
            <throws>  SAException </throws>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag.UpdateIfFields">
            <summary>Sets the processor to update the if fields during process()</summary>
            
            @param newValue
                       if <code>true</code>, process() will update the cached text
                       for all the if fields in the file, otherwise they will be
                       ignored.
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WriteChpxFkpEnumerator">
            <summary>
            Enumerates over a list of character format entries returning a formatted disk page 
            as they are filled.
            </summary>
            <remarks>In the word file Character format entries (CHPXs) are stored in formatted
            disk pages (FKPs) that are 512 bytes long. This goes through the list of CHPXs and 
            produces a list of FKPs that contain them. These pages are described on page 167 of the
            2007 documentation and in section 2.9.33 of the 2008 documentation.</remarks>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1">
            <summary>
            Iterates over a list of property nodes and creates FKPs from them. 
            </summary>
            <remarks>Each instance of next() will return a byte[512] containing a Formatted Disk Page
            describing the formatting (i.e. containing the property nodes).
            </remarks>
            <typeparam name="T">The type of property node that is written to the file.</typeparam>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.minimizeFileSize">
            <summary>
            If this is true, use a hash map to try and avoid rewriting grpprls,
            otherwise just compare with the last one.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.unwrittenFc">
            <summary>
            The FC that the last grpprl should point to.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.unwrittenGrpprl">
            <summary>
            This is the last grpprl that was prepared, but was not written.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.MoveNext">
            <summary>
            Returns the next FKP as a 512 byte byte array.
            </summary>
            <returns> the next fkp to be built out of the provided property nodes.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.Reset">
            <summary>
            Resets this enumerator to the beginning of the property nodes.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.WriteGrpprl(System.Byte[],System.Int32)">
            <summary>
            Writes a grpprl to the current fkp at the given offset.
            </summary>
            <param name="grpprl">the grpprl to be written</param>
            <param name="offset"> the offset at which to write the grpprl</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.CurrentStartFc">
            <summary>
            The starting file position of first entry in the current fkp.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.CurrentEndFc">
            <summary>
            The ending file position of last entry in the current fkp.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.Current">
            <summary>
            A 512 Byte array that has as many property nodes, after the last one in the last fkp,
            as can fit.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.GrpprlComparer">
            <summary>
            A simple class for putting Grpprls in Dictionaries.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.GrpprlComparer.Equals(System.Byte[],System.Byte[])">
            <summary>
            Returns whether the two grpprls are equal.
            </summary>
            <param name="x">the first grpprl to compare</param>
            <param name="y">the second grpprl to compare</param>
            <returns><code>true</code> if the two parameters are the same length and have 
            the same bytes at the same indices.</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.GrpprlComparer.GetHashCode(System.Byte[])">
            <summary>
            Returns the hash code for the given grpprl in the same manner as List in Java 1.5.
            </summary>
            <param name="grpprl">the grpprl to hash</param>
            <returns>a hash of the given grpprl</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.OffsetFinder.#ctor(System.Boolean)">
            <summary>
            Creates a new offset finder.
            </summary>
            <remarks>Two FKPs should not use the same offset finder for the </remarks>
            <param name="minimizeFileSize">whether or not to do extra work in order to 
            allow more grpprls to get same offset (still valid word files).</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.OffsetFinder.put(System.Byte[],System.Int32)">
            <summary>
            Adds a grpprl that was written to the fkp (or elsewhere) so that you can get its
            offset later.
            </summary>
            <param name="grpprl">the grpprl to save</param>
            <param name="offset">the offset that the grpprl was written at</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.OffsetFinder.get(System.Byte[])">
            <summary>
            Gets the offset that points to an already written grpprl, identical to the one 
            provided.
            </summary>
            <param name="grpprl">the grpprl to search for</param>
            <returns>the offset pointing to grpprl or -1 if the grpprl has not been written
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteChpxFkpEnumerator.#ctor(SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter,System.Collections.Generic.List{SoftArtisans.OfficeWriter.WordWriter.CHPX},System.Boolean)">
            <summary>
            The only constructor
            </summary>
            <param name="cpToFcConverter">the converter for getting the file positions 
            corresponding to various character positions</param>
            <param name="propertyNodes">A list of CHPXs to write to the FKPs produced by this 
            writer</param>
            <param name="minimizeFileSize">whether to do computationally intensive operations to 
            maximize the number of character format entries in each fkp</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteChpxFkpEnumerator.MoveNext">
            <summary>
            Creates the next FKP out of the CHPXs of this writer
            </summary>
            <returns><code>false</code> if there are no CHPXs left to write, <code>true</code> 
            otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WriteChpxFkpEnumerator.WriteGrpprl(System.Byte[],System.Int32)">
            <summary>
            Writes a grpprl to the current fkp at the given offset.
            </summary>
            <param name="grpprl">the grpprl to be written</param>
            <param name="offset">the offset at which to write the grpprl</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.WriteDelegateOnce">
            <summary>
            A simple block for inserting some piece of xml into the output.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.WriteEventListener">
            <summary> Summary description for WriteEventListener.</summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator">
            <summary>
            Enumerates over a list of paragraph format entries returning a formatted disk page 
            as they are filled.
            </summary>
            <remarks>In the word file paragraph format entries (PAPXs) are stored in formatted
            disk pages (FKPs) that are 512 bytes long. This goes through the list of PAPXs and 
            produces a list of FKPs that contain them. These pages are described on page 168 of the
            2007 documentation and in section 2.9.171 of the 2008 documentation.
            
            If this encounters PAPXs that are too big for an FKP or table formatting it writes them 
            to the provided data stream.</remarks>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.bxSize">
            <summary>
            The size of a bx which is the index of the grpprl (1 byte) and a paragraph height 
            element (12 bytes)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.pheSize">
            <summary>
            The size of a paragraph height element (PHE)
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.unwrittenPhe">
            <summary>
            The last Paragraph Height Element (PHE) that was grabbed for writing, but was not 
            written like <see cref="F:SoftArtisans.OfficeWriter.WordWriter.WriteFkpEnumerator`1.unwrittenGrpprl"/>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.#ctor(SoftArtisans.OfficeWriter.WordWriter.CpToFcConverter,System.Collections.Generic.List{SoftArtisans.OfficeWriter.WordWriter.PAPX},SoftArtisans.OfficeWriter.WordWriter.WWOutputStream,System.Boolean)">
            <summary>
            Creates a new instance for building the fkps for a list of papxs.
            </summary>
            <param name="cpToFcConverter">the converter for getting the file positions 
            corresponding to various character positions</param>
            <param name="propertyNodes">the PAPXs to fill all of the created pages</param>
            <param name="dataStream">the data stream of the document. This writer writes out 
            table grpprls and really large grpprls to this data stream</param>
            <param name="minimizeFileSize">whether to do computationally intensive operations to 
            maximize tho number of format entries that fit in each FKP</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.WriteTableGrpprl(System.Byte[],System.Byte[])">
            <summary>
            Writes the table grpprl to the data stream and updates the grpprl appropriately.
            </summary>
            <param name="grpprl">the actual grpprl for the papx</param>
            <param name="tableGrpprl">the grpprl for the table</param>
            <returns>the grpprl updated so that it references the table grpprl in the data stream.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.WriteHugeGrpprl(System.Byte[])">
            <summary>
            Writes out a huge grpprl to the data stream and updates the grpprl so that it points
            to the offset within the data stream
            </summary>
            <param name="grpprl">the grpprl for a papx</param>
            <returns>the updated grpprl so that it references the huge grpprl in the data stream
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WritePapxFkpEnumerator.WriteGrpprl(System.Byte[],System.Int32)">
            <summary>
            Writes a grpprl to the current fkp at the given offset
            </summary>
            <param name="grpprl">the grpprl to be written</param>
            <param name="offset">the offset at which to write the grpprl</param>
        </member>
        <member name="M:WritingMarkerData.GetColumnName">
            <summary>
            This will only be called if we have the fieldName modifier, in which case, we set the
            value of the <see cref="T:SoftArtisans.OfficeWriter.Shared.MarkerData"/> to be the fieldname, so we can just call 
            <see cref="M:WritingMarkerData.GetString"/> here.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WWDocument">
            <summary> 
            This class acts as the bucket that we throw all of the Word data structures
            into.
            
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument._dataStream">
            <summary>data stream buffer </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument._mainStream">
            <summary>main document stream buffer </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument._tableStream">
            <summary>table stream buffer </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.authorsTable">
            <summary>Holds author names for this document </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.characterFormattingBinTable">
            <summary>Contains formatting properties for text </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.complexFileTable">
            <summary> Contains text of the document wrapped in a obfuscated Word data structure</summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.documentProperties">
            <summary>Document wide Properties </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.fileInformationBlock">
            <summary>The FIB </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.fontTable">
            <summary>Holds fonts for this document. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.inlineImageStorage">
            <summary>Stores images that are written to the data stream </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.listTables">
            <summary>Hold list tables </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.paragraphFormattingBinTable">
            <summary>Contains formatting properties for paragraphs </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.sectionTable">
            <summary>Contains formatting properties for sections. </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.WWDocument.styleSheet">
            <summary>Holds styles for this document. </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.#ctor(System.IO.Stream)">
            <summary> This constructor loads a Word document from an InputStream.
            
            </summary>
            <param name="istream">The InputStream that contains the Word document.
            </param>
            <throws>  IOException </throws>
            <summary>           If there is an unexpected IOException from the passed in
            InputStream.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.textInserted(System.Int32,System.Int32,System.Boolean,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.textDeleted(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.paragraphInserted(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.sectionInserted(System.Int32,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.loadOleStreams(System.IO.Stream)">
            <method.excluded>  </method.excluded>
            <param name="istream">
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.characterLength">
            <summary> Returns the character length of a document's body.
            
            </summary>
            <returns>
            
            </returns>
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.write(System.IO.Stream,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Writes out the word file that is represented by an instance of this class.
            </summary>
            <param name="outRenamed">the output stream to write to</param>
            <param name="preserve">whether or not to perform computationally intense operations to 
            help minimize the file size</param>
            <param name="minimizeFileSize">if <code>true</code> all the text will be written in 
            unicode, othrewise they will all be written in cp1252</param>
            <param name="alwaysUseUnicode"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.handleTrailingParagraph">
            <summary> This is used for subdocuments. If a document contains subdocuments. The
            text is always followed by a carriage return that is not considered when
            calculating ccpText, ccpHdn, or any other ccp*. However, the carriage
            return is used when calculating section, paragraph and character run
            offsets.
            
            </summary>
            <method.excluded>  </method.excluded>
            <summary> 
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.getFields(System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.registerRange(SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.delete(System.Int32,System.Int32)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.pushbackText">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.pushbackParagraphs">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.pushbackSections">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.anythingInserted(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.anythingDeleted(System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.ElementModel)">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.initBookmarks">
            <method.excluded>  </method.excluded>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.cloneFSPANode(SoftArtisans.OfficeWriter.WordWriter.FSPANode,System.Int32,System.Int32)">
            <summary>Clone an FSPANode and return it with a new shape ID</summary>
            
            @param fspa
            @param shapeID
            @return
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.addDrawingObjectFromDocument(SoftArtisans.OfficeWriter.WordWriter.WWDocument,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources)">
            <summary>
            Find a FSPANode which matches the given character run. Then find the Shape record which matches
            the Shape ID. Then use the Blip ID from the shape record (technically the Opt record next to it)
            and use it as an offset - 1 into the dgginfo.blipStg. Take that blip, add it to the new document
            </summary>
            TODO: reduce redundancy between the branches
            <param name="document"></param>
            <param name="sourceCharacterRunStart"></param>
            <param name="offset"></param>
            <returns>an FSPANode whic is used to tell which images were added to the new document</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.addTextboxAndUpdateID(SoftArtisans.OfficeWriter.WordWriter.WWDocument,System.Int32,System.Int32,System.Int32,SoftArtisans.OfficeWriter.Shared.EscherContainerRecord,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources)">
            <summary>
            Add a textbox if necessary, and update the shape group to match the textbox id
            </summary>
            <param name="document"></param>
            <param name="sourceCharacterRunStart"></param>
            <param name="oldShapeID"></param>
            <param name="newShapeID"></param>
            <param name="newShapeGroup"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.initDggInfo">
            <summary>create _dggInfo if it doesn't exist</summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.addTextboxFromDocument(SoftArtisans.OfficeWriter.WordWriter.WWDocument,System.Int32,System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources)">
            <summary>
            See if any textbox in the inputed document matches the given shape ID, and if so, add it to the new
            document with a correct shape ID 
            </summary>
            TODO: rename the addTextbox... functions in this file and ElementModel.cs so they make sense
            <param name="document"></param>
            <param name="characterRunStart"></param>
            <param name="oldShapeId"></param>
            <param name="newShapeId"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.insertTextboxTextAtEnd(System.String,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.CharacterRunModel},System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.ParagraphModel},System.Int32,System.Int32,SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources)">
            <summary>
            TODO: rename this function to something less confusing. Also, this function has the same name
            as one from ElementModel (WWDocument's parent), but not the same arguments, so they're technically
            completely different
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.adjustNewlyInsertedFSPANodes(System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.FSPANode},System.Int32,System.Int32)">
            <summary>Some FSPANodes were adjusted mistakenly under the assumption that none of these images are part
            of the text being inserted. This adjusts them back.</summary>
            
            @param newFSPANodes is a list of the FSPANodes changed
            @param length is how much they were adjusted 
            
            TODO: find a more elegant way to fix this problem
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWDocument.Append(SoftArtisans.OfficeWriter.WordWriter.WWDocument)">
            <summary>
            This appends the other document onto the end of this document.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.StyleSheet">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.FileInformationBlock">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocProperties">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.HeaderFooterTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.ListTables">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.CharacterTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.HyperlinkStorage">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.ParagraphTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.SectionTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.TextTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.SubDocTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.TotalLength">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.DataStream">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.TableStream">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.ComplexFileTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.FontTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.AuthorsTable">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.TableCharacters">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.InlineStorage">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.PrintFacingPagesInternal">
            <method.excluded>  </method.excluded>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.WWDocument.Bookmarks">
            <method.excluded>  </method.excluded>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.WWDocument.DocumentCopyResources">
            <summary> This class contains resources from a document that are needed when copying content 
            from that document to this one. WW caches these because there could be more than one copy->paste
            operation coming from the same document.
            </summary>
            <author>  Ryan Ackley
            </author>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.WWOutputStream.WriteAt(System.Byte[],System.Int32)">
            <summary>
            Writes the specified bytes at the given location and returns to the end of the stream.
            </summary>
            <param name="buffer">the data to be written to the stream</param>
            <param name="offset">the index at which to write the data</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1">
            <summary>
            Covers a lot of the things shared between <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor"/> and 
            <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFormulaFieldProcessor"/>
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldProcessor">
            <summary>
            Base class for processing any type of field
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldProcessor.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding)">
             <summary>
             Writes out this field to the writer
             </summary>
             <remarks>At the start of this method call the writer should be pointed to a &lt;w:r&gt;
             element, or the end of the &lt;w:rPr&gt;. After this call the writer will have written
             out an open tag for &lt;w:r&gt;.See the following:
             <code>... Xml Contents ...<br />
            &lt;w:r&gt; &lt;- writer can be positioned just after writing this or<br />
              &lt;w:rPr&gt;<br />
                ... some properties ...<br />
              &lt;/w:rPr&gt; &lt;- if there are properties, here.<br />
              ... This write method ...<br />
              ... Depth may change, but it will return to the same depth ...<br />
            &lt;/w:r&gt; &lt;- After this write method; writer will be positioned right before here</code></remarks>
             <param name="writer"></param>
             <param name="binding"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldProcessor.Rewrite(System.Xml.XmlWriter)">
            <summary>
            Rewrites the results of this processor to the writer
            </summary>
            <param name="writer">The destination xml</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldProcessor.ReplacedWithBlockElement">
            <summary>
            Whether or not this wrote a paragraph or altChunk,
            meaning the tableCell does not need to write one out
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.SetDatePattern">
            <summary>
            Converts the date pattern in the field to one that we can use.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.Write(System.DateTime,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out a date to the document, properly formatted
            </summary>
            <param name="date">The date to be written</param>
            <param name="writer">The xml writer writing out the document</param>
            <param name="propertyBag">The options for this instance of word writer</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.Write(System.Double,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out a double to the document, properly formatted
            </summary>
            <param name="real">The number to be written</param>
            <param name="writer">The xml writer writing out the document</param>
            <param name="propertyBag">The options for this instance of word writer</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.Write(System.Int64,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out a big integer to the document, properly formatted
            </summary>
            <param name="integer">The number to be written</param>
            <param name="writer">The xml writer writing out the document</param>
            <param name="propertyBag">The options for this instance of word writer</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.Write(System.String,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
             <summary>
             Writes out any before text, the final string and any after text
             </summary>
             <remarks>At the start of this method call the writer should be pointed to a &lt;w:r&gt;
             element, or the end of the &lt;w:rPr&gt;. After this call the writer will have written
             out an open tag for &lt;w:r&gt;.See the following:
             <code>... Xml Contents ...<br />
            &lt;w:r&gt; &lt;- writer can be positioned just after writing this or<br />
              &lt;w:rPr&gt;<br />
                ... some properties ...<br />
              &lt;/w:rPr&gt; &lt;- if there are properties, here.<br />
              ... This write method ...<br />
              ... Depth may change, but it will return to the same depth ...<br />
            &lt;/w:r&gt; &lt;- After this write method; writer will be positioned right before here</code></remarks>
             <param name="resultString">The final text with any formatting from the name applied
             </param>
             <param name="writer">The xml writer to which the resulting text will be written</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBaseMergeFieldProcessor`1.GetData(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding)">
            <summary>
            Returns the binding for the current write call; will return null, if there was no
            binding, and that's ok, throws an appropriate exception otherwise.
            </summary>
            <remarks>If this is <c>null</c>, then the WriteData should exit cleanly, and nothing
            should be written. </remarks>
            <param name="binding"></param>
            <param name="optional"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBinaryDataStorage.#ctor(System.IO.Stream,System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId)">
            <summary>
            
            </summary>
            <param name="relationshipsInput">This stream should be the .rels file from the document,
            which relates to the document denoted by name</param>
            <param name="name">The name of the .rels entry. This should be the full name (e.g.
            word/_rels/document.xml.rels), and can be retrieved via <c>zipEntry.Name</c></param>
            <param name="maxImageId">A Max image file id from the zip file.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBinaryDataStorage.#ctor(System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MaxId)">
            <summary>
            Creates a new, empty image storage
            </summary>
            <param name="name">The name of the .rels entry. This should be the full name (e.g.
            word/_rels/document.xml.rels), and can be retrieved via <c>zipEntry.Name</c></param>
            <param name="maxImageId">A Max image file id from the zip file.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBinaryDataStorage.AddContentTypes(ICSharpCode.SharpZipLib.Zip.ZipFile,ICSharpCode.SharpZipLib.Zip.ZipOutputStream)">
            <summary>
            Adds the content types for all the image types we handle.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns>0</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock">
            <summary>
            Base class for blocks that repeat a section of xml, denoted in the file by a bookmark.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            </summary>
            <remarks>After this method is called, the goal for the reader will be the EndPath</remarks>
            <param name="reader"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.WriteZeroRepetitions(System.Xml.XmlWriter)">
            <summary>
            Called to handle the special case where there are 0 repetitions. 
            </summary>
            <remarks>At this point in <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/> where this is called, nothing has
            been written.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.WriteBeforeFirstRepetition(System.Xml.XmlWriter)">
            <summary>
            Called before the first repetition, but only if there is at least one repetition.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.Grouping">
            <summary>
            Whether this is a Grouping repeat block, or a regular old-fashioned repeat block.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.EndPath">
            <summary>
            The Path to the end of the block
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlRepeatBlock.IsBookmark">
            <summary>
            Returns <c>true</c>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.startTagsBefore">
            <summary>
            The tag clump for the start of this tag, if the start of this bookmark was moved to
            content (i.e. the start clump is before the start of this bookmark).
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Creates a new bookmark from the clump of tags, considers all start tags to be this start
            tag, and breaks them off into children when end tags are found.
            </summary>
            <param name="reader"></param>
            <param name="tags"></param>
            <param name="documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Creates a new bookmark from the clump of tags, considers all start tags to be this start
            tag, and breaks them off into children when end tags are found.
            </summary>
            <param name="reader"></param>
            <param name="tags"></param>
            <param name="documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkStart,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.Shared.FastMergeLinkedList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PathToBlock},SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Creates a new bookmark from a start tag, and path and the children. 
            </summary>
            <remarks>This is used when a bookmark is created with a <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.TagClump"/> that has
            more than one start tag, and the first end tag is reached.</remarks>
            <param name="startTag"></param>
            <param name="children"></param>
            <param name="endPath"></param>
            <param name="documentPartProperties"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.PeekBookmarkTags(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkStart}@,System.Collections.Generic.IList{SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkEnd}@)">
            <summary>
            Advances the reader to the next element that is not a bookmark tag, and puts all
            bookmark tags read in, in the given list.
            </summary>
            <remarks>If the reade ri s currently on a tag, that tag will be added to the appropriate list.
            </remarks>
            <param name="startTags"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.IsStart(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Checks whether the element that the reader is pointing to is the start of a bookmark.
            </summary>
            <remarks>This is the start element if it is a bookmarkStart element (which must be empty)
            </remarks>
            <param name="reader">An XML reader parsing a document</param>
            <returns><c>true</c> if the reader points to the start of a bookmark, 
            <c>false</c> otherwise. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBookmark.IsEnd(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Checks whether the element that the reader is pointing to is the end of a bookmark.
            </summary>
            <remarks>This is the end element if it is a bookmarkEnd element (which must be empty)
            </remarks>
            <param name="reader">An XML reader parsing a document</param>
            <returns><c>true</c> if the reader points to the end of a bookmark, 
            <c>false</c> otherwise. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.XmlBookmarkTag.SetRowIndex(System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="rowIndex">if <paramref name="inRow"/> is <c>true</c>, this should be the
            index of the row before the current one. Otherwise this should be index of the row
            containing the bookmark tag.</param>
            <param name="inRow"></param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField">
            <summary>
            Handles cross structure fields.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.tableDepth">
            <summary>
            The depth at which the outermost table within the field started.
            </summary>
            <remarks>Unless you are in quote marks inside the true or false token of an if field, tables
            and their entire content are ignored. Note, this include before and after text of merge
            fields</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Creates a new block out of a document.
            </summary>
            <remarks>After this is called, the reader will be at the end of the block, or the end of
            the document if it does not end.
            </remarks>
            <param name="context">The context of preprocessing used for creating this complex field.
            </param>
            <exception cref="T:System.ArgumentException">If the node does not point to a complex field element
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.ContentRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Callback for when the reader reads in content. This is only registered after
            the end of the field, if there wasn't any paragraph content before.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.ParagraphEnded(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Callback for when the paragraph ends; we only register for this if there was no
            content beforet the field. And if we read content, we unregister so getting to 
            this means the only content is the field itself.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.RunEnded(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Callback for when the run ends; we only register for this if there was no
            content beforet the field. And if we read content, we unregister so getting to 
            this means the only content is the field itself.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.IsStart(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Returns whether the reader is pointing to the start of a complex field
            </summary>
            <param name="reader">a reader parsing a document</param>
            <returns><c>true</c> if the xml reader is point to the start of a complex field, 
            <c>false</c> otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Checks whether the reader has reached the end of this block.
            </summary>
            <remarks>If the type of the instruction can be determined, it will be set, and if it's
            not one we care about, this will do nothing until we get to the end of the field.
            </remarks>
            <param name="context">The context of preprocessing used for creating this complex field.
            </param>
            <returns><c>true</c> if the current element is the end of this block, 
            <c>false</c> otherwise</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.SkipToEndElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Advances the reader to the FieldCharacter marking the end of this field, skipping over
            any other fields.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.GetNextTokenText(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,System.String@)">
            <summary>
            Gets the next token from the reader and updates the instruction to be the remaining
            </summary>
            <param name="reader">a reader parsing the document</param>
            <param name="instructionPiece">the text grabbed, if this is inside instructions. This
            will be updated to be the remaining instructions after the token is finished</param>
            <returns>the next token from the reader, or null if the end of the token hasn't been
            reached</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.IsEnd(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            When the reader points to the end element of the block, this should return true.
            </summary>
            <remarks>Determines if this is a end field character</remarks>
            <param name="reader">An <c>XmlReader</c> that is parsing the document</param>
            <returns><c>true</c> if the reader is pointing to the end element of this block, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.Ignore">
            <summary>
            <c>true</c> if this block ends before the end of the document, or the field is something
            we don't handle.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.FieldType">
            <summary>
            Returns the type of field that this field is.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.SeparatePath">
            <summary>
            The path to the separate "character"
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.IsMergeField">
            <summary>
            Returns <c>true</c> if this field is a merge field
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.ComparableText">
            <summary>
            The output text of this field for comparing.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlComplexField.EndPath">
            <summary>
            The Path to the end of the block
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlDocumentProperties.UpdateProperties(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,SoftArtisans.OfficeWriter.WordWriter.WordTemplateDocumentPropertiesBag,ICSharpCode.SharpZipLib.Zip.ZipOutputStream,System.String)">
            <summary>
            This method will read in an exsiting document properties xml part, and update only the bits of XML that have changed.
            </summary>
            <param name="reader">XmlProcessingReader</param>
            <param name="newProperties">New document properties to be set</param>
            <param name="zipOutput">The output to save to</param>
            <param name="xmlPart">The part to write to.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlDocumentProperties.WriteValidValue(System.Xml.XmlWriter,System.String,System.Object,SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty,SoftArtisans.OfficeWriter.Shared.BidirectionalDictionary{System.String,SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty})">
            <summary>
            This method writes the value in a way that is valid for XML and Word
            </summary>
            <param name="xmlWriter">Writer</param>
            <param name="xmlTag">XML Tag</param>
            <param name="newValue">New Value</param>
            <param name="builtinProperty">What Type of Property is it</param>
            <param name="supportedProperties">What is the list of supported properties for this part</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlDocumentProperties.WriteSupportedProperties(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.WordTemplateDocumentPropertiesBag,SoftArtisans.OfficeWriter.Shared.BidirectionalDictionary{System.String,SoftArtisans.OfficeWriter.WordWriter.DocumentProperties.BuiltInProperty})">
            <summary>
            Writes the supported properties to the xml part
            </summary>
            <param name="writer">XmlWriter</param>
            <param name="newProperties">New Propertis</param>
            <param name="supportedProperties">Supported Properties</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlDrawingObjectProperties">
            <summary>
            Each instance of wp:docPr needs to have a unique identifier, so if we repeat one we need
            to give it a unique identifier; this class handles that.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlEncoder.CleanXmlString(System.String,System.Boolean)">
            <summary>
            Encodes characters that will not be properly escaped by an XmlWriter
            </summary>
            <param name="xmlString"></param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlEncoder.IsValidXmlChar(System.Char)">
            <summary>
            Returns False if the character is invalid according to the XML specification, and will not be
            escaped by an XmlWriter.
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions">
            <summary>
            Class for handling field instructions.
            </summary>
            <remarks>Instructions are stored in the following manner: Each field is either a complex
            field or a simple field, and has an instance of this class. This has list of Xml Tokens,
            each one of these tokens represents what you may see in Word (e.g. "MERGEFIELD" or "name"
            or "  "). Thus this list is alternating between whitespace tokens and text tokens. All
            the information from the document is retained in these tokens, so that they can be
            written out later. Each of these tokens is made up of a sequence of pieces. The pieces
            are each one of the following: a string grabbed either from the "w:instr" attribute of a
            simple field or from a &lt;w:instText&gt; element of a complex field; an xml fragment
            from a complex field between the begin character and the separator character; a child
            block.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.GetSwitch(System.String)">
            <summary>
            Returns the text corresponding to a given switch
            </summary>
            <param name="switchString">The text that represents the switch; e.g. "\@" or "\f"</param>
            <returns>The contents of the switch or null if the switch is not there or has no value.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.GetText(System.Int32)">
            <summary>
            Gets the ith text element.
            </summary>
            <param name="index">The index of the text. Note that this does not include whitespace, so
            the 0th element of "  mergefield name" would be "mergefield", and name would be the 1st.
            </param>
            <returns>the text node at the given index, or <c>null</c></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.GetCaseType">
            <summary>
            Get the case type of these instructions.
            </summary>
            <returns>The type of case to use for this field</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the instructions to a writer.
            </summary>
            <remarks>This assumes that it is part of a complex field. Before calling this a run
            should have been started and the begining field character should have been printed.
            </remarks>
            <param name="data">The data for populating any fields/bookmarks</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.GetFieldType(System.String)">
            <summary>
            Converts a string version of a field type to the enum
            </summary>
            <param name="instruction">an instruction with no surrounding white space. E.g.
            "mergefield" not " mergefield  "</param>
            <returns>The field denoted by the given text</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.AppendString(System.String)">
            <summary>
            Appends a string to the end of these instructions
            </summary>
            <param name="text">text grabbed either from the "w:instr" attribute if this is a simple
            field, or &lt;w:instrText&gt; element if it's for a complex field</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.EndInstructions">
            <summary>
            Causes the Instructions to be finalized.
            </summary>
            <remarks>This should be called when the end of the instructions is reached; either the
            end of the "w:instr" attribute is reached or the separate character. Do not call either
            of the append methods after calling this.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.SwitchCurrentToken">
            <summary>
            Switches the type of the current token to the opposing type of what it is now
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.AppendXml(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Appends an xml node from a reader to the end of these instructions
            </summary>
            <param name="reader">an xml node contained between the begin and separate characters of a
            complex field</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.Append(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock)">
            <summary>
            Appends a child block to this set of instructions
            </summary>
            <param name="block">a child block that is part of these instructions</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.ToString">
            <summary>
            Returns the xml forming these instructions
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.UpdateCase(System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.FieldCaseType@)">
            <summary>
            Updates the case of the given string to match the given case type
            </summary>
            <param name="unformattedString">A string</param>
            <param name="type">The casing to apply to the unformatted string. If this is First Cap
            and a letter or number is capitalized the type will be updated for further use.</param>
            <returns>The string reformatted with the given case formatting</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFieldInstructions.TokenCount">
            <summary>
            The number of tokens completely processed in the field.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.Shared.XmlFilter">
            <summary>
            Provides a class which reads in XML and writes it out differently based on certain rules
            
            Override this class to provide functionality. By default the class writes out everything it read in unchanged
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.stack">
            <summary>
            keep track of the context of node names
            
            NOTE: I don't think we ever use this beyond looking at the top element of the stack
            but it's not a performance bottleneck
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.disableWrite">
            <summary>
            if this is true, no XML should be written out.
            You probably want to test this rigorously; it might be unreliable
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.Shared.XmlFilter.uniqueElementCount">
            <summary>
            this is incremented for each element so that when the file is read through again, it knows what element to look for
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
            Produce a XmlReader and XmlWriter from the streams given
            </summary>
            <param name="inputStream"></param>
            <param name="outputStream"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.Process">
            <summary>
            Iterate through the xml nodes while reading, and write them depending on if the other functions of this class
            are overridden.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteSignificantWhitespace(System.Xml.XmlWriter)">
            <summary>
            Write whitespace with xml:space="preserve"
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteAttributeString(System.Xml.XmlWriter)">
            <summary>
            Write an attribute. Override if attributes need to be different somehow. 
            disableWrite is already assumed to be tested
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteStartElement(System.Xml.XmlWriter)">
            <summary>
            Write the starting element and attributes. If it's an empty element, 
            Process() will close it with WriteEndElement(). So this function shouldn't test for IsEmptyElement
            
            This function does iterate through attributes, so make sure to include that part if the base function
            is never called
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteEndElement(System.Xml.XmlWriter)">
            <summary>
            Write ending element
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteText(System.Xml.XmlWriter)">
            <summary>
            Write text in between elements
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteStartDocument(System.Xml.XmlWriter)">
            <summary>
            Write the start of the document
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.Shared.XmlFilter.WriteEndDocument(System.Xml.XmlWriter)">
            <summary>
            Write the end of the document
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.Shared.XmlFilter.OutputStream">
            <summary>
            This is what Process() used to return
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFormulaFieldProcessor">
            <summary>
            Given a parsed field, this puts out the xml output for given data, for a formula field.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment">
            <summary>
            Stores a fragment of xml to be rewritten out later. 
            </summary>
            <remarks>Unlike what is provided by <see cref="N:System.Xml"/>, this class handles
            nonconformant fragments that may have end elements before start elements.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.#ctor">
            <summary>
            Creates a new xml fragment, ready for writing
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.#ctor(System.Xml.XmlReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElementWithGoal,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext)">
            <summary>
            Reads the contents of the reader until the end path into this reader
            </summary>
            <param name="reader">an xml reader processing a document</param>
            <param name="endPath">The end path, which will not be read in, but the reader will be
            pointing to this path at the end of this constructor. This class will update the path
            itself, so the path will point to its goal.</param>
            <param name="spaceContext">The whitespace context of the xml; this will be updated during the reading.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes out this fragment of xml to an xml writer.
            </summary>
            <remarks>Warning: this writes start and end elements by themselves, be sure that the
            content will align in a way so that the write does not complain.
            
            Note: This will just write out whatever end element is appropriate, so don't expect it to
            throw an exception if the end element you saved it with is not the same that should be
            written. In fact this doesn't save anything about the end element other than there is
            one.</remarks>
            <param name="writer">An xml writer writing out some xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.Append(System.Xml.XmlReader)">
            <summary>
            Appends a specific node to this fragment and advances the reader.
            </summary>
            <remarks>This does not add the contents of a whole element, just the start, to add the
            entire element use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendWhole(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement)"/></remarks>
            <param name="reader">A reader processing some xml</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.Append(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWritable)">
            <summary>
            Append any writable object to this fragment
            </summary>
            <param name="xmlPiece">Some xml to be written.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendNoAdvance(System.Xml.XmlReader)">
            <summary>
            Appends a specific node to this fragment and does not advances the reader.
            </summary>
            <remarks>This does not add the contents of a whole element, just the start, to add the
            entire element use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendWhole(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement)"/></remarks>
            <param name="reader">A reader processing some xml</param>
            <exception cref="T:System.ArgumentException">If the reader is positioned on anything but a start
            or end tag.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendEmptyElement(System.String,System.String[])">
            <summary>
            Adds a new empty element to this fragment of xml.
            </summary>
            <param name="name">the name of the element</param>
            <param name="attributePairs">the attributes paired as name/value</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendEndElement">
            <summary>
            Adds a new end element to this fragment
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.AppendWhole(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement)">
            <summary>
            Appends an element and its entire contents to the fragment.
            </summary>
            <param name="reader">A reader processing some xml. This is advanced to the next sibling
            </param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragment.XmlEndElement">
            <summary>
            Simple writable that just writes the end element.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter">
            <summary>
            This class allows you to write out fragments of xml that need not be well formed. 
            </summary>
            <remarks>The string of xml can later be retrieved for further processing. This class
            nicely handles starting and ending at any depth, so you can start with the close tag of a
            &lt;w:r&gt; and end after the &lt;w:rPr&gt; of the next paragraph.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a fragment writer for writing out a fragment of xml from a reader to a string
            </summary>
            <param name="reader">The xml reader reading the document</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter.Write">
            <summary>
            Writes out whatever the reader is pointing to and advances the reader.
            </summary>
            <remarks>If the reader is already at the end of the file, nothing happens.</remarks>
            <param name="reader">a reader parsing a document. Does not move the reader.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter.GetString">
            <summary>
            Finalizes the writer and returns the string.
            </summary>
            <remarks>We may want to cache the string. </remarks>
            <returns>The string that was output by the xml writer</returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter.ToString">
            <summary>
            Use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlFragmentWriter.GetString"/> if done writing; this may not be valid xml.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlGlobalHeaderFooterRepeatBlock.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Global Bookmarks are not created until processing
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlGlobalRepeatBlock">
            <summary>
            Handles Global repeat blocks that are created via the SetMailMerge command; copies the
            entire contents of the  body.
            </summary>
            <remarks>Start path should point to the body tag, and end path should point to the body
            end tag.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlGlobalRepeatBlock.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Global Bookmarks are not created until processing
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlIfFieldProcessor">
            <summary>
            Processor for handling if fields in the document
            </summary>
            <remarks>Regardless of whether this is generated by a complex or simple field, the
            resulting if field will be written out as a complex field. </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlIfFieldProcessor.EvaluateExpression">
            <summary>
            Returns whether to write the true text or the false text
            </summary>
            <returns><c>true</c> if the expression in the if field evaluates to true.</returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldMarker">
            <summary>
            This is more-or-less the data necessary for storing the data relevant to a merge field in
            memory, when iterating through the data source multiple times.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldMarker.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser)">
            <summary>
            </summary>
            <param name="parser">The parser for the associated marker</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldMarker.#ctor(System.Int32,System.String)">
            <summary>
            Constructor for groupColumn_24
            </summary>
            <param name="columnNumber">The number of the column</param>
            <param name="originalText">The original name of the bookmark</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldMarker.#ctor(System.String,System.String)">
            <summary>
            Constructor for group_FieldName
            </summary>
            <param name="columnName">The fieldname</param>
            <param name="originalText">The original name of the bookmark</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor">
            <summary>
            Given a parsed field, this puts out the xml output for given data, for a regular merge
            field.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor.WriteExternalDoc(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,System.Boolean)">
            <summary>
              You should not use this, use <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor.RewriteExternalDoc(System.Xml.XmlWriter)"/>
            or <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor.WriteExternalDoc(System.Byte[],SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.MergeFieldNameParser.ExternalDocumentType,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)"/>
            instead.
            <br/>
            
              Writes out an external document (such as an rtf document)
            </summary>
            <param name="writer"></param>
            <param name="binaryDataStorage">If rewrite is false, this must not be null,
            if rewrite is true, this should probably be null</param>
            <param name="rewrite"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor.WriteXmlForImage(System.Xml.XmlWriter)">
            <summary>
            Writes out the minimum xml required to display an inline image.
            </summary>
            <remarks>The set of xml written was derived by first writing out that which I knew and
            then figuring out what else is necessary by copying in tags from a legitimate file
            </remarks>
            <param name="writer"></param>
            <param name="extension">The extension of the image (e.g. ".jpeg")</param>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlMergeFieldProcessor.ConsumeContainingParagraph">
            <summary>
            Set to true, if the paragraph, and run starts were skipped for the document we're inserting
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlNextFieldProcessor">
            <summary>
            Processor for next fields; simply advances the data source.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlNextFieldProcessor.Write(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.Data.IWritingBinding)">
            <summary>
            Advances the data source; writes nothing
            </summary>
            <param name="writer">The destination xml</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReaderUntilGoal">
            <summary>
            A simple wrapper that will stop when it reaches a specified goal
            </summary>
            <todo> Any of the UntilPath methods are not implemented because I'd need to figure 
            how to do that nicely, and they aren't necessary yet, so I'm not. </todo>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReaderUntilGoal.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement)">
            <summary>
            Creates a new reader that wraps the given reader
            </summary>
            <param name="baseReader">The reader to use as a base for this reader.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReaderUntilGoal.Close">
            <summary>
            Closes this reader and preps the base reader to continue reading.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlRepeatElementContent.contentStartPath">
            <summary>
            The path to the very first element that is not the start tag or the associated Pr
            element.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlRepeatElements">
            <summary>
            Repeats a bunch of complete elements, where the start path is the open tag, and the end
            path is an end tag at the same depth.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlRepeatElementsBetween">
            <summary>
            Repeats all the elements between the start path and end path inclusively.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak">
            <summary>
            Writes out an empty paragraph containing the section properties for this section
            </summary>
            <remarks>
            When repeating the properties <br />
            If we have the following document: <br />
            <para>
            TEXT  &lt; -- small margins<br />
            continuous break (1) <br />
            TEXT  &lt; -- big margins<br />
            next break (2) <br />
            TEXT  &lt; -- big margin on left<br />
            odd break (3) <br />
            TEXT  &lt; -- Big margin on right <br />
            </para>
            <para>
            It actually appears in the xml as: <br />
            &lt;text&gt; <br />
            &lt;next break (1)&gt; <br />
            &lt;text&gt; <br />
            &lt;continuous break (2)&gt; <br />
            &lt;text&gt; <br />
            &lt;odd break (3)&gt; <br />
            &lt;text&gt; <br />
            </para>
            But when we repeat around the continuous break (1) we want that break to be repeated and it's properties to be used during each repetition
            so it will become: <br />
            <para>
            TEXT  &lt; -- small margins<br />
            continuous break (1) <br />
            TEXT  &lt; -- big margins<br />
            continuous break (1) <br />
            TEXT  &lt; -- big margins<br />
            continuous break (1) <br />
            TEXT  &lt; -- big margins<br />
            next break (2) <br />
            TEXT  &lt; -- big margin on left<br />
            odd break (3) <br />
            TEXT  &lt; -- Big margin on right <br />
            </para>
            <para>
            It actually appears in the xml as: <br />
            &lt;text&gt; <br />
            &lt;next break (1)&gt; <br />
            &lt;text&gt; <br />
            &lt;continuous break (2)&gt; <br />
            &lt;text&gt; <br />
            &lt;continuous break (2)&gt; <br />
            &lt;text&gt; <br />
            &lt;continuous break (2)&gt; <br />
            &lt;text&gt; <br />
            &lt;odd break (3)&gt; <br />
            &lt;text&gt; <br />
            </para>
            </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.CopyPropertiesFollowing(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak)">
            <summary>
            Sets the properties for this section break to be the ones for the section break after the
            given break.
            </summary>
            <remarks>This is here because when you have a repeat block, the first section break's
            properties need to be replaced with the properties for the section containing the end of
            the bookmark, which would be one's in the SectionBreak block after last one of the
            bookmark.</remarks>
            <param name="lastSectionBreak"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.CopyPropertiesToNextBreak(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak)">
            <summary>
            Sets the properties of the section break after this one to the properties in the given
            section break.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.BreakType.NextPage">
            <summary>
            The default; begins the new section on the following page.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.BreakType.OddPage">
            <summary>
            Begins the new section on the next odd-numbered page
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.BreakType.EvenPage">
            <summary>
            Begins the new section on the next even-numbered page
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.BreakType.Continuous">
            <summary>
            Begins the new section on the following paragraph. This means some properties are
            excluded.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionBreak.BreakType.Column">
            <summary>
            Begins the new section on the next column.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSectionProperties">
            <summary>
            Block denoting the last section break in the document (the one not in a paragraph properties).
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField">
            <summary>
            This type of block is for ones denoted by "w:fldSimple"
            </summary>
            <remarks>Note that unlike the other blocks, this is actual xml, so it must end, if the
            file has valid xml.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.#ctor(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.DocumentPartProperties)">
            <summary>
            Creates a new simple field.
            </summary>
            <remarks>Note, unlike the other blocks, this might not call 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)"/>, if either of the two following conditions are satisfied:
            <list type="bullet">
            <item>The Element is Empty. In which case, there is nothing contained within this field
            </item>
            <item>The Element is ignored, as far as we're concerned this is the same as a character
            run</item></list></remarks>
            <param name="context">The context of preprocessing used for creating this simple field.</param>
            <exception cref="T:System.ArgumentException">If the node does not point to a simple field element
            </exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.ContentRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Callback for when the reader reads in content. This is only registered after
            the end of the field, if there wasn't any paragraph content before.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.ParagraphEnded(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Callback for when the paragraph ends; we only register for this if there was no
            content beforet the field. And if we read content, we unregister so getting to 
            this means the only content is the field itself.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.Process(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader,System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Writes out the xml in this field to the given writer.
            </summary>
            <param name="reader">The source document XML</param>
            <param name="writer">The destination document XML</param>
            <param name="data">The data source used to populate this field</param>
            <param name="path">The current path that has been read to. This should be the same as the
            start path of this field</param>
            <param name="propertyBag">The properties for this word template</param>
            <param name="defaultDataSource">The default data source for this field</param>
            <param name="defaultDataSourceName">The name of the default data source for this field</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.IsStart(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            Returns whether the reader is pointing to a simple field
            </summary>
            <param name="reader">An XML reader parsing a document</param>
            <returns><c>true</c> if the reader points to the start of a simple field, 
            <c>false</c> otherwise. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.PreProcessElement(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)">
            <summary>
            When overridden, does any additional processing on the current element in the reader.
            </summary>
            <remarks>This simply checks if we've reached the end element of the field</remarks>
            <param name="context">The context of preprocessing used for creating this simple field.
            </param>
            <returns>Whether to stop processing and return control to the calling method (
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.stopPreprocessing"/>) or to continue processing in this block (
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.continuePreprocessing"/>)</returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlBlock.PreProcess(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader)"/>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.Ignore">
            <summary>
            Returns whether this block should be ignored and the contained blocks should just be
            taken from it.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.FieldType">
            <summary>
            Returns the type of field that this field is.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.IsMergeField">
            <summary>
            Returns <c>true</c> if this field is a merge field
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSimpleField.ComparableText">
            <summary>
            The output text of this field for comparing.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSkipSectionPropertiesBlock">
            <summary>
            A simple block for skipping section properties that we are going to handle writing out in another block
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSkipSectionPropertiesBlock.ProcessingRead(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlProcessingReader)">
            <summary>
            Skips over the current section properties
            </summary>
            <param name="reader">The reader parsing a document</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSkipSectionPropertiesBlock.ProcessingWrite(System.Xml.XmlWriter,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.IStoreBinaryDataForOpenXml)">
            <summary>
            Does nothing
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext">
            <summary>
            A simple class for maintaining whether white space should be preserved in xml.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.#ctor">
            <summary>
            Default constructor, starts off as default
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Update(System.Xml.XmlReader)" -->
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Preserve">
            <summary>
            Enter another level of context with the space preserved
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Default"/>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Continue"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Default">
            <summary>
            Enter another level of context with the space default
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Preserve"/>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Continue"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Continue">
            <summary>
            Enter another level of context with the same space processing as before
            </summary>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Default"/>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Preserve"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.Pop">
            <summary>
            Exit out of the current context
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlSpaceContext.IsPreserve">
            <summary>
            Whether the current xml has it's xml:space set to preserve
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement">
            <summary>
             A "node" representing an xml start element.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new Start element from the one being pointed to by the reader.
            </summary>
            <remarks>This does not advance the reader</remarks>
            <param name="reader">an xml reader that is currently pointed to a start element.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement.#ctor(System.Xml.XmlReader,System.Boolean)">
            <summary>
            Creates a new Start element from the one being pointed to by the reader, but it takes
            whether or not to be empty from the given parameter instead of the reader.
            </summary>
            <remarks>This does not advance the reader</remarks>
            <param name="reader">an xml reader that is currently pointed to a start element.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement.#ctor(System.String,System.String[])">
            <summary>
            Creates a new empty element
            </summary>
            <param name="name">The name of the element</param>
            <param name="attributePairs">A list of the attributes, name/value.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement.#ctor(System.String,System.Boolean,System.String[])">
            <summary>
            Creates a new empty element
            </summary>
            <param name="name">The name of the element</param>
            <param name="attributePairs">A list of the attributes, name/value.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElement.WriteTo(System.Xml.XmlWriter)">
            <summary>
            Writes this start element to the given writer
            </summary>
            <remarks>You must make sure to write the corresponding end element for this start
            element.</remarks>
            <param name="writer">An xml writer writing out some xml</param>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader">
            <summary>
            A reader for the explicit purpose of reading in a start element and it's attributes to a
            writer and nothing else.
            </summary>
            <remarks>Most of the <see cref="T:System.Xml.XmlReader"/> methods were not implemented; only those
            that are necessary for the <see cref="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)"/> method. If the unit
            tests start failing after upgrading .NET or something like that, it could be because the
            implementation is different, but I checked against 2.0 and 3.5.
            Note: this should only be used with an XmlTextWriter that has namespaces set to false. </remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.#ctor(System.Xml.XmlReader)">
            <summary>
            Creates a new Start element from the one being pointed to by the reader.
            </summary>
            <param name="reader">an xml reader that is currently pointed to a start element.</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.ReadAttributeValue">
            <summary>
            Alternates between <c>true</c> and <c>false</c>
            </summary>
            <returns><c>true</c> the first time, and then alternates. </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            
            <returns>
            The value of the specified attribute. This method does not move the reader.
            </returns>
            
            <param name="i">The index of the attribute. The index is zero-based. (The first attribute
            has index 0.) </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that
            owns the attribute); false if the reader is not positioned on an attribute (the position
            of the reader does not change).
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            
            <returns>
            true if there is a next attribute; false if there are no more attributes.
            </returns>
            
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.MoveToFirstAttribute">
            <summary>
             Moves to the first attribute.
            </summary>
            
            <returns>
            true if an attribute exists (the reader moves to the first attribute); otherwise, false
            (the position of the reader does not change).
            </returns>
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.NodeType">
            <summary>
            Gets whether this is pointed to the element itself or it's attribute
            </summary>
            <returns>
            Either <see cref="F:System.Xml.XmlNodeType.Element"/> or <see cref="F:System.Xml.XmlNodeType.Attribute"/>
            </returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.LocalName">
            <summary>
             Gets the name of the element or current attribute including prefix.
            </summary>
            
            <returns>
             The name of the element or current attribute including prefix.
            </returns>
            
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.NamespaceURI">
            <summary>
            The empty string.
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.Prefix">
            <summary>
            The empty string
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.HasValue">
            <summary>
            <c>true</c> if pointed to an attribute, <c>false</c> if not
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.AttributeCount">
            <summary>
            The number of attributes
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlStartElementReader.Value">
            <summary>
            The value of the current attribute or an empty string if point to the element.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable.currentRowIndex">
            <summary>
            When between rows, this is the row after (so it starts with 0).
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable.infos">
            <summary>
            The first element in this dictionary should be the most nested
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable.startingChildren">
            <summary>
             The children that occur before the start of the first row.
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable.firstCell">
            <summary>
            Between cells this should reference the index of the next cell.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTable.HandleBookmarkEndTags(SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlPreProcessingReader,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.BookmarkTags.ITagClump)">
            <summary>
            
            </summary>
            <param name="reader">Not used</param>
            <param name="tags"></param>
            <returns></returns>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.EnsureBlockElementBlock">
            <summary>
            This block is here to ensure that there is at least one block level element inside of
            a tag. Apparentl this is only necessary for Table Cells.
            You may need to ensure that there is a block element block if the only paragraph
            in a tag, is consumed by a merge field with an embedded document, which then is null
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.TableHandling.XmlTableRow.infos">
            <summary>
            The first element in this dictionary should be the most nested
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags">
            <summary>
            Class holding constants for all the Word XML tags.
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.WriteText(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes out a bit of word text.
            </summary>
            <remarks>Instead of trying to figure out whether to write out &lt;w:t&gt; or
            &lt;w:instrText&gt;, since a &lt;w:instrText&gt; will be treated like regular text when
            not in a field(according to the standard and empirically confirmed using word), all text
            will be printed out using  &lt;w:instrText&gt;. Note that this creates a slightly larger
            file than if we did it correctly. Also note that word can handle &lt;w:t&gt; inside of
            fields instead of &lt;w:instrText&gt;, but that doesn't conform to the standard, so might
            as well go the conforming route when they're equally as easy.</remarks>
            <param name="writer">The destination xml</param>
            <param name="text">The string to be written</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.WriteInstructions(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes out a bit of field instructions
            </summary>
            <param name="writer">The destination xml</param>
            <param name="text">The instructions to be written</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.WriteHeaderFooter(System.Xml.XmlWriter,System.Boolean)">
            <summary>
            Writes out the opening tag and attributes for a header or footer
            </summary>
            <param name="writer">The destination xml</param>
            <param name="isHeader">Whether header or footer tags should be written</param>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.BookmarkDisplacedByCustomXml">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BookmarkStart"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.BookmarkFirstColumn">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BookmarkStart"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.BookmarkId">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BookmarkStart"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BookmarkEnd"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.BookmarkLastColumn">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BookmarkStart"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.BookmarkName">
            <summary>Tag Name=<see cref="T:SoftArtisans.OfficeWriter.WordWriter.Bookmark"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.CommentId">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.CommentStart"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.CommentEnd"/>, 
            <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.CommentReference"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.DrawingObjectDescription">
            <summary> Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DrawingObjectProperties"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.DrawingObjectHidden">
            <summary> Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DrawingObjectProperties"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.DrawingObjectId">
            <summary> Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DrawingObjectProperties"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.DrawingObjectName">
            <summary> Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DrawingObjectProperties"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.EmbedReference">
            <summary>
            Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BinaryLargeImageOrPicture"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.FieldCharacterType">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.FieldCharacter"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.Height">
            <summary>
            Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Extent"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureExtent"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.LockAspectRatio">
            <summary>
            Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicFrameLocks"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.PreferRelativeResize">
            <summary>
            Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureDrawingPropertiesNonVisual"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.SimpleFieldInstructionText">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.SimpleField"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.Width">
            <summary>
            Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Extent"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureExtent"/>
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.XmlSpacing">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Text"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.FieldInstructionText"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.HFAttr1">
            <summary>These attributes are needed at the beginning of each new header and footer </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes">
            <summary>
            All the tags that go in the [Content_Types].xml file
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Default"/> <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Override"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.PartName">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Default"/> <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Override"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Default"/> <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Tag.Override"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.DocumentContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.DocxExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.HeaderContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.FooterContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.CoreDocumentPropertiesContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.ExtendedDocumentPropertiesContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.GifContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.GifExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.HtmlContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.HtmlExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.JpegContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.JpegExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.PngContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.PngExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.RtfContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.RtfExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.XmlContentType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.ContentType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Value.XmlExtension">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.Extension"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.PartName.Core">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.PartName"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.PartName.App">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.ContentTypes.Attribute.PartName"/></summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships">
            <summary>
            All the tags that go in the *.rels files
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Attribute.Id">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Tag.Relationship"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Attribute.Target">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Tag.Relationship"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Attribute.Type">
            <summary>Tag Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Tag.Relationship"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Value.ImageType">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Relationships.Attribute.Type"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.BinaryLargeImageOrPicture">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureFill"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DrawingObjectProperties">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Inline"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Anchor"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Extent">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Inline"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Anchor"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicFrameLocks">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicFramePropertiesNonVisual"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicFramePropertiesNonVisual">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Inline"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Anchor"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicObject">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Inline"/>, <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Anchor"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicObjectData">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicObject"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Picture">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.GraphicObjectData"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureDrawingPropertiesNonVisual">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PicturePropertiesNonVisual"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureExtent">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.TransformForIndividualObjects2D"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PictureFill">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Picture"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.PicturePropertiesNonVisual">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Picture"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.ShapeProperties">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Picture"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.TranformExtents">
            <summary> A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.TransformForIndividualObjects2D"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.TransformForIndividualObjects2D">
            <summary>  A Child of <see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.ShapeProperties"/> </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Bdo">
            <summary>
              changes direction of text ECMA 2nd edition 17.3.2.3
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.CustomXml">
            <summary>
              This element specifies the presence of a custom XML element around one or
              more inline level structures (runs, images, fields, etc.) within a paragraph.
              ECMA 2nd edition 17.5.1.3 or 17.5.1.6
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Dir">
            <summary>
              changes the direction of text ECMA 2nd edition 17.3.2.8
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Hyperlink">
            <summary>
              A hyperlink, ECMA 2nd edition 17.16.22
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.SdtContent">
            <summary>
              Structured document tag content, inserted via Quick Parts -> Build Blocks
              ECMA 2nd edition 17.5.2.36 or 17.5.2.34
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.SmartTag">
            <summary>
              A smart tag, whatever that is, ECMA 2nd edition 17.5.1.9
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.OMath">
            <summary>
              An equation container, ECMA 2nd edition 22.1.2.77
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.OMathRun">
            <summary>
              An equation run, ECMA 2nd edition 22.1.2.87
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Deletion">
            <summary>
              Deleted text, ECMA 2nd edition 17.13.5.14
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Insertion">
            <summary>
              Inserted text, ECMA 2nd edition 17.13.5.18
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.MoveFrom">
            <summary>
              source content in a tracked move, ECMA 2nd edition 17.13.5.22
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.MoveTo">
            <summary>
              destination content in a tracked move, ECMA 2nd edition 17.13.5.25
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Rt">
            <summary>
              The guide text in a phonetic guide (Ruby), ECMA 2nd edition 17.3.3.24
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.RubyGuide">
            <summary>
              The guide text in a phonetic guide (Ruby), ECMA 2nd edition 17.3.3.24
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.RubyBase">
            <summary>
              The base text of a phonetic guide (Ruby), ECMA 2nd edition 18.3.3.27
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Comment">
            <summary>
              A comment, like the actual content, ECMA 2nd edition 17.13.4.2
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.DocPartBody">
            <summary>
              Contents of a glossary document entry, ECMA 2nd edition 17.12.6
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Endnote">
            <summary>
              Endnote content, ECMA 2nd edition 17.11.2
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Footnote">
            <summary>
              Footnote content, ECMA 2nd edition 17.11.10
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Ftr">
            <summary>
              Footer content, ECMA 2nd edition 17.10.3
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Footer">
            <summary>
              Footer content, ECMA 2nd edition 17.10.3
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Hdr">
            <summary>
              Header Content, ECMA 2nd edition 17.10.4
            </summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.Header">
            <summary>
              Header Content, ECMA 2nd edition 17.10.4
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Tag.CoreProperties">
            <summary>
            ECMA-372, Second Edition, Part 2
            </summary>
                        #region CoreProperties
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Value.Begin">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.FieldCharacterType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Value.End">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.FieldCharacterType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Value.Separate">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.FieldCharacterType"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Value.XmlDefault">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.XmlSpacing"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Value.XmlPreserve">
            <summary>Attribute Name=<see cref="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.Attribute.XmlSpacing"/></summary>
        </member>
        <member name="F:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.Directory">
            <summary>
            The base directory for the document within the zip file
            </summary>
            <remarks>Eventually this may need to be changed to be dynamic.</remarks>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.#ctor(SoftArtisans.OfficeWriter.WordWriter.WordWriterPropertyBag)">
            <summary>
             Creates a template with the given options set
            </summary>
            <param name="propertyBag">All the options for word writer</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.Process(System.Boolean,SoftArtisans.OfficeWriter.WordWriter.WordTemplateData)">
            <summary>
            Repeats all bookmarks and replaces fields with the appropriate data
            </summary>
            <param name="useGlobalBookmark">If <c>true</c> the entire contents of the document will
            be repeated as if the whole document were surrounded by a bookmark.</param>
            <param name="wordTemplateData">The data to be used for populating the merge fields.
            </param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.Save(System.IO.Stream)">
            <summary>
            Saves the output of processing to a stream
            </summary>
            <param name="stream">The destination stream to save to</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.GetFieldMarkers">
            <summary>
            Returns all the markers at the main level of the document
            </summary>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.Open(System.IO.Stream,System.Boolean)">
            <summary>
            Opens an xml word file from a stream
            </summary>
            <param name="stream">A stream containing a docx file</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.IsDocx(System.IO.Stream@,System.Boolean@,SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage@)">
            <summary>
            Checks to see if the given stream contains a docx file or not.
            </summary>
            <param name="templateStream">The input stream containing a document of some sort. This
            may be replaced with a memory stream if the given stream is not seekable.</param>
            <param name="fileSystem">If this is a compound file (i.e. doc file) the file storage will
            be populated from the stream</param>
            <param name="closeOnFinish">Whether or not <paramref name="templateStream"/> can be
            closed when done reading/processing</param>
            <returns><c>true</c> if the given stream contains a docx file; <c>false</c> otherwise.
            </returns>
            
            <exception cref="T:SoftArtisans.OfficeWriter.Shared.SAException">If the given stream is an encrypted docx file.</exception>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.IsCompoundFile(System.IO.Stream,SoftArtisans.OfficeWriter.Shared.ReadOnlyStorage@)">
            <summary>
            Returns whether the given stream is a compound file.
            </summary>
            <param name="stream">A stream of some sort</param>
            <param name="fileStorage">If the given stream is in fact a compound file; this will be
            populated with the contents of the stream</param>
            <returns><c>true</c> if the given stream contains a compound file; <c>false</c>
            otherwise.</returns>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.PropertyBag">
            <summary>
            All the options for word writer
            </summary>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.SaveExtension">
            <summary>
            This is the extension that should be used when saving to a file.
            </summary>
            <remarks>For a file with macros enabled, this will be docm, otherwise docx</remarks>
        </member>
        <member name="P:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.SupportsNestedBookmarks">
            <summary>
            Global Repeat Block is always allowed at the point when this is polled, it's not until
            we do processing and figure out whether any of the nested blocks are repeat blocks or
            group blocks.
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTemplate.PartTypes">
            <summary>
            These are the different content types for parts that we care about
            </summary>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities">
            <summary>
            This class provides utilities for writing tests for XmlWordTemplate
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.GetWordTemplateData(System.Object[],System.String[],System.String)">
            <summary>
            Returns a new data source based on the given data
            </summary>
            <param name="data">The rows of data</param>
            <param name="names">The names of the columns</param>
            <param name="name">The name of the data source</param>
            <returns>A word template data that holds the given data in the default data source
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.GetWritingBinding(System.Object[],System.String[],System.Int32)">
            <summary>
            Returns a binding used for testing, associated with the given data, and for the given
            column.
            </summary>
            <param name="data"></param>
            <param name="names"></param>
            <param name="columnNumber">The 1-indexed column number</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.GetWritingBinding(System.Object[],System.String[],System.String)">
            <summary>
            Returns a binding used for testing, associated with the given data, and for the given
            column name.
            </summary>
            <param name="data"></param>
            <param name="names"></param>
            <param name="columnName">The name of the column</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.BuildRepeatBlock(System.Object[0:,0:],System.String[],System.String,System.Int32)">
            <summary>
            Returns a repeat block data source
            </summary>
            <param name="table">The data source</param>
            <param name="columnNames">the column names</param>
            <param name="bookmarkName">the name of the bookmark</param>
            <param name="maxRows">The maximum number of repetitions</param>
            <returns></returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.GeneratedText(System.String)">
            <summary>
            Returns a string representation of the xml that would be produced by writing some text.
            </summary>
            <remarks>This only applies to text that we explicitly write, copied text will be unchanged.</remarks>
            <param name="text">The actual text. This is what would be displayed in word</param>
            <returns>The xml tags for a single piece of text</returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.WriteText(System.Xml.XmlWriter,System.String)"/>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlUnitTestUtilities.GeneratedText">
            <summary>
            Returns a string representation of the xml that would be produced by writing no text.
            </summary>
            <remarks>This only applies to text that we explicitly write, copied text will be unchanged.</remarks>
            <returns>The xml tags for no text</returns>
            <seealso cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlTags.WriteText(System.Xml.XmlWriter,System.String)"/>
        </member>
        <member name="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement">
            <summary>
            Wrapper for <see cref="T:System.Xml.XmlNode"/> so that it can implement <see cref="T:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWritable"/>
            </summary>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement.FilterOneDepth(System.String[])">
            <summary>
            Removes the nodes with any of the specified names from the children of this element
            </summary>
            <param name="names">A list of node names to remove</param>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement.RemoveChild(System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,System.Boolean)">
            <summary>
            Removes the first child with the specified name, and returns it.
            </summary>
            <param name="childName">The name of the child tag to remove</param>
            <param name="path">The path to this element; will be updated to the path of the child. 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Clone"/></param>
            <param name="preserveWhitespace">Whether or not the parent element of this node preserves
            whitespace.</param>
            <returns>The first child with the specified name, or <c>null</c> if none exists.
            </returns>
        </member>
        <member name="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.XmlWholeElement.GetChild(System.String,SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement,System.Boolean)">
            <summary>
            Gets the first child with the specified name, and returns it.
            </summary>
            <param name="childName">The name of the child tag to get</param>
            <param name="path">The path to this element; will be updated to the path of the child. 
            <see cref="M:SoftArtisans.OfficeWriter.WordWriter.XmlTemplate.PathToElement.Clone"/></param>
            <param name="preserveWhitespace">Whether or not the parent element of this node preserves
            whitespace.</param>
            <returns>The first child with the specified name, or <c>null</c> if none exists.
            </returns>
        </member>
    </members>
</doc>
