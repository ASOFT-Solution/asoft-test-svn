@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Created                Comment
//#     31/10/2017      Quang Hoàng            Tạo mới
//####################################################################
*@
@using ASOFT.ERP.A00.Core.Control
@using ASOFT.ERP.A00.Core
@using ASOFT.ERP.A00.Entities.Common
@model ASOFTSysGrid

@{
    List<ASOFTGridColumnSetting> list = new List<ASOFTGridColumnSetting>();
    string Table = ViewBag.Grid;
    var count = Model.Bind.Count;

    ASOFTGridColumnSetting rownum = new ASOFTGridColumnSetting
    {
        IDColumn = "RowNum",
        TitleColumn = ASOFTLanguage.FindWordA00("A00.Number"),
        Width = 40,
        VisibleColumn = true,
        TypeColumn = System.Type.GetType("System.Int32"),
        HtmlAttrCoulmns = (new { style = "text-align:center" })
    };
    list.Add(rownum);
}


@for (int i = 0; i < count; i++)
{  
    ASOFTGridColumnSetting Grid;
    string template = "";
    bool enable = Model.visible.ElementAt(i) == 1 ? true : false;
    
    int tp = Model.Template.ElementAt(i);

    if (tp == ASOFTConstants.CHECKBOX)
    {
        if (Model.Bind.ElementAt(i).Value == typeof(bool))
        {
            template = string.Format("<input type='checkbox' #= {0} == 'True'? 'checked' : '' # onclick='return false;' />", Model.Bind.ElementAt(i).Key);
        }
        else
        {
            template = string.Format("<input type='checkbox' #= {0} == 1? 'checked' : '' # onclick='return false;' />", Model.Bind.ElementAt(i).Key);
        }
        Grid = new ASOFTGridColumnSetting
        {
            IDColumn = Model.Bind.ElementAt(i).Key,
            TitleColumn = Model.Title.ElementAt(i),
            TypeColumn = Model.Bind.ElementAt(i).Value,
            ClientTemplate = template,
            Width = Model.GridWidth.ElementAt(i) == 0 ? 100 : Model.GridWidth.ElementAt(i),
            HtmlAttrCoulmns = (new { style = "text-align:center", @class  = "asf-cols-align-center" }),
            VisibleColumn = enable,
            clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
            clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
            clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
            clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
            clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
            clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
        };
    }
    else
    {
        if (string.IsNullOrEmpty(Model.ClientTemplate[i]))
        {
            if (Model.Bind.ElementAt(i).Value == typeof(DateTime))
            {
                Model.ClientTemplate[i] = string.Format("#= parseDate(data.{0},"+ Model.DataType[i] +") #", Model.Bind.ElementAt(i).Key);
            }
            if (Model.Bind.ElementAt(i).Key.Equals("DivisionID") && enable)
            {
                Model.ClientTemplate[i] = "<span>#=DivisionID == '@@@' ? '' : DivisionID#</span>"; 
            }
        }
        else {
            Model.ClientTemplate[i] = Model.ClientTemplate[i].Replace("{0}", Model.Bind.ElementAt(i).Key);//string.Format(Model.ClientTemplate[i], Model.Bind.ElementAt(i).Key);
        }
            
        Grid = new ASOFTGridColumnSetting
        {
            IDColumn = Model.Bind.ElementAt(i).Key,
            TitleColumn = Model.Title.ElementAt(i),
            TypeColumn = Model.Bind.ElementAt(i).Value,
            Width = Model.GridWidth.ElementAt(i) == 0 ? 100 : Model.GridWidth.ElementAt(i),
            VisibleColumn = enable,
            ClientTemplate = Model.ClientTemplate == null || string.IsNullOrEmpty(Model.ClientTemplate.ElementAt(i)) ? string.Empty : Model.ClientTemplate.ElementAt(i),
            clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
            clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
            clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
            clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
            clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
            clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
        };
    }
    list.Add(Grid);
}

@{
    var gridsetting = new ASOFTGridSetting 
    {
        NameGrid = "Grid" + Table,
        Scrollable = true,
        ControllerName = "GridCommon",
        NameEventPost = "ReadTKOneTable",
        ActionName = "ReadOneTable",
        IsShowCheck = false,
        HtmlAttribute = new { style = "height:530px;", @class = "asf-grid", AddNewRowDisabled = "true" },          
        ListGridColumn = list,   
        IsAutoHeight = false,
        TableName = Table
     };           
 }

@(Html.ASOFTCreateGrid<dynamic>(gridsetting, Model.PK))



 
            
       
        
        
        
        
    
    
    
    
    
   
    
    


