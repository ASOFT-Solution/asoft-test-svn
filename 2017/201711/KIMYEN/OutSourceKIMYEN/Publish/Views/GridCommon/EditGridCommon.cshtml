@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Created                Comment
//#      10/11/2015      Quang Hoang           Tạo mới
//####################################################################
*@
@using ASOFT.ERP.A00.Core.Control
@using ASOFT.ERP.A00.Core
@using ASOFT.ERP.A00.Entities.Common
@model ASOFTSysGrid
@{
    string table = ViewBag.Grid;
    var count = Model.Bind.Count;
    List<string> cbbox = new List<string>();
    List<string> cbdepend = new List<string>();
    List<string> AutoComplete = new List<string>();
    int j = 0;
    string temp = "";
    bool enablePK = false;
    Session["scr" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = ViewBag.ScreenID;
    Session["mdl" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = ViewBag.Module;
}


@Html.ASOFTHidden("listRequired" + table, Model.PK)

@{
    List<ASOFTGridColumnSetting> list = new List<ASOFTGridColumnSetting>();
   
    ASOFTGridColumnSetting rownum = new ASOFTGridColumnSetting
            {
                IDColumn = "RowNum",
                ClientTemplate = "#= renderNumber(data,'"+ table +"') #",
                TitleColumn = ASOFTLanguage.FindWordA00("A00.Number"),
                Width = 40,
                VisibleColumn = true,
                HtmlAttrCoulmns = (new { style = "text-align:center" })
            };
    list.Add(rownum);
    for (int i = 0; i < count; i++)
    {
        bool enable = Model.visible.ElementAt(i) == 1;
        bool edit = Model.ReadOnly.ElementAt(i) == 0;

        string Format = null;
        string template = null;
        string templateCombox = Model.ClientTemplate.ElementAt(i);
        if(enable)
        {
            bool checkRequired = Model.CheckRequired.ElementAt(i) == 1;
            if(checkRequired)
            {
                @Html.ASOFTHidden("listRequired" + table, Model.Bind.ElementAt(i).Key)
            }
        }

        if (Model.EditorTemplateName.ElementAt(i) != null && enable)
        {
            template = Model.EditorTemplateName.ElementAt(i);

            if (template.Equals("ComboboxGrid")) //Nếu editor combobox grid
            {
                cbbox.Add(Model.sysCombobox.ElementAt(i) + "," + Model.Bind.ElementAt(i).Key);
            }
            if (template.Equals("ComboboxGridShift"))
            {
                cbbox.Add(Model.sysCombobox.ElementAt(i) + "," + Model.Bind.ElementAt(i).Key);
            }
            if (template.Equals("ComboboxGridDepend")) //Nếu editor combobox grid phụ thuộc
            {
                cbdepend.Add(Model.sysCombobox.ElementAt(i) + "," + Model.Bind.ElementAt(i).Key + "," + table);
            }
            if (template.Equals("ComboboxGrid_LM"))
            {
                cbbox.Add(Model.sysCombobox.ElementAt(i) + "," + Model.Bind.ElementAt(i).Key);
            }
            if (template.Equals("AutoComplete") || template.Equals("AutoCompleteOfInventory")) //Nếu editor autocomplete
            {
                AutoComplete.Add(Model.sysCombobox.ElementAt(i));
            }
            if (template.Equals("UnitCostDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.UnitCostDecimalsFormatString;
            }
            if (template.Equals("ConvertedDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = string.Format("{{0:{0}}}", ASOFTEnvironment.NumberFormat.ConvertedDecimalsFormatString);
            }
            if (template.Equals("QuantityDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.QuantityDecimalsFormatString;
            }
            if (template.Equals("PercentDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.PercentDecimalsFormatString;
            }
            if (template.Equals("AbsentDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.AbsentDecimalsFormatString;
            }
            if (template.Equals("HolidayDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.HolidayDecimalsFormatString;
            }
            if (template.Equals("ExchangeRateDecimal"))
            {
                templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                Format = ASOFTEnvironment.NumberFormat.ExchangeRateDecimalsFormatString;
            }
            //templateCombox = " #=" + Model.Bind.ElementAt(i).Key + "!=null?" + Model.Bind.ElementAt(i).Key + ":''#";
        }
        else
        {
            switch (Model.Bind.ElementAt(i).Value.ToString())
            {
                case "System.Guid":
                    template = "Guid";
                    break;
                case "System.Int32":
                    template = "Integer";
                    break;
                case "System.Int64":
                    template = "Integer";
                    break;
                case "System.Byte":
                    template = "Byte";
                    break;
                case "System.Boolean":
                    template = "Boolean";
                    break;
                case "System.String":
                    template = "String";
                    break;
                case "System.DateTime":
                    template = Model.DataType[i] == 9 ? "DateGrid1" : "DateTime";
                    break;
                case "System.Decimal":
                    template = "Decimal";
                    break;
                default:
                    break;
            }
            if (template.Equals("Boolean"))
            {
                if (string.IsNullOrEmpty(templateCombox))
                {
                    templateCombox = string.Format(@"<input id = 'CbGridEdit_{0}' type='checkbox' #= data.{0} ? 'checked' : '' # onclick=CheckGridEdit('{1}','{0}',this) #=genValueCheckGrid('{0}',data)# />", Model.Bind.ElementAt(i).Key, table);
                    edit = false;
                }
            }
            if (template.Equals("Byte"))
            {
                if (string.IsNullOrEmpty(templateCombox))
                {
                    templateCombox = string.Format(@"<input type='checkbox' id = 'CbGridEdit_{0}' #= data.{0} == 1? 'checked' : '' # onclick=CheckGridEdit('{1}','{0}',this) #=genValueCheckGrid('{0}',data)#/>", Model.Bind.ElementAt(i).Key, table);
                    edit = false;
                }
            }
//            if (template.Equals("Image"))
//            {
//                if (string.IsNullOrEmpty(templateCombox))
//                {
//                    templateCombox = string.Format(@"<div class='customer-photo' 
//                    style='background-image: url(" + @Url.Content("~/content/web/Customers/#:data.CustomerID#.jpg") + ");'></div><div class='customer-name'>#: ContactName #</div>", Model.Bind.ElementAt(i).Key, table);
//                    edit = false;
//                }
//            }
        }


        if (Model.Bind.ElementAt(i).Key != Model.PK && !template.Equals("Byte") && !template.Equals("Boolean"))
        {
            if (string.IsNullOrEmpty(Model.ClientTemplate[i]))
            {
                if (Model.Bind.ElementAt(i).Value == typeof(DateTime))
                {
                    templateCombox = string.Format("#= parseDate(data,'{0}'," + Model.DataType[i] + ") #", Model.Bind.ElementAt(i).Key);
                }
            }

            ASOFTGridColumnSetting Grid = new ASOFTGridColumnSetting
            {
                IDColumn = Model.Bind.ElementAt(i).Key,
                TitleColumn = Model.Title.ElementAt(i),
                TypeColumn = Model.Bind.ElementAt(i).Value,
                EditorTemplateName = template,
                Width = Model.GridWidth.ElementAt(i) == 0 ? 100 : Model.GridWidth.ElementAt(i),
                VisibleColumn = enable,
                ClientTemplate = templateCombox,
                EditColumn = edit,
                HtmlAttrCoulmns = new { Content_DataType = Model.DataType.ElementAt(i), Type_Fields = Model.ControlType.ElementAt(i), columname = Model.Bind.ElementAt(i).Key },
                Format = Format,
                clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
                clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
                clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
                clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
                clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
                clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
            };
            list.Add(Grid);
        }
        else
        {
            if (template.Equals("Boolean") || template.Equals("Byte"))
            {
                ASOFTGridColumnSetting Grid = new ASOFTGridColumnSetting
                {
                    IDColumn = Model.Bind.ElementAt(i).Key,
                    TitleColumn = Model.Title.ElementAt(i),
                    TypeColumn = Model.Bind.ElementAt(i).Value,
                    EditorTemplateName = template,
                    Width = Model.GridWidth.ElementAt(i) == 0 ? 100 : Model.GridWidth.ElementAt(i),
                    VisibleColumn = enable,
                    ClientTemplate = templateCombox,
                    HtmlAttrCoulmns = (new { style = "text-align:center", @class = "asf-cols-align-center", Content_DataType = Model.DataType.ElementAt(i), Type_Fields = Model.ControlType.ElementAt(i) }),
                    EditColumn = edit,
                    clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
                    clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
                    clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
                    clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
                    clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
                    clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
                };
                list.Add(Grid);
            }
            else
            {
                j = i;
                temp = template;
                enablePK = enable;
            }
        }
    }
    ASOFTGridColumnSetting Grid1 = new ASOFTGridColumnSetting
    {
        IDColumn = Model.PK,
        Width = 36,
        TypeColumn = Model.Bind.ElementAt(j).Value,
        ClientTemplate = @"#=genDeleteBtn(data,'"+ table +"')#",
        VisibleColumn = enablePK,
        HtmlAttrCoulmns = (new { style = "text-align:center", Content_DataType = Model.DataType.ElementAt(j), Type_Fields = Model.ControlType.ElementAt(j) }),
        EditorTemplateName = temp,
    };
    list.Add(Grid1);
    }
@{
    var gridsetting = new ASOFTGridSetting
    {
        NameGrid = "GridEdit" + table,
        Scrollable = true,
        ControllerName = "GridCommon",
        NameEventPost = "ReadGridEdit",
        ActionName = "ReadEdit",
        IsShowCheck = false,
        IsAutoHeight = false,
        HtmlAttribute = new
        {
            style = "height:470px;",
            @class = "asf-grid",
        },
        ListGridColumn = list,
        TableName = table
    };
    Session["cbbox" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = cbbox;
    Session["cbdepend" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = cbdepend;
    Session["AutoComplete" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = AutoComplete;
 } 

@if (ViewBag.ScreenID == "SOF2011" && ASOFTEnvironment.CustomerIndex == ASOFTConstants.CUSTOMERINDEX_ANGEL)
{ 
    @(Html.ASOFTCreateGridEditAngel<dynamic>(gridsetting, Model.PK).Events(e => e.Save("Grid_Save")))

}
else
{
@(Html.ASOFTCreateGridEdit<dynamic>(gridsetting, Model.PK).Events(e => e.Save("Grid_Save")))
}


@*@if (Model.IsImage)
{
    <div hidden>
        @(Html.Kendo().Upload()
            .Name("UpLoadImageGrid").HtmlAttributes(new { id = "UpLoadImageGrid" })
            .Multiple(false)
            .ShowFileList(true)
            .Async(a => a.Save("SaveGrid", "GridCommon").AutoUpload(true)
        ).Events(e => e.Success("onImageSuccess").Upload("onImageUpload")
        ))
    </div>
}    *@
     
       
<script>
    function genCheckbox(data, cl, name) {
        if (data && data[cl] != null) {
            return data[cl];
        }
        if (name == "Boolean") {
            return false;
        }
        if (name == "Byte") {
            return 0;
        }
        return 0;
    }
</script>        
        
        
        
    
    
    
    
    
   
    
    


