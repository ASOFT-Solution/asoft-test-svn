
@using ASOFT.ERP.A00.Core.Control
@using ASOFT.ERP.A00.Core
@using ASOFT.ERP.A00.Entities.Common
@model ASOFTSysGrid

@{
    List<ASOFTGridColumnSetting> list = new List<ASOFTGridColumnSetting>();
    string Table = ViewBag.Grid;
    int typescr = ViewBag.ScreenType;
    var count = Model.Bind.Count;
    string tableChild = ViewBag.TableChild;
    int version = ViewBag.Version;
}

@if (!string.IsNullOrEmpty(Table))
{
    @Html.ASOFTHidden(Table + "type", typescr)
    @Html.ASOFTHidden("tableName", Table)
    @Html.ASOFTHidden("PK"+ Table, Model.PK)
}

@if (!string.IsNullOrEmpty(tableChild))
{
      @Html.ASOFTHidden("tableNameChild", tableChild)
      @Html.ASOFTHidden("typeChild", (int)ViewBag.type)
}

@for (int i = 0; i < count; i++)
{
    ASOFTGridColumnSetting Grid;
    bool enable = Model.visible.ElementAt(i) == 1 ? true : false;
    int tp = Model.Template.ElementAt(i);
    int controlType = Model.ControlType.ElementAt(i);
    int dataType = Model.DataType.ElementAt(i);

    string template = (string.IsNullOrEmpty(Model.ClientTemplate.ElementAt(i)) || Model.DataType[i] == 7) ? "" : string.Format(Model.ClientTemplate.ElementAt(i), Model.Bind.ElementAt(i).Key);

    if ((controlType == 5 || controlType == 6 || dataType == ASOFTConstants.DATETIME || dataType == ASOFTConstants.DATE) && string.IsNullOrEmpty(Model.ClientTemplate.ElementAt(i)))
    {
        template = version == 2 ? string.Format("#= parseDateVersion2(data,'{0}'," + dataType + ") #", Model.Bind.ElementAt(i).Key) : string.Format("#= parseDate(data.{0}," + dataType + ") #", Model.Bind.ElementAt(i).Key);
    }
    if (dataType == ASOFTConstants.DECIMAL && string.IsNullOrEmpty(Model.ClientTemplate.ElementAt(i)))
    {
        template = string.Format("#= kendo.toString(parseFloat(data.{0}), ASOFTEnvironment.NumberFormat.KendoConvertedDecimalsFormatString) || ''#", Model.Bind.ElementAt(i).Key);
    }
   
    Grid = new ASOFTGridColumnSetting
    {
        IDColumn = Model.Bind.ElementAt(i).Key,
        TitleColumn = Model.Title.ElementAt(i),
        TypeColumn = Model.Bind.ElementAt(i).Value,        
        ClientTemplate = template,
        VisibleColumn = enable,
        Width = Model.GridWidth[i] == 0 ? 100 : Model.GridWidth[i],
        clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
        clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
        clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
        clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
        clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
        clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
    };
    list.Add(Grid);

    if (!string.IsNullOrEmpty(Table))
    {
        @Html.ASOFTHidden(Model.Bind.ElementAt(i).Key + "_TypeFields", Model.DataType[i]).DisabledIf(true);
    }
 }
    
@{
    var gridsetting = new ASOFTGridSetting 
    {
        NameGrid = "Grid" + (Table ?? tableChild),
        Scrollable = true,
        ControllerName = "PopupSelectData",
        NameEventPost =  !string.IsNullOrEmpty(tableChild) ? "ReadChild" : "ReadTK",
        ActionName = !string.IsNullOrEmpty(tableChild) ? (version == 2 ? "ReadChildVersion2" : "ReadChild") : (version == 2 ? "ReadVersion2" : "Read"),
        IsAutoHeight = false,
        IsShowCheck = true,
        HtmlAttribute = new { style = "height:300px;", @class = "asf-grid", AddNewRowDisabled = "true" },          
        ListGridColumn = list,   
     };           
 }
@(Html.ASOFTCreateGrid<dynamic>(gridsetting, Model.PK))