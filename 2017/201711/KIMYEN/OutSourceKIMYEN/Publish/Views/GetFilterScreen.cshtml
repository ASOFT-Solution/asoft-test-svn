@using ASOFT.ERP.A00.Core;
@using ASOFT.ERP.ViewModel;
@using ASOFT.ERP.ViewModel.Helper;
@using System.Web.UI.WebControls;
@using ASOFT.ERP.A00.Entities.Common;
@model IEnumerable<ASOFTSysFieldsViewModel>
@{
    ViewBag.Width = 500;
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    List<string> listjava = ViewBag.Java;
    string module = ViewBag.Module;
}
@Html.Hidden("Module", (string)ViewBag.Module)
@Html.Hidden("ReportIDHide", (string)ViewBag.ReportID)
@Html.Hidden("ScreenID", (string)ViewBag.ScreenID)
@helper parseControl(ASOFTSysFieldsViewModel item, string module)
{
    @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
    @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
    if(item.SpecialControl != null)
    {
        ViewDataDictionary ViewDT = new ViewDataDictionary();
        ViewDT["Module"] = ViewBag.Module;
        ViewDT["ScreenID"] = ViewBag.ScreenID;
        ViewDT["ScreenType"] = "Filter";
        @Html.Partial(string.Format(@"../Shared/Control/" + LocalizedHelper.GetLocalizedSpecialControl(int.Parse(item.SpecialControl.ToString())).PartialName),item, ViewDT)
        @Html.ASOFTHidden(item.ColumnName, item.SpecialControl);
        return;
    }
    if (item.PopupVisible == 0)
    {
        @Html.ASOFTHidden(item.ColumnName, item.Data);
    }
    else
    {
        switch (item.Type)
        {
            case 1:
                <tr class=@item.ColumnName>
                    <td>@Html.Label(item.language)</td>
                    <td>@Html.ASOFTTextBox(itemModel => item.Data, htmlStyle: new { width = Unit.Percentage(100) }, htmlAttribute: new { @id = item.ColumnName })</td>                                                     
                </tr>
                break;

            case 2:
               
                <tr class=@item.ColumnName>
                    <td></td>
                    <td class = "asf-dynamic-cb">@Html.ASOFTCheckbox(itemModel => item.TypeCheckBox, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName }, dynamiclabel: item.language)</td>                                      
                </tr>
                break;

            case 3:
               
                <tr class=@item.ColumnName>
                    <td>@Html.Label(item.language)</td>
                    <td>
                     @{  
                ComboBoxDynamic DynamicComboModel = new ComboBoxDynamic();
                DynamicComboModel.sysComboBoxID = item.sysComboBoxID;
                DynamicComboModel.ScreenID = "ReportView";
                DynamicComboModel.Module = module.Remove(0, 5);
                if (ASOFT.ERP.Controllers.ComboBoxController.CheckDynamicData(DynamicComboModel, Model))
                {
                            @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel,  true,htmlAttributes: new { @id = item.ColumnName, @Module = module.Remove(0, 5), @ScreenID = "ReportView", @sysComboBoxID = item.sysComboBoxID }).Events(e => e.Open("OpenComboDynamic"))
                }
                else
                {
                        @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel,  false,htmlAttributes: new { @id = item.ColumnName })
                }
                    }</td>                                                     
                </tr>
                break;

            case 4:
                
                <tr class=@item.ColumnName>
                    <td>@Html.Label(item.language)</td>
                    <td colspan="3">
                     @{  
                ComboBoxDynamic DynamicMultiCheckListModel = new ComboBoxDynamic();
                DynamicMultiCheckListModel.sysComboBoxID = item.sysComboBoxID;
                DynamicMultiCheckListModel.ScreenID = "ReportView";
                DynamicMultiCheckListModel.Module = module.Remove(0, 5);
                if (ASOFT.ERP.Controllers.ComboBoxController.CheckDynamicData(DynamicMultiCheckListModel, Model))
                {
                            @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicMultiCheckListModel,  true,htmlAttributes: new { @id = item.ColumnName, @Module = module.Remove(0, 5), @ScreenID = "ReportView", @sysComboBoxID = item.sysComboBoxID }).Events(e => e.Open("OpenMultiCheckListDynamic"))
                }
                else
                {
                        @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicMultiCheckListModel, false, htmlAttributes: new { @id = item.ColumnName })
                }
                    }</td>                                                     
                </tr>
                break;

            case 5:
           
            <tr class=@item.ColumnName>
                <td>@Html.Label(item.language)</td>
                <td>
                    @Html.ASOFTDateEdit(itemModel => item.TypeDateTimePicker, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName })
                </td>
            </tr>
                break;
            
        }
    }
}
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "FormReportFilter" }))
{
    
    //control layout
    <div class="asf-form-container">
            <div class="form-content">
                 <table class="asf-table-view">
                    @foreach (var item in Model)
                    {
                         @parseControl(item, module);
                    }
                    @{//Combobox Template
    
        ASOFTSysFieldsViewModel comboPath = (ASOFTSysFieldsViewModel)ViewBag.GetPathTemplate;
        if (comboPath.FieldVisible == 0)
        {
        <tr>
                <td>@Html.Label(comboPath.language)</td>
                    <td>
        @Html.ASOFTBussinessComboBox().ASOFTComboPathReport(m => comboPath.Data, comboPath.DefaultValue, (string)ViewBag.Module, (string)ViewBag.ScreenID)
                        </td>
            </tr>
        } 
        else
        {
            @Html.ASOFTHidden("comboPath_Data", comboPath.ColumnName)
        }              
                      }
                </table>
           </div>
       </div>
   
    //Button
    <div class="asf-form-container">
        <div class="mtf0061-form-content">
            <div class="asf-form-button">
                    <table class="asf-table-view">
                    <tr>
                        <td align="right">
                            <div class="asf-popup-button-container">
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                                            .Name("btnClose").Events(e => e.Click("btnClose_Click")))
                                </div>
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnPrint"))
                                           .Name("btnPrint").Events(e => e.Click("btnPrint_Click")))
                                </div>
                                <div>
                                    @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnExcel"))
                                            .Name("btnExport").Events(e => e.Click("btnExport_Click")))
                                </div>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
         </div>
     </div>
}

@section jsFeature {
    @if (listjava.Count > 0)
    {
        foreach (string jv in listjava)
        {
            <script src="@Url.Content("~/Scripts/JavaCustomize/" + module.Remove(0, 5) + "/" + jv)" type="text/javascript"></script>
        }
    }
}

<script>
    //Xử lý textbox 
    $(document).ready(function () {
        var ip = $(":input[type='text']");
        $(ip).each(function () {
            $(this).attr("name", this.id);
        })
        
        if (typeof parent.returnReport === "function") {
            var list = parent.returnReport();
            $("#ReportID").val(list[0]);
            $("#ReportName").val(list[1]);
            $("#ReportID").attr("readonly", "readonly");
            $("#ReportName").attr("readonly", "readonly");
        }
    });

    //Xử lý cho combobox
    function onComboSuccess(result, combo) {
        combo.sender.dataSource.data(result);
        combo.sender.select(0);
    };

    function OpenComboDynamic(combo) {
        SendFromCombo(combo, "/combobox/ASOFTComboBoxDynamicLoadData")
    };

    function OpenMultiCheckListDynamic(combo) {
        SendFromCombo(combo, "/combobox/ASOFTMultiCheckListDynamicLoadData")
    };

    function SendFromCombo(combo, url) {
        var datamaster = ASOFT.helper.dataFormToJSON("FormReportFilter");
        var list = new Array();
        list.push(AddList("sysComboBoxID", combo.sender.element.attr("sysComboBoxID")));
        list.push(AddList("ScreenID", combo.sender.element.attr("ScreenID")));
        list.push(AddList("Module", combo.sender.element.attr("Module")));
        $.each(datamaster, function (key, value) {
            if (key.indexOf("_input") == -1) {
                var item = new Object();
                list.push(AddList(key, value));
            }
        });
        ASOFT.helper.postTypeJsonComboBox(url, list, combo, onComboSuccess);
    };
    function AddList(key, value) {
        var item = new Object();
        item.key = key;
        item.value = value;
        return item;
    };

    //Xử lý button
    function btnClose_Click(e) {
        ASOFT.asoftPopup.hideIframe(true);
    };

    var isPrint = false;
    var URLDoPrintorExport = '/ReportLayout/DoPrintOrExport?ReportID=' + $("#ReportIDHide").val() + '&Module=' + $("#Module").val();
    
    //Sự kiện xuất printBD
    function btnPrintBD_Click() {
        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck();
            if (Check) {
                return false;
            }
        }
        isPrint = true;
      
        var data = getData();
        var url = URLDoPrintorExport;
        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    }

    //Sự kiện xuất print
    function btnPrint_Click() {
        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck();
            if (Check) {
                return false;
            }
        }
        isPrint = true;
        var data = getData();
        var url = URLDoPrintorExport;
        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    };

    //Sự kiện xuất excel
    function btnExport_Click() {
        if (typeof CustomerCheck === "function") {
            Check = CustomerCheck();
            if (Check) {
                return false;
            }
        }
        isPrint = false;
        var data = getData();
        var url = URLDoPrintorExport;
        ASOFT.helper.postTypeJson(url, data, ExportSuccess);
    };

    function ExportSuccess(result) {
        if (result) {
            var urlPrint = '/ReportLayout/ReportViewer' ;
            var urlExcel = '/ReportLayout/ExportReport' ;
            var urlPost = isPrint ? urlPrint : urlExcel;
            var options = isPrint ? '&viewer=pdf' : '';
            var RM = '&ReportID=' + $("#ReportIDHide").val() + '&Module=' + $("#Module").val() + '&ScreenID=' + $("#ScreenID").val();
            // Tạo path full
            var fullPath = urlPost + "?id=" + result.apk + options + RM;

            // Getfile hay in báo cáo
            if (options) {
                window.open(fullPath, "_blank");
            } else {
                window.location = fullPath;
            }
        }
    }

    function getData()
    {
        var datamaster = ASOFT.helper.dataFormToJSON("FormReportFilter");
        var list = new Array();
        $.each(datamaster, function (key, value) {
            if (key.indexOf("_input") == -1) {
                if (key != "item.TypeCheckBox") {
                    var item = new Object();
                    list.push(AddList(key, value));
                }
            }
        });
        var cb = $(".asf-dynamic-cb").find("input[type='checkbox']");
        $(cb).each(function () {
            var temp = $(this).attr("checked");
            var id = $(this).attr("id");
            if (temp == "checked") {
                list.push(AddList(id, "1"));
            }
            else {
                list.push(AddList(id, "0"));
            }
        });
        
        return list;
    }
</script>

