@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Updater         Comment
//#     18/11/2015      Toàn Thiện      Tạo mới
//####################################################################
*@
@using ASOFT.ERP.A00.Core.Control;
@using ASOFT.ERP.ViewModel;
@using ASOFT.ERP.A00.Core;
@using Kendo.Mvc;
@model IEnumerable<ASOFTSysFieldsViewModel>
@helper History()
{
    <div class="asf-master-content">
        @ASOFTLanguage.FindWordA00("A00.History")
    </div>
}
@helper Attach()
{
    <div class="asf-master-content">
        @ASOFTLanguage.FindWordA00("A00.Attach")
    </div>
}
<script>
    $(document).ready(function() {
        ASOFT.form.setSameWidth("asf-content-block");
    });
</script>

@{
    IEnumerable<ASOFTSysGroupViewModel> ListGroup = ViewBag.ListGroup;
    string strContent = "<div class='asf-master-content'>{0}</div>";
    string strBlockLeft = "<div class='asf-content-block-sys left'>{0}</div>";
    string strBlockRight = "<div class='asf-content-block-sys right'>{0}</div>";
    string strBlockFirst = "<div class='asf-content-block first'>{0}</div>";
    string strBlockMiddle = "<div class='asf-content-block middle'>{0}</div>";
    string strBlockLast = "<div class='asf-content-block last'>{0}</div>";
    string strTable = "<table class='asf-table-view'>{0}</table>";
    string strTr = "<tr ><td class='content-label'>{0}</td><td class='dot'></td><td class='{2} content-text'>{1}</td></tr>";
    bool openGroup = true;
    
    foreach (ASOFTSysFieldsViewModel item in Model)
    {
        if (item.ViewVisible == 0)
        {               
        @Html.ASOFTHidden(item.ColumnName, item.Data);
        @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
        @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
        }
    }
    foreach (ASOFTSysGroupViewModel item in ListGroup)
    {

        string MainContent = string.Empty;
        string Tr = string.Empty;
        string Table = string.Empty;
        IEnumerable<ASOFTSysFieldsViewModel> ListField = Model.Where(m => !string.IsNullOrEmpty(m.GroupID)).Where(m => ("," + m.GroupID.Replace(" ", "") + ",").IndexOf("," + item.sysGroupID + ",") != -1 && m.ViewVisible == 1);

        if (item.ScreenID.Equals("A00"))
        {
            int col2 = ListField.Count() != null ? ListField.Count() : 0;
            int col1 = col2 / 2;
            if (col2 % 2 == 1)
            {
                col1 += 1;
            }
            int i = 0;
            string BlockLeft = string.Empty;
            string BlockRight = string.Empty;
            for (; i < col1; i++)
            {
                ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
                Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
            }
            Table = string.Format(strTable, Tr);
            Tr = string.Empty;
            BlockLeft = string.Format(strBlockLeft, Table);
            for (; i < col2; i++)
            {
                ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
                Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
            }
            Table = string.Format(strTable, Tr);
            Tr = string.Empty;
            BlockRight = string.Format(strBlockRight, Table);

            MainContent = string.Format(strContent, BlockLeft + BlockRight);
        }
        else
        {
            int col3 = ListField.Count() != null ? ListField.Count() : 0;
            int col1 = col3 / 3;
            int col2 = 0;
            if (col3 % 3 == 1)
            {
                col2 = (col1 * 2) + 1;
                col1++;
            }
            else if (col3 % 3 == 2)
            {
                col1++;
                col2 = col1 * 2;
            }
            else
            {
                col2 = col1 * 2;
            }
            int i = 0;

            string BlockFirst = string.Empty;
            string BlockMiddle = string.Empty;
            string BlockLast = string.Empty;
            for (; i < col1; i++)
            {
                ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
                Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
            }
            Table = string.Format(strTable, Tr);
            Tr = string.Empty;
            BlockFirst = string.Format(strBlockFirst, Table);
            for (; i < col2; i++)
            {
                ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
                Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
            }
            Table = string.Format(strTable, Tr);
            Tr = string.Empty;
            BlockMiddle = string.Format(strBlockMiddle, Table);
            for (; i < col3; i++)
            {
                ASOFTSysFieldsViewModel itemdata = ListField.ElementAt(i);
                Tr += string.Format(strTr, itemdata.language, itemdata.Data, itemdata.ColumnName);
            }
            Table = string.Format(strTable, Tr);
            Tr = string.Empty;
            BlockLast = string.Format(strBlockLast, Table);
            MainContent = string.Format(strContent, BlockFirst + BlockMiddle + BlockLast);
        }
        
        @(Html.Kendo().PanelBar()
              .Name(item.GroupID.ToString())
              .HtmlAttributes(new { @class = "block-panel-master" })
              .Events(m => m.Activate("ASOFT.panelFormat.fitColumnHeight"))
              .Animation(animation => animation.Enable(true))
              .Items(panelbar =>
              {
                  panelbar.Add().Text(item.language)
                  .HtmlAttributes(new { @class = "block-panel-master-header" })
                  .Expanded(openGroup).Content(MainContent);
              }
        ))
        openGroup = false;
    }
    }
