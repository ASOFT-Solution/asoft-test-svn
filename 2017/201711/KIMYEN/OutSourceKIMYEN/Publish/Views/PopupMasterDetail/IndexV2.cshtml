@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Updater              Comment
//#     10/11/2015      Quang Hoàng        Add heading
//####################################################################
*@
@using System.Web.Optimization
@using ASOFT.ERP.A00.Core
@using ASOFT.ERP.A00.Entities.Common;
@using ASOFT.ERP.A00.Core.MapperHelper;
@using ASOFT.ERP.ViewModel;
@using XCaptcha.Web.Mvc;
@using System.Web.UI.WebControls;
@using ASOFT.ERP.ViewModel.Helper;

@model IEnumerable<ASOFTSysFieldsViewModel>

@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
    string ScreenID = ViewBag.ScreenID;
    string module = ViewBag.Module;
    string table = Model.ElementAt(0).sysTable;

    List<string> listjava = new List<string>();
    List<string> listcss = new List<string>();
    List<ASOFTSysTableViewModel> listtb = ViewBag.Listtb;
    List<ASOFTSysFieldsViewModel> listPK = ViewBag.ListPK;
    List<ASOFTSysGroupViewModel> ListGr = ViewBag.ListGr;
    listjava = ViewBag.Java;
    listcss = ViewBag.CSS;
    string pk = ViewBag.PKParent;
    string key = ViewBag.Key;
    foreach (var lpk in listPK)
    {
        @Html.ASOFTHidden("Edit" + lpk.sysTable, listPK[0].ColumnName)
        @Html.ASOFTHidden("temp" + lpk.sysTable, "1")
    }


    //var col1 = count / 2;
    List<ASOFTSysFieldsViewModel> list = Model.ToList();
    bool isUpdateGrid = Model.ElementAt(0).FormStatus == ASOFTFormActionType.Edit;
    bool isInherit = Model.ElementAt(0).FormStatus == ASOFTFormActionType.Inherit;
    bool isUpdate = false;
    isUpdate = Model.ElementAt(0).FormStatus == ASOFTFormActionType.AddNew ? Model.ElementAt(0).AllowAdd(ScreenID) : Model.ElementAt(0).AllowUpdate(ScreenID);
    int version = ViewBag.Version;
}
@Html.ASOFTHidden("EnvironmentDivisionID", ASOFTEnvironment.DivisionID)
@Html.ASOFTHidden("isInherit", isInherit.ToString())
@Html.ASOFTHidden("isUpdate", isUpdateGrid.ToString())
@Html.ASOFTHidden("sysScreenID", ScreenID)
@Html.ASOFTHidden("sysTableID", table)
@Html.ASOFTHidden("module", module)
@Html.ASOFTHidden("sysScreenID", ScreenID)
@Html.ASOFTHidden("sysTable", Model.ElementAt(0).sysTable)
@Html.ASOFTHidden("PK", pk)
@Html.ASOFTHidden("Key", key)
@Html.ASOFTHidden("TBIndex", listPK[0].sysTable)
@Html.ASOFTHidden("Module", module)
@Html.ASOFTHidden("ScrIndex", listtb[0].ScreenID)
@Html.ASOFTHidden("UrlAvatar", Url.Action("Avatar", "GridCommon", null, HttpContext.Current.Request.Url.Scheme))
@Html.ASOFTHidden("VersionScreen", version)


@helper parseControl(ASOFTSysFieldsViewModel item, bool isUpdate, string ScreenID, string module)
{

    if (item.UniqueField == 1)
    {
        @Html.ASOFTHidden("Unique", item.ColumnName);
    }
    if (item.PopupVisible == 0)
    {               
        @Html.ASOFTHidden(item.ColumnName, item.Data);
        @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
        @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
    }
    else
    {
        switch (item.Type)
        {
            case 1:
                @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                                                                              bool readol = false;
                                                                              if (item.ReadOnly == 1 && Model.ToArray()[0].FormStatus != ASOFTFormActionType.AddNew)
                                                                              {
                                                                                  readol = true;
                                                                              }
                                                                              if (item.Pattern != null)
                                                                              {
                                                                                  if (item.Pattern.Equals("Email"))
                                                                                  {
                                                                                      item.Pattern = @"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$";
                                                                                      item.Message = "CFML000077";
                                                                                  }
                                                                              }
                <div class = "@item.ColumnName asf-filter-V2">
                    <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                     @if (item.AllowNull == 0)
                     {
                         <span class="asf-label-required">*</span>
                     }
                    </div>
                   @if(item.sysDataTypeID == 8)
                   {
                       <div class="asf-filter-input">@Html.ASOFTConvertedDecimal(itemModel => item.Data, htmlAttribute: new { @id = item.ColumnName, @requaird = item.AllowNull, @maxlength = item.MaxLenght, @regular = item.Pattern, @message = item.Message, isNumberic = true }).ReadOnlyIf(readol)</div>      
                   }
                    else
                   {
                    bool checkRegularExp = item.UniqueField == 1;
                    <div class="asf-filter-input">@Html.ASOFTTextBox(itemModel => item.Data, htmlAttribute: new { @id = item.ColumnName, @requaird = item.AllowNull, @maxlength = item.MaxLenght, @regular = item.Pattern, @message = item.Message}, checkRegularExp: checkRegularExp).ReadOnlyIf(readol)</div>        
                   }                                             
                </div>
                     break;
                case 2:
               bool readol1 = false;
                if (item.ReadOnly == 1)
                {
                    readol1 = true;
                }
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            if (item.ColumnName.Equals("Disabled") && isUpdate == false)
            {
            <div class = "@item.ColumnName asf-filter-V2" hidden>
                <div class="asf-filter-label-V2"></div>
                <div class="asf-filter-input" style="padding-top: 8px">@Html.ASOFTCheckbox(itemModel => item.TypeCheckBox, htmlAttributes: new { @id = item.ColumnName }, dynamiclabel: item.language).DisabledIf(readol1)</div>                                                     
            </div>
            } else {
                 <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2"></div>
                <div class="asf-filter-input" style="padding-top: 8px">@Html.ASOFTCheckbox(itemModel => item.TypeCheckBox, htmlAttributes: new { @id = item.ColumnName }, dynamiclabel: item.language).DisabledIf(readol1)</div>                                                     
            </div>               
            }
            break;

            case 3:
                @Html.ASOFTHidden("CheckInList", item.ColumnName);
                @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                <div class = "@item.ColumnName asf-filter-V2">
                    <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                    <div class="asf-filter-input">
                     @{  
                         ComboBoxDynamic DynamicComboModel = new ComboBoxDynamic();
                         DynamicComboModel.sysComboBoxID = item.sysComboBoxID;
                         DynamicComboModel.ScreenID = ViewBag.ScreenID;
                         DynamicComboModel.Module = ViewBag.Module;
                         DynamicComboModel.ColumName = item.ColumnName;
                         string ParentCombo = ASOFT.ERP.Controllers.ComboBoxController.GetParentColumname(DynamicComboModel, Model);
                         if (!string.IsNullOrEmpty(ParentCombo))
                         {
                            @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel, true, htmlAttributes: new { @id = item.ColumnName, @Module = ViewBag.Module, @ScreenID = ViewBag.ScreenID, @sysComboBoxID = item.sysComboBoxID,  @requaird = item.AllowNull, @ParentCombo = ParentCombo, @readOL = item.ReadOnly == 1}).Events(e => e.Open("OpenComboDynamic"))
                                                                              }
                                                                              else
                                                                              {
                        @Html.ASOFTBussinessComboBox().ASOFTComboBoxMultiColumn(itemModel => item.Data, DynamicComboModel, false, htmlAttributes: new { @id = item.ColumnName, @requaird = item.AllowNull, @readOL = item.ReadOnly == 1 })
                                                                              }
                    }</div>                                                     
                </div>
                                                                              break;

            case 4:
                @*@Html.ASOFTHidden("CheckInList", item.ColumnName);*@
                @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                <div class = "@item.ColumnName asf-filter-V2">
                    <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                    <div class="asf-filter-input">
                     @{  
                         ComboBoxDynamic DynamicComboModel1 = new ComboBoxDynamic();
                         DynamicComboModel1.sysComboBoxID = item.sysComboBoxID;
                         DynamicComboModel1.ScreenID = ViewBag.ScreenID;
                         DynamicComboModel1.Module = ViewBag.Module;
                         DynamicComboModel1.ColumName = item.ColumnName;
                         if (ASOFT.ERP.Controllers.ComboBoxController.CheckDynamicData(DynamicComboModel1, Model))
                         {
                            @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicComboModel1, true, htmlAttributes: new { @id = item.ColumnName, @Module = ViewBag.Module, @ScreenID = ViewBag.ScreenID, @sysComboBoxID = item.sysComboBoxID, @requaird = item.AllowNull, @readOL = item.ReadOnly == 1 }).Events(e => e.Open("OpenMultiCheckListDynamic"))
                                                                              }
                                                                              else
                                                                              {
                        @Html.ASOFTBussinessComboBox().ASOFTDynamicMultiCheckList(itemModel => item.Data, DynamicComboModel1, false, htmlAttributes: new { @id = item.ColumnName, @requaird = item.AllowNull, @readOL = item.ReadOnly == 1 })
                                                                              }
                    }</div>                                                     
                </div>
                                                                              break;

            case 5:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                </div>
                <div class="asf-filter-input">
                    @Html.ASOFTDateEdit(itemModel => item.TypeDateTimePicker, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @value = item.TypeDateTimePicker.ToString(), @requaird = item.AllowNull })
                </div>
            </div>
                                                                          break;

            case 6:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2">
               <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                <div class="asf-filter-input">
                    @Html.ASOFTDateEdit(itemModel => item.TypeDateTimePicker, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @value = item.TypeDateTimePicker.ToString(), @requaird = item.AllowNull })
                </div>
            </div>
                                                                          break;
            case 7:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                <div class="asf-filter-input">
                    @Html.ASOFTDateEditLongTime(itemModel => item.TypeDateTimePicker, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @value = item.TypeDateTimePicker.ToString(), @requaird = item.AllowNull }).Events(e => e.Open("LongDateTime"))

                </div>
            </div>
                                                                          break;
            case 8:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            @Html.ASOFTHidden(item.ColumnName, "");
            <div class = "@item.ColumnName asf-filter-V2" style="vertical-align:top">
                        <div style="vertical-align:top">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })</div>
                        <div>
                            @Html.ASOFTLogo("GridCommon", "Avatar", new { Column = "@item.ColumnName asf-filter-V2" + "_" + item.sysTable }, width:140, height:160)
                           @(Html.Kendo().Upload()
                                  .Name("upload").HtmlAttributes(new { id = "@item.ColumnName asf-filter-V2" + "_" + item.sysTable })
                                  .Messages(m => m.Select(ASOFTLanguage.FindWordA00("A00.btnUpload")))
                                  .Multiple(false)
                                  .ShowFileList(true)
                                  .Async(a => a.Save("Save", "GridCommon", new { Column = item.ColumnName + "_" + item.sysTable }).AutoUpload(true)
                                ).Events(e => e.Success("onImageSuccess")
                                                .Upload("onImageUpload"))
                            )
                            <div style="padding-left: 9px;">
                                 @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnDeleteImages"))
                                        .Name("btn-" + item.ColumnName + "_" + item.sysTable).Events(e => e.Click("btnDeleteImages_Click"))
                                     )
                            </div>
                        </div>
                        <div style="vertical-align:top">

                        </div>
                    </div>
                                                                          break; 
            case 9:
            bool readol2 = false;
                if (item.ReadOnly == 1)
                {
                    readol2 = true;
                }
            ComboBoxDynamic DynamicRadioModel = new ComboBoxDynamic();
            DynamicRadioModel.sysComboBoxID = item.sysRadioButtonID;
            DynamicRadioModel.ScreenID = ViewBag.ScreenID;
            DynamicRadioModel.Module = ViewBag.Module;
            string ParentRadio = ASOFT.ERP.Controllers.ComboBoxController.GetParentColumnameRadio(DynamicRadioModel, Model);
            var listRadio =  new List<Dictionary<string, string>>();
                                                                          if(!string.IsNullOrEmpty(ParentRadio))
                                                                          {
            listRadio = ASOFT.ERP.ViewModel.ASOFTBussinessRadioButton.ASOFTDynamicRadioButton(item.sysRadioButtonID, Model);
                                                                          }
                                                                          else{
                                                                              listRadio = ASOFT.ERP.ViewModel.ASOFTBussinessRadioButton.ASOFTDynamicRadioButton(item.sysRadioButtonID);
                                                                          }
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);

                foreach(var radio in listRadio)
                {
                    bool check = false;
                    if (radio.ContainsKey("IDLanguage"))
                    {
                        radio["Text"] = LocalizedHelper.GetLocalizedResourceString(radio["IDLanguage"], ScreenID, module);
                    }
                    if (item.Data != null)
                    {
                        if (radio["Value"].Equals(item.Data.ToString()))
                        {
                            check = true;
                        }
                    }
                <div>
                    <div class="asf-filter-label-V2"></div>
                    <div class="asf-filter-input">@Html.ASOFTRadioButton(itemModel => item.Data, radio["Value"], htmlAttributes: new { @id = item.ColumnName }).CheckedIf(check).DisabledIf(readol2) @radio["Text"]</div> 
                </div>                      
                }                               
            break;     
            case 10:
            List<ASOFTSysFields> listFields = new ASOFT.ERP.A00.Business.Common.ComboBoxBL().ComboBoxMultiColumn(item.sysComboBoxID).FindAll(m => m.Visible == 1);
            string headerTemplate = string.Empty;
            string itemTemplate = string.Empty;
            int listWidth = 150;
            if (listFields.Count > 1)
            {
                headerTemplate = @"<ul class='k-list asf-combo-item-header'><li class='k-item asf-combo-item-header-text'><div class='asf-combo-item'>{0}</div></div></ul>";
                itemTemplate = @"<div class='asf-combo-item'>{0}</div>";
                string header = "";
                string tempalteA = "";
                foreach(var itemF in listFields)
                {
                    header = header + "<div style='width: " + itemF.GridWidth + "px' class='k-state-default asf-combo-item-col-value'>" + LocalizedHelper.GetLocalizedResourceString(ScreenID + "." + itemF.ColumnName + ".Auto", ScreenID, module) + "</div>";
                    tempalteA = tempalteA + "<div style='width:" + itemF.GridWidth + "px' class='k-state-default asf-combo-item-col-value'>${" + itemF.ColumnName + "}</div>";
                    listWidth = listWidth + itemF.GridWidth;            
                }
                headerTemplate = string.Format(headerTemplate, header);
                itemTemplate = string.Format(itemTemplate, tempalteA);
            }
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2" style="vertical-align:top">
            <div>@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                </div>
                <div class ="addObject-auto asf-filter-input">
                    @(Html.Kendo().AutoCompleteFor(itemModel => item.Data)
                      .Animation(animation => animation.Enable(false))
                      .HtmlAttributes(new Dictionary<string, Object> {
                          {"class","post-add-autocomplete"}, 
                          {"height","10px"},
                          {"data-bind", "value: " + item.ColumnName},
                          { "Module" , ViewBag.Module },
                          { "ScreenID", ViewBag.ScreenID },
                          { "sysComboBoxID",  item.sysComboBoxID },
                          { "requaird", item.AllowNull},
                          {"listWidth", listWidth}
                      })
                      .DataTextField(item.ColumnName)
                      //.Placeholder(Html.ASOFTRaw(model => model.SearchMemberID))
                      .Filter("contains")
                      .Name(item.ColumnName)
                      .Events(e => e.Select("Auto_Change").DataBound("ASOFT.asoftComboBox.dataBound")) 
                      .HeaderTemplate(headerTemplate)   
                      .Template(itemTemplate)
                      )
                    <span class="asf-button-special"><a id='btnOpenSearch_"@item.ColumnName asf-filter-V2"' class="btnOpenSearch k-button k-button-icontext asf-button asf-icon-24 asf-i-search-24" style="width: 25px; height: 25px" data-role="button" role="button" aria-disabled="false" onclick="OpenSearchClick('"@item.ColumnName asf-filter-V2"')" tabindex="0">&nbsp;</a></span>
                </div>       
                </div>      
             break;
             
             case 11:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                <div class="asf-filter-input">
                    @Html.ASOFTTimeEditControl(itemModel => item.TypeTime, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @value = item.TypeTime.ToString(), @requaird = item.AllowNull, @regular = item.Pattern }).Events(e => e.Open("LongDateTime"))

                </div>
            </div>
                                                                          break;
                                                                          case 12:
                 @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                                                        
                <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                </div>
                @if(item.sysDataTypeID == 5)
                {
                    int MaxValue = !string.IsNullOrEmpty(item.MaxValue) ? Int32.Parse(item.MaxValue) : Int32.MaxValue;
                    int MinValue = !string.IsNullOrEmpty(item.MinValue) ? Int32.Parse(item.MinValue) : Int32.MinValue; 
                    <div class="asf-filter-input">@Html.ASOFTSpinEdit(itemModel => item.ValueSpin, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @requaird = item.AllowNull }).Format("#,0.").Max(MaxValue).Min(MinValue).Spinners(MaxValue >= 0 && MaxValue <= 10000)</div>         
                 } 
                @if(item.sysDataTypeID == 8)
                {
                    decimal MaxValue = !string.IsNullOrEmpty(item.MaxValue) ? decimal.Parse(item.MaxValue) : decimal.MaxValue;
                    decimal MinValue = !string.IsNullOrEmpty(item.MinValue) ? decimal.Parse(item.MinValue) : decimal.MinValue; 
                    <div class="asf-filter-input">@Html.ASOFTSpinEdit(itemModel => item.ValueSpin, htmlAttributes: new { @id = item.ColumnName, @name = item.ColumnName, @requaird = item.AllowNull }).Format(ASOFTEnvironment.NumberFormat.ConvertedDecimalsFormatString).Max(MaxValue).Min(MinValue)</div>  
                }                                                  
            </div>
            break;
            case 13:
                 @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                                                        
                <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                 </div>   
                <div class="asf-filter-input">@Html.ASOFTTextArea(itemModel => item.Data, htmlAttribute: new { @id = item.ColumnName, @requaird = item.AllowNull, @maxlength = item.MaxLenght, @regular = item.Pattern, @message = item.Message }).ReadOnlyIf(item.ReadOnly == 1)</div>                                                         
            </div>
            break;
             case 14:
                @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
                @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
                @Html.ASOFTHidden(item.ColumnName, string.IsNullOrEmpty(item.Data == null ? string.Empty : item.Data.ToString()) ? 1 : item.Data);
                                                        
                <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                </div>
                <div class="asf-filter-input">
                    @{
                    item.Data = string.IsNullOrEmpty(item.Data == null ? string.Empty : item.Data.ToString()) ? 1 : item.Data;
                        for (int i = 1; i <= 4; i++)
                        {
                            string classS = "st" + "@item.ColumnName asf-filter-V2" + i;
                            string imageStar = int.Parse(item.Data.ToString()) >= i ? "star.png" : "starnone.png";
                            <a onclick="Priority_Click('"@item.ColumnName asf-filter-V2"','@i')"><img class="@classS" src="/Content/Images/@imageStar"/></a>
                        }
                    }
                </div>                                                         
            </div>
                        break;
                         case 15:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
            <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                        @if (item.AllowNull == 0)
                        {
                            <span class="asf-label-required">*</span>
                        }
                    </div>
                <div class="asf-filter-input">
                    @{  
                        ComboBoxDynamic DynamicMultiModel = new ComboBoxDynamic();
                        DynamicMultiModel.sysComboBoxID = item.sysComboBoxID;
                        DynamicMultiModel.ScreenID = ViewBag.ScreenID;
                        DynamicMultiModel.Module = ViewBag.Module;
                        DynamicMultiModel.ColumName = item.ColumnName;
                        string ParentMulti = ASOFT.ERP.Controllers.ComboBoxController.GetParentColumname(DynamicMultiModel, Model);
                        if (!string.IsNullOrEmpty(ParentMulti))
                        {
                        @Html.ASOFTBussinessComboBox().ASOFTMultiSelectDynamic(itemModel => item.DataSelect, DynamicMultiModel, true, htmlAttributes: new { @id = item.ColumnName, @Module = ViewBag.Module, @ScreenID = ViewBag.ScreenID, @sysComboBoxID = item.sysComboBoxID, @requaird = item.AllowNull, @ParentCombo = ParentMulti, @readOL = item.ReadOnly == 1}).Events(e => e.Open("OpenMultiSelectDynamic"))
                                                                          }
                                                                          else
                                                                          {
                    @Html.ASOFTBussinessComboBox().ASOFTMultiSelectDynamic(itemModel => item.DataSelect, DynamicMultiModel, false, htmlAttributes: new { @id = item.ColumnName, @Module = ViewBag.Module, @ScreenID = ViewBag.ScreenID, @sysComboBoxID = item.sysComboBoxID,  @requaird = item.AllowNull, @readOL = item.ReadOnly == 1 })
                                                                          }
                }</div>                                                     
            </div>
                                                                          break;
                                                                          case 16:
            @Html.ASOFTHidden(item.ColumnName + "_Content_DataType", item.sysDataTypeID);
            @Html.ASOFTHidden(item.ColumnName + "_Type_Fields", item.Type);
             <div class = "@item.ColumnName asf-filter-V2">
                <div class="asf-filter-label-V2">@Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                    @if (item.AllowNull == 0)
                    {
                        <span class="asf-label-required">*</span>
                    }
                </div>
              
                    <div class="asf-filter-input" >@Html.ASOFTTextBox(itemModel => item.Data, htmlAttribute: new { @id = item.ColumnName }, htmlStyle: new { width = "85% !important" }).DisabledIf(true)
                              @(Html.ASOFTButton("...").HtmlAttributes(new { style = "z-index:10001; position: absolute; right: 28px; height: 25px; min-width: 27px; border: 1px solid #dddddd", @class = "k-button-icontext asf-button" }).Name("btn" + item.ColumnName))
                               @(Html.ASOFTButton("").HtmlAttributes(new { style = "z-index:10001; position: absolute; right: 0px; height: 25px; min-width: 27px; border: 1px solid #dddddd", @class = "asf-i-delete-32 k-button-icontext" })
                                  .Name("btnDelete" + item.ColumnName))
                    </div>                                                             
            </div>
                    break;
                     case 17:                   
                     <div class = "@item.ColumnName asf-filter-V2">
                       <div class="asf-filter-label-V2">
                            @Html.Label(item.language, htmlAttributes: new { @for = item.ColumnName })
                            @if(item.AllowNull == 0)
                            {
                                <span class="asf-label-required">*</span>
                            }
                        </div>
                        <div class="asf-filter-input">
                            @Html.Partial("~/Views/Shared/Attach/AttachFile.cshtml", item)
                        </div>
                    </div>                                
                    break;        
        }
    }
}

@helper tabHeaderGrid(ASOFTSysTableViewModel tab, string screen, string module)
{        
    @Html.Action("EditGridCommon", "GridCommon", new { area = "", id = screen, module = module, table = tab.TableName });
}

@helper tabHeaderFields(ASOFTSysTableViewModel tab, string screen, string module, string pk, string refKey)
{
    @Html.Action("GetFieldsPopup", "PopupMasterDetail", new { area = "", id = screen, module = module, table = tab.TableName, PK = pk, RefPK = refKey });
}

@helper tabHeader(List<ASOFTSysFieldsViewModel> list, string ScreenID, string module,  bool isUpdate)
{
    if (list.Find(m => m.LayoutPosition != null) != null)
    {
        <div class="asf-filter-main">
            <div class="asf-table-view">              
                @foreach (var item in list.FindAll(m => (m.LayoutPosition == 0 || m.LayoutPosition == null ) && m.PopupVisible == 1))
                {
                    @parseControl(item, isUpdate, ScreenID, module);
                }
            </div>
        </div>
         <div class="grid_6_1 alpha float_left">
                <div class="asf-table-view">              
                @foreach (var item in list.FindAll(m => m.LayoutPosition == 1 && m.PopupVisible == 1))
                {

                    @parseControl(item, isUpdate, ScreenID, module);
                }
            </div>
        </div>
         <div class="grid_6 omega float_right line_left_with_grid">
                <div class="asf-table-view">
                    @foreach (var item in list.FindAll(m => m.LayoutPosition == 2 && m.PopupVisible == 1))
                    {
                        @parseControl(item, isUpdate, ScreenID, module);
                    }
                </div>
        </div>
        <div class="asf-filter-main">
            <div class="asf-table-view">              
                @foreach (var item in list.FindAll(m => m.LayoutPosition == 3 && m.PopupVisible == 1))
                {

                    @parseControl(item, isUpdate, ScreenID, module);
                }
            </div>
        </div>
        foreach (var it in list.FindAll(m => m.PopupVisible == 0))
        {
            if (it.UniqueField == 1)
            {
                @Html.ASOFTHidden("Unique", it.ColumnName);
            }
            @Html.ASOFTHidden(it.ColumnName, it.Data);
            @Html.ASOFTHidden(it.ColumnName + "_Content_DataType", it.sysDataTypeID);
            @Html.ASOFTHidden(it.ColumnName + "_Type_Fields", it.Type);
        }
    }
    else
    {
        int count = list.FindAll(m => m.PopupVisible == 1).Count;
        int i = 0;
        <div class="grid_6_1 alpha float_left">
            <div class="asf-table-view">
                @foreach (var item in list.FindAll(m => m.PopupVisible == 1))
                {
                    @parseControl(item, isUpdate, ScreenID, module);
                                       list.Remove(item);
                                       i++;
                                       if (i > count / 2)
                                       {
                                           break;
                                       }
                }
            </div>
        </div>
        <div class="grid_6 omega float_right line_left_with_grid">
            <div class="asf-table-view">
                @foreach (var item in list.FindAll(m => m.PopupVisible == 1))
                {
                    @parseControl(item, isUpdate,ScreenID, module);
                }
            </div>
            @foreach (var item in list.FindAll(m => m.PopupVisible == 0))
            {
                @parseControl(item, isUpdate, ScreenID, module);
            }
        </div>
    }
}


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = ScreenID, onsubmit = "return false" }))
{
    if (ListGr.Count == 0)
    {
        <div class="asf-form-container container_12 pagging_bottom ">
            @tabHeader(list, ScreenID, module,  isUpdateGrid)
        </div>
    }
    else if (list.FindAll(m => m.sysGroupID == 0).Count > 0)
    {
        <div class="asf-form-container container_12 pagging_bottom ">
            @tabHeader(list.FindAll(m => m.sysGroupID == 0), ScreenID, module,  isUpdateGrid)
        </div>
    }
    
    <div class="asf-form-container container_12">
        @if (ListGr.Count == 0)
        {
            if (listtb.Count == 1)
            {
                @Html.ASOFTHidden("tableNameEdit",  listtb[0].TableName)
                @Html.ASOFTHidden("PKChild" + listtb[0].TableName, listtb[0].PK)
                @Html.Action("EditGridCommon", "GridCommon", new { area = "", id = ScreenID, module = module, table = listtb.ElementAt(0).TableName, formStatus= Model.ElementAt(0).FormStatus })
            }
            else
            {

                foreach (var tb in listtb)
                {
                    @Html.ASOFTHidden("tableNameEdit", tb.TableName);
                    @Html.ASOFTHidden("PKChild" + tb.TableName, tb.PK);
                }
                
                 @(Html.ASOFTTab()
                    .Name("Tabs")
                    .Items(tabstrip =>
                    {
                        int j = 0;
                        bool selected = true;
                        foreach (var tab in listtb)
                        {
                          
                            var tabhp = tabHeaderGrid(tab, ScreenID, module).ToHtmlString();
                            tabstrip
                                .Add()
                                .HtmlAttributes(new
                                {
                                    id = tab.TableName,
                                    name = tab.ScreenID
                                })
                                .Selected(selected)
                                .ContentHtmlAttributes(new
                                {
                                    @class = "asf-tab-content"
                                })
                                .Content(tabhp)
                                .Text(listPK[j].language)
                                ;
                            selected = false;
                            j++;
                        }
                    }).Events(e => e.Select("tabSelect_Click"))
                )
            }
        }
        else 
        {
            foreach (var tb in listtb)
            {
                ASOFTSysGroupViewModel gr = ListGr.Find(m => (m.sysTable ?? string.Empty).Equals(tb.TableName));
                if (gr != null)
                {
                    @Html.ASOFTHidden("tableNameEdit", tb.TableName);
                    @Html.ASOFTHidden("PKChild" + tb.TableName, tb.PK);
                }
            }
            
             @(Html.ASOFTTab()
            .Name("Tabs")
            .Items(tabstrip =>
            {
                bool selected = true;
                foreach (var tab in ListGr)
                {
                    ASOFTSysFieldsViewModel fieldRef = listPK.Find(m => m.sysTable.Equals(tab.sysTable)) ?? new ASOFTSysFieldsViewModel();
                    ASOFTSysTableViewModel tb = listtb.Find(m => m.TableName.Equals(tab.sysTable));
                    var tabhp = tb == null ? tabHeader(Model.Where(m => m.sysGroupID == tab.sysGroupID).ToList(), ScreenID, module, isUpdate).ToHtmlString() : (tab.IsFields == 1 ? tabHeaderFields(tb, ScreenID, module, pk, fieldRef.ColumnName).ToHtmlString() : tabHeaderGrid(tb, ScreenID, module).ToHtmlString());
                    tabstrip
                        .Add()
                        .HtmlAttributes(new
                        {
                            //id = tab.TableName,
                            name = tab.ScreenID
                        })
                        .Selected(selected)
                        .ContentHtmlAttributes(new
                        {
                            @class = "asf-tab-content"
                        })
                        .Content(tabhp)
                        .Text(tab.language)
                        ;
                    selected = false;
                }
            }))
        }
    </div>
    <div class="container_12 asf-form-button">
        <ul class="empty">
            <li>
                
                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveNew"))
                      .Name("SaveNew")
                      .Enable(Model.ElementAt(0).AllowAdd())
                      .Events(m => m.Click("SaveNew_Click"))
                      .HideIf(Model.ElementAt(0).FormStatus != ASOFTFormActionType.AddNew))
            </li>
            <li>
                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSaveCopy"))
                      .Name("SaveClose")
                       .Enable(Model.ElementAt(0).AllowAdd())
                       .Events(m => m.Click("SaveCopy_Click"))
                      .HideIf(Model.ElementAt(0).FormStatus != ASOFTFormActionType.AddNew))
            </li>
            <li>
                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSave"))
                      .Name("BtnSave")
                      .Enable(Model.ElementAt(0).AllowUpdate())
                      .Events(m => m.Click("Save_Click"))
                      .HideIf(Model.ElementAt(0).FormStatus == ASOFTFormActionType.AddNew))
            </li>
            <li>
                @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                      .Name("Close")
                      .Events(e => e.Click(isUpdate ? "popupClose_Click" : "ASOFT.asoftPopup.closeOnly")))
                     
            </li>
        </ul>
    </div>
                                
}

@section jsFeature {
    @if (listjava.Count > 0)
    {
        foreach (string jv in listjava)
        {
            <script src="@Url.Content("~/Scripts/JavaCustomize/" + module + "/" + jv+"?v="+ASOFTEnvironment.Version)" type="text/javascript"></script>
        }
    }
}

@section styleFeature {
    @if (listcss.Count > 0)
    {
        foreach(string css in listcss)
        {
            <link  href="@Url.Content("~/Content/CSSCustomize/"+ module + "/" + css + "?v="+ASOFTEnvironment.Version)" rel="stylesheet" type="text/css" />
        }
    }
}

<script src="@Url.Content("~/Scripts/popupmasterdetail.js" +"?v="+ASOFTEnvironment.Version)" type="text/javascript"></script>

<link href="@Url.Content("~/Content/Styles/popup.css" +"?v="+ASOFTEnvironment.Version)" rel="stylesheet" type="text/css" />   

  