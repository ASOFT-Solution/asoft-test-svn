@*
//####################################################################
//# Copyright (C) 2010-2011, ASoft JSC.  All Rights Reserved. 
//#
//# History:
//#     Date Time       Created                Comment
//#      10/11/2015      Quang Hoang           Tạo mới
//####################################################################
*@
@using ASOFT.ERP.A00.Core.Control
@using ASOFT.ERP.A00.Core
@using ASOFT.ERP.A00.Entities.Common
@model ASOFTSysGrid
@{
    string table = ViewBag.Grid;
    var count = Model.Bind.Count;
    int j = 0;
    string temp = "";
    bool enablePK = false;
    Session["scr" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = ViewBag.ScreenID;
    Session["mdl" + ASOFTEnvironment.UserID + ASOFTEnvironment.ModuleID] = ViewBag.Module;
}


@Html.ASOFTHidden("listRequired" + table, Model.PK)
<div class="asf-form-container container_12">
    <div class="k-content asf-tab-content k-state-active">
        @{
            List<ASOFTGridColumnSetting> list = new List<ASOFTGridColumnSetting>();

            ASOFTGridColumnSetting rownum = new ASOFTGridColumnSetting
                    {
                        IDColumn = "RowNum",
                        ClientTemplate = "#= renderNumber(data,'" + table + "') #",
                        TitleColumn = ASOFTLanguage.FindWordA00("A00.Number"),
                        Width = 40,
                        VisibleColumn = true,
                        HtmlAttrCoulmns = (new { style = "text-align:center" })
                    };
            list.Add(rownum);
            for (int i = 0; i < count; i++)
            {
                bool enable = Model.visible.ElementAt(i) == 1;
                bool edit = Model.ReadOnly.ElementAt(i) == 0;

                string Format = null;
                string template = null;
                string templateCombox = Model.ClientTemplate.ElementAt(i);
                if (enable)
                {
                    bool checkRequired = Model.CheckRequired.ElementAt(i) == 1;
                    if (checkRequired)
                    {
            @Html.ASOFTHidden("listRequired" + table, Model.Bind.ElementAt(i).Key)
                    }
                }

                if (Model.EditorTemplateName.ElementAt(i) != null && enable)
                {
                    template = Model.EditorTemplateName.ElementAt(i);
                    if (template.Equals("ConvertedDecimal"))
                    {
                        templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                        Format = string.Format("{{0:{0}}}", ASOFTEnvironment.NumberFormat.ConvertedDecimalsFormatString);
                    }
                    if (template.Equals("PercentDecimal"))
                    {
                        templateCombox = string.Format(templateCombox, Model.Bind.ElementAt(i).Key);
                        Format = ASOFTEnvironment.NumberFormat.PercentDecimalsFormatString;
                    }
                }
                else
                {
                    switch (Model.Bind.ElementAt(i).Value.ToString())
                    {
                        case "System.Guid":
                            template = "Guid";
                            break;
                        case "System.Int32":
                            template = "Integer";
                            break;
                        case "System.Int64":
                            template = "Integer";
                            break;
                        case "System.Byte":
                            template = "Byte";
                            break;
                        case "System.Boolean":
                            template = "Boolean";
                            break;
                        case "System.String":
                            template = "String";
                            break;
                        case "System.DateTime":
                            template = Model.DataType[i] == 9 ? "DateGrid1" : "DateTime";
                            break;
                        case "System.Decimal":
                            template = "Decimal";
                            break;
                        default:
                            break;
                    }
                }


                if (Model.Bind.ElementAt(i).Key != Model.PK && !template.Equals("Byte") && !template.Equals("Boolean"))
                {
                    ASOFTGridColumnSetting Grid = new ASOFTGridColumnSetting
                    {
                        IDColumn = Model.Bind.ElementAt(i).Key,
                        TitleColumn = Model.Title.ElementAt(i),
                        TypeColumn = Model.Bind.ElementAt(i).Value,
                        EditorTemplateName = template,
                        Width = Model.GridWidth.ElementAt(i) == 0 ? 100 : Model.GridWidth.ElementAt(i),
                        VisibleColumn = enable,
                        ClientTemplate = templateCombox,
                        EditColumn = edit,
                        HtmlAttrCoulmns = new { Content_DataType = Model.DataType.ElementAt(i), Type_Fields = Model.ControlType.ElementAt(i), columname = Model.Bind.ElementAt(i).Key },
                        Format = Format,
                        clientGroupOnGrid = Model.GroupOnGrid.ElementAt(i),
                        clientMaxOnGrid = Model.MaxOnGrid.ElementAt(i),
                        clientMinOnGrid = Model.MinOnGrid.ElementAt(i),
                        clientAverageOnGrid = Model.AverageOnGrid.ElementAt(i),
                        clientCountOnGrid = Model.CountOnGrid.ElementAt(i),
                        clientSumOnGrid = Model.SumOnGrid.ElementAt(i)
                    };
                    list.Add(Grid);
                }
            }
            ASOFTGridColumnSetting Grid1 = new ASOFTGridColumnSetting
            {
                IDColumn = Model.PK,
                Width = 36,
                TypeColumn = Model.Bind.ElementAt(j).Value,
                ClientTemplate = @"#=genDeleteBtn(data,'" + table + "')#",
                VisibleColumn = enablePK,
                HtmlAttrCoulmns = (new { style = "text-align:center", Content_DataType = Model.DataType.ElementAt(j), Type_Fields = Model.ControlType.ElementAt(j) }),
                EditorTemplateName = temp,
            };
            list.Add(Grid1);
        }
        @{
            var gridsetting = new ASOFTGridSetting
            {
                NameGrid = "GridEdit" + table,
                Scrollable = true,
                ControllerName = "Partial",
                NameEventPost = "ReadGridEdit",
                ActionName = "GridDataEditLMT1020",
                IsShowCheck = true,
                IsAutoHeight = false,
                HtmlAttribute = new
                {
                    style = "height:300px;",
                    @class = "asf-grid",
                },
                ListGridColumn = list,
                TableName = table
            };
        }

        @(Html.ASOFTCreateGridEditHasIsShowCheck<dynamic>(gridsetting).Events(e => e.Save("Grid_Save")))

    </div>
</div>
<div class="container_12 asf-form-button">
    <ul class="empty">
        <li>

            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnSave"))
                      .Name("BtnSave")
                      .Enable(true)
                      .Events(m => m.Click("LMF1023.Save_Click")))
        </li>
        <li>
            @(Html.ASOFTButton(ASOFTLanguage.FindWordA00("A00.btnClose"))
                      .Name("Close")
                      .Events(e => e.Click("btnCancle_Click")))

        </li>
    </ul>
</div>
@Html.ASOFTHidden("UrlConfirm", Url.Action("Confirm", "LMF1023"))
<script>
    function genCheckbox(data, cl, name) {
        if (data && data[cl] != null) {
            return data[cl];
        }
        if (name == "Boolean") {
            return false;
        }
        if (name == "Byte") {
            return 0;
        }
        return 0;
    }
</script>













