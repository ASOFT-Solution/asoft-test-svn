



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `MyConnection`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=TOANTHIEN-PC\MSSQLSERVER2012;Initial Catalog=QuanTriNhanLuc;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;
using System.ComponentModel.DataAnnotations;

namespace MyConnection
{

	public partial class MyConnectionDB : Database
	{
		public MyConnectionDB() 
			: base("MyConnection")
		{
			CommonConstruct();
		}

		public MyConnectionDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			MyConnectionDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static MyConnectionDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new MyConnectionDB();
        }

		[ThreadStatic] static MyConnectionDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static MyConnectionDB repo { get { return MyConnectionDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    
	[TableName("HoiVien")]


	[PrimaryKey("DivisionID", autoIncrement=false)]

	[ExplicitColumns]
    public partial class HoiVien : MyConnectionDB.Record<HoiVien>  
    {

		[Column] public Guid APK { get; set; }




        [Display(Name = "Đơn vị")]
        [Required(ErrorMessage = "Mã đơn vị không được rỗng")]
		[Column] public string DivisionID { get; set; }



        [Display(Name = "Mã hội viên")]
        [Required(ErrorMessage = "Mã hội viên không được rỗng")]
		[Column] public string MemberID { get; set; }




        [Display(Name = "Tên hội viên")]
		[Column] public string MemberName { get; set; }





		[Column] public string ShortName { get; set; }




        [Display(Name = "Địa chỉ")]
		[Column] public string Address { get; set; }




        [Display(Name = "Mã số thuế/Số CMND")]
        [RegularExpression(@"^\d+$", ErrorMessage = "Mã số thuế/CMND không hợp lệ")]
		[Column] public string Identify { get; set; }




        [Display(Name = "Điện thoại di động")]
        [RegularExpression(@"^\d+$", ErrorMessage = "Số điện thoại không hợp lệ")]
		[Column] public string Phone { get; set; }




        [Display(Name = "Số điện thoại")]
        [RegularExpression(@"^\d+$", ErrorMessage = "Số điện thoại không hợp lệ")]
		[Column] public string Tel { get; set; }



        [RegularExpression(@"^\d+$", ErrorMessage = "Số fax không hợp lệ")]
		[Column] public string Fax { get; set; }




        [RegularExpression(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", ErrorMessage = "Email không hợp lệ")]
		[Column] public string Email { get; set; }





		[Column] public DateTime? Birthday { get; set; }




        [RegularExpression(@"([\w-]+.)+[\w-]+(/[\w- ./?%&=])?$",ErrorMessage = "Địa chỉ trang không hợp lệ")]
		[Column] public string Website { get; set; }




        [RegularExpression(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$", ErrorMessage = "Hộp thư không hợp lệ")]
		[Column] public string Mailbox { get; set; }





		[Column] public string AreaName { get; set; }





		[Column] public string CityName { get; set; }





		[Column] public string CountryName { get; set; }





		[Column] public string WardName { get; set; }





		[Column] public string CountyName { get; set; }





		[Column] public DateTime? CreateDate { get; set; }





		[Column] public string CreateUserID { get; set; }





		[Column] public DateTime? LastModifyDate { get; set; }





		[Column] public string LastModifyUserID { get; set; }




        [Display(Name = "Không kích hoạt")]
		[Column] public byte Disable { get; set; }

	}

    
	[TableName("MenuDaCap")]


	[PrimaryKey("MaMenu", autoIncrement=false)]

	[ExplicitColumns]
    public partial class MenuDaCap : MyConnectionDB.Record<MenuDaCap>  
    {



		[Column] public int MaMenu { get; set; }





		[Column] public string Ten { get; set; }





		[Column] public int? Bac { get; set; }





		[Column] public int? MaParent { get; set; }



	}


}



